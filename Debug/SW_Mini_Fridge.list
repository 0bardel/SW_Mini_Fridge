
SW_Mini_Fridge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1e0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000328c  0800a380  0800a380  0001a380  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d60c  0800d60c  00020620  2**0
                  CONTENTS
  4 .ARM          00000008  0800d60c  0800d60c  0001d60c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d614  0800d614  00020620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d614  0800d614  0001d614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d618  0800d618  0001d618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000620  20000000  0800d61c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000994  20000620  0800dc3c  00020620  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000fb4  0800dc3c  00020fb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020620  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b28  00000000  00000000  00020650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000368d  00000000  00000000  00037178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  0003a808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001248  00000000  00000000  0003bbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001926b  00000000  00000000  0003cdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c9c  00000000  00000000  00056063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092de3  00000000  00000000  0006ecff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00101ae2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063d4  00000000  00000000  00101b34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000620 	.word	0x20000620
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a368 	.word	0x0800a368

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000624 	.word	0x20000624
 80001dc:	0800a368 	.word	0x0800a368

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f62:	f107 030c 	add.w	r3, r7, #12
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
 8000f70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	4b3e      	ldr	r3, [pc, #248]	; (8001070 <MX_GPIO_Init+0x114>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a3d      	ldr	r2, [pc, #244]	; (8001070 <MX_GPIO_Init+0x114>)
 8000f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b3b      	ldr	r3, [pc, #236]	; (8001070 <MX_GPIO_Init+0x114>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	4b37      	ldr	r3, [pc, #220]	; (8001070 <MX_GPIO_Init+0x114>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a36      	ldr	r2, [pc, #216]	; (8001070 <MX_GPIO_Init+0x114>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b34      	ldr	r3, [pc, #208]	; (8001070 <MX_GPIO_Init+0x114>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	603b      	str	r3, [r7, #0]
 8000fae:	4b30      	ldr	r3, [pc, #192]	; (8001070 <MX_GPIO_Init+0x114>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a2f      	ldr	r2, [pc, #188]	; (8001070 <MX_GPIO_Init+0x114>)
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b2d      	ldr	r3, [pc, #180]	; (8001070 <MX_GPIO_Init+0x114>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2138      	movs	r1, #56	; 0x38
 8000fca:	482a      	ldr	r0, [pc, #168]	; (8001074 <MX_GPIO_Init+0x118>)
 8000fcc:	f001 ff06 	bl	8002ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 8000fd0:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000fd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fde:	f107 030c 	add.w	r3, r7, #12
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4823      	ldr	r0, [pc, #140]	; (8001074 <MX_GPIO_Init+0x118>)
 8000fe6:	f001 fc79 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff8:	f107 030c 	add.w	r3, r7, #12
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	481d      	ldr	r0, [pc, #116]	; (8001074 <MX_GPIO_Init+0x118>)
 8001000:	f001 fc6c 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001004:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001008:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800100a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800100e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001010:	2301      	movs	r3, #1
 8001012:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	4619      	mov	r1, r3
 800101a:	4817      	ldr	r0, [pc, #92]	; (8001078 <MX_GPIO_Init+0x11c>)
 800101c:	f001 fc5e 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001020:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001024:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001026:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800102a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800102c:	2301      	movs	r3, #1
 800102e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	4619      	mov	r1, r3
 8001036:	4810      	ldr	r0, [pc, #64]	; (8001078 <MX_GPIO_Init+0x11c>)
 8001038:	f001 fc50 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800103c:	2338      	movs	r3, #56	; 0x38
 800103e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001040:	2301      	movs	r3, #1
 8001042:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001044:	2302      	movs	r3, #2
 8001046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	4619      	mov	r1, r3
 8001052:	4808      	ldr	r0, [pc, #32]	; (8001074 <MX_GPIO_Init+0x118>)
 8001054:	f001 fc42 	bl	80028dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	2100      	movs	r1, #0
 800105c:	2017      	movs	r0, #23
 800105e:	f001 fb66 	bl	800272e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001062:	2017      	movs	r0, #23
 8001064:	f001 fb7f 	bl	8002766 <HAL_NVIC_EnableIRQ>

}
 8001068:	bf00      	nop
 800106a:	3720      	adds	r7, #32
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40023800 	.word	0x40023800
 8001074:	40020400 	.word	0x40020400
 8001078:	40020000 	.word	0x40020000

0800107c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <MX_I2C1_Init+0x50>)
 8001082:	4a13      	ldr	r2, [pc, #76]	; (80010d0 <MX_I2C1_Init+0x54>)
 8001084:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_I2C1_Init+0x50>)
 8001088:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <MX_I2C1_Init+0x58>)
 800108a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <MX_I2C1_Init+0x50>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <MX_I2C1_Init+0x50>)
 8001094:	2200      	movs	r2, #0
 8001096:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <MX_I2C1_Init+0x50>)
 800109a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800109e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a0:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <MX_I2C1_Init+0x50>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <MX_I2C1_Init+0x50>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ac:	4b07      	ldr	r3, [pc, #28]	; (80010cc <MX_I2C1_Init+0x50>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <MX_I2C1_Init+0x50>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010b8:	4804      	ldr	r0, [pc, #16]	; (80010cc <MX_I2C1_Init+0x50>)
 80010ba:	f001 fec1 	bl	8002e40 <HAL_I2C_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010c4:	f000 fba6 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	2000063c 	.word	0x2000063c
 80010d0:	40005400 	.word	0x40005400
 80010d4:	000186a0 	.word	0x000186a0

080010d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a19      	ldr	r2, [pc, #100]	; (800115c <HAL_I2C_MspInit+0x84>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d12b      	bne.n	8001152 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	4b18      	ldr	r3, [pc, #96]	; (8001160 <HAL_I2C_MspInit+0x88>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a17      	ldr	r2, [pc, #92]	; (8001160 <HAL_I2C_MspInit+0x88>)
 8001104:	f043 0302 	orr.w	r3, r3, #2
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <HAL_I2C_MspInit+0x88>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001116:	23c0      	movs	r3, #192	; 0xc0
 8001118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800111a:	2312      	movs	r3, #18
 800111c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001122:	2303      	movs	r3, #3
 8001124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001126:	2304      	movs	r3, #4
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4619      	mov	r1, r3
 8001130:	480c      	ldr	r0, [pc, #48]	; (8001164 <HAL_I2C_MspInit+0x8c>)
 8001132:	f001 fbd3 	bl	80028dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <HAL_I2C_MspInit+0x88>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	4a08      	ldr	r2, [pc, #32]	; (8001160 <HAL_I2C_MspInit+0x88>)
 8001140:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001144:	6413      	str	r3, [r2, #64]	; 0x40
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_I2C_MspInit+0x88>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001152:	bf00      	nop
 8001154:	3728      	adds	r7, #40	; 0x28
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40005400 	.word	0x40005400
 8001160:	40023800 	.word	0x40023800
 8001164:	40020400 	.word	0x40020400

08001168 <wait>:
#include "gpio.h"
#include "menuDisplay.h"

extern Data data;

void wait(uint32_t time){
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
uint32_t target = uwTick + time;
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <wait+0x2c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]
while(uwTick < target);
 800117a:	bf00      	nop
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <wait+0x2c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	429a      	cmp	r2, r3
 8001184:	d8fa      	bhi.n	800117c <wait+0x14>
};
 8001186:	bf00      	nop
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	20000798 	.word	0x20000798

08001198 <toggleFans>:


void toggleFans(bool state){
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(FAN_OUT_PORT, FAN_OUT_PIN, state);
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	461a      	mov	r2, r3
 80011a6:	2120      	movs	r1, #32
 80011a8:	4806      	ldr	r0, [pc, #24]	; (80011c4 <toggleFans+0x2c>)
 80011aa:	f001 fe17 	bl	8002ddc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FAN_IN_PORT, FAN_IN_PIN, state);
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	461a      	mov	r2, r3
 80011b2:	2110      	movs	r1, #16
 80011b4:	4803      	ldr	r0, [pc, #12]	; (80011c4 <toggleFans+0x2c>)
 80011b6:	f001 fe11 	bl	8002ddc <HAL_GPIO_WritePin>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40020400 	.word	0x40020400

080011c8 <clampedIncrement>:


void clampedIncrement(int* modifiedValue, int addedValue, int max, int min){
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
 80011d4:	603b      	str	r3, [r7, #0]
	*modifiedValue = *modifiedValue + addedValue;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	441a      	add	r2, r3
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	601a      	str	r2, [r3, #0]
	*modifiedValue = *modifiedValue > max? max: *modifiedValue;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	bfa8      	it	ge
 80011ec:	461a      	movge	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	601a      	str	r2, [r3, #0]
	*modifiedValue = *modifiedValue < min? min: *modifiedValue;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	bfb8      	it	lt
 80011fc:	461a      	movlt	r2, r3
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	601a      	str	r2, [r3, #0]
}
 8001202:	bf00      	nop
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <clampedAssign>:

void clampedAssign(int* modifiedValue, int newValue, int max, int min){
 800120e:	b480      	push	{r7}
 8001210:	b085      	sub	sp, #20
 8001212:	af00      	add	r7, sp, #0
 8001214:	60f8      	str	r0, [r7, #12]
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	603b      	str	r3, [r7, #0]
	*modifiedValue = newValue;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	601a      	str	r2, [r3, #0]
	*modifiedValue = *modifiedValue > max? max: *modifiedValue;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	429a      	cmp	r2, r3
 800122a:	bfa8      	it	ge
 800122c:	461a      	movge	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	601a      	str	r2, [r3, #0]
	*modifiedValue = *modifiedValue < min? min: *modifiedValue;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	429a      	cmp	r2, r3
 800123a:	bfb8      	it	lt
 800123c:	461a      	movlt	r2, r3
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	601a      	str	r2, [r3, #0]
}
 8001242:	bf00      	nop
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <toggleMode>:

void toggleMode(){
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
	switch(data.mode){
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <toggleMode+0x34>)
 8001256:	7f1b      	ldrb	r3, [r3, #28]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d002      	beq.n	8001262 <toggleMode+0x12>
 800125c:	2b02      	cmp	r3, #2
 800125e:	d004      	beq.n	800126a <toggleMode+0x1a>
					data.integral = 0;
					data.mode = TEMPERATURE_TARGET;
					break;
				case POWER_OFF:
				default:
					break;
 8001260:	e00b      	b.n	800127a <toggleMode+0x2a>
					data.mode = POWER_TARGET;
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <toggleMode+0x34>)
 8001264:	2202      	movs	r2, #2
 8001266:	771a      	strb	r2, [r3, #28]
					break;
 8001268:	e007      	b.n	800127a <toggleMode+0x2a>
					data.integral = 0;
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <toggleMode+0x34>)
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
					data.mode = TEMPERATURE_TARGET;
 8001272:	4b04      	ldr	r3, [pc, #16]	; (8001284 <toggleMode+0x34>)
 8001274:	2201      	movs	r2, #1
 8001276:	771a      	strb	r2, [r3, #28]
					break;
 8001278:	bf00      	nop
			}
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	20000000 	.word	0x20000000

08001288 <togglePower>:

void togglePower(){
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
	switch(data.mode){
 800128c:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <togglePower+0x30>)
 800128e:	7f1b      	ldrb	r3, [r3, #28]
 8001290:	3b01      	subs	r3, #1
 8001292:	2b01      	cmp	r3, #1
 8001294:	d807      	bhi.n	80012a6 <togglePower+0x1e>
					case TEMPERATURE_TARGET:
					case POWER_TARGET:
						data.integral = 0;
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <togglePower+0x30>)
 8001298:	f04f 0200 	mov.w	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
						data.mode = POWER_OFF;
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <togglePower+0x30>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	771a      	strb	r2, [r3, #28]
						break;
 80012a4:	e003      	b.n	80012ae <togglePower+0x26>
					case POWER_OFF:
					default:
						data.mode = TEMPERATURE_TARGET;
 80012a6:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <togglePower+0x30>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	771a      	strb	r2, [r3, #28]
						break;
 80012ac:	bf00      	nop
				}
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	20000000 	.word	0x20000000

080012bc <handleButtons>:

void handleButtons(){
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	static uint32_t pressCooldown;
	if(pressCooldown < uwTick){
 80012c0:	4b15      	ldr	r3, [pc, #84]	; (8001318 <handleButtons+0x5c>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b15      	ldr	r3, [pc, #84]	; (800131c <handleButtons+0x60>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d222      	bcs.n	8001312 <handleButtons+0x56>
		pressCooldown = uwTick + 500;
 80012cc:	4b13      	ldr	r3, [pc, #76]	; (800131c <handleButtons+0x60>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80012d4:	4a10      	ldr	r2, [pc, #64]	; (8001318 <handleButtons+0x5c>)
 80012d6:	6013      	str	r3, [r2, #0]
		while(1){
			if(HAL_GPIO_ReadPin(BUTTON_POWER_PORT, BUTTON_POWER_PIN) == GPIO_PIN_RESET){
 80012d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012dc:	4810      	ldr	r0, [pc, #64]	; (8001320 <handleButtons+0x64>)
 80012de:	f001 fd65 	bl	8002dac <HAL_GPIO_ReadPin>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d102      	bne.n	80012ee <handleButtons+0x32>
				toggleMode();
 80012e8:	f7ff ffb2 	bl	8001250 <toggleMode>
				break;
 80012ec:	e011      	b.n	8001312 <handleButtons+0x56>
			}
			if(HAL_GPIO_ReadPin(BUTTON_ENCODER_PORT, BUTTON_ENCODER_PIN) == GPIO_PIN_RESET){
 80012ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f2:	480b      	ldr	r0, [pc, #44]	; (8001320 <handleButtons+0x64>)
 80012f4:	f001 fd5a 	bl	8002dac <HAL_GPIO_ReadPin>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <handleButtons+0x46>
				togglePower();
 80012fe:	f7ff ffc3 	bl	8001288 <togglePower>
			}
			if(pressCooldown >= uwTick){
 8001302:	4b05      	ldr	r3, [pc, #20]	; (8001318 <handleButtons+0x5c>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4b05      	ldr	r3, [pc, #20]	; (800131c <handleButtons+0x60>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	429a      	cmp	r2, r3
 800130c:	d200      	bcs.n	8001310 <handleButtons+0x54>
			if(HAL_GPIO_ReadPin(BUTTON_POWER_PORT, BUTTON_POWER_PIN) == GPIO_PIN_RESET){
 800130e:	e7e3      	b.n	80012d8 <handleButtons+0x1c>
				break;
 8001310:	bf00      	nop
			}
		}
	}
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000690 	.word	0x20000690
 800131c:	20000798 	.word	0x20000798
 8001320:	40020400 	.word	0x40020400

08001324 <changeTargetValues>:



void changeTargetValues(uint8_t dir){
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
	switch(data.mode){
 800132e:	4b13      	ldr	r3, [pc, #76]	; (800137c <changeTargetValues+0x58>)
 8001330:	7f1b      	ldrb	r3, [r3, #28]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d002      	beq.n	800133c <changeTargetValues+0x18>
 8001336:	2b02      	cmp	r3, #2
 8001338:	d00e      	beq.n	8001358 <changeTargetValues+0x34>
				case POWER_TARGET:
					clampedIncrement(&data.currentPow, dir?5:-5, POWER_MAX, POWER_MIN);
					break;
				case POWER_OFF:
				default:
					break;
 800133a:	e01a      	b.n	8001372 <changeTargetValues+0x4e>
					clampedIncrement(&data.targetTemp, dir?5:-5, TEMPERATURE_MAX, TEMPERATURE_MIN);
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <changeTargetValues+0x22>
 8001342:	2105      	movs	r1, #5
 8001344:	e001      	b.n	800134a <changeTargetValues+0x26>
 8001346:	f06f 0104 	mvn.w	r1, #4
 800134a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800134e:	22c8      	movs	r2, #200	; 0xc8
 8001350:	480b      	ldr	r0, [pc, #44]	; (8001380 <changeTargetValues+0x5c>)
 8001352:	f7ff ff39 	bl	80011c8 <clampedIncrement>
					break;
 8001356:	e00c      	b.n	8001372 <changeTargetValues+0x4e>
					clampedIncrement(&data.currentPow, dir?5:-5, POWER_MAX, POWER_MIN);
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <changeTargetValues+0x3e>
 800135e:	2105      	movs	r1, #5
 8001360:	e001      	b.n	8001366 <changeTargetValues+0x42>
 8001362:	f06f 0104 	mvn.w	r1, #4
 8001366:	2300      	movs	r3, #0
 8001368:	2264      	movs	r2, #100	; 0x64
 800136a:	4806      	ldr	r0, [pc, #24]	; (8001384 <changeTargetValues+0x60>)
 800136c:	f7ff ff2c 	bl	80011c8 <clampedIncrement>
					break;
 8001370:	bf00      	nop
			}
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000000 	.word	0x20000000
 8001380:	20000014 	.word	0x20000014
 8001384:	20000018 	.word	0x20000018

08001388 <handleEncoderTurn>:

void handleEncoderTurn(){
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
	static bool lastTurn;
	static bool sameDirTurnFlag;
	static bool a0; // previous A state
	static bool b0; // previous B state
	  bool a = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 800138e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001392:	4829      	ldr	r0, [pc, #164]	; (8001438 <handleEncoderTurn+0xb0>)
 8001394:	f001 fd0a 	bl	8002dac <HAL_GPIO_ReadPin>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	bf14      	ite	ne
 800139e:	2301      	movne	r3, #1
 80013a0:	2300      	moveq	r3, #0
 80013a2:	71fb      	strb	r3, [r7, #7]
	  bool b = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 80013a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013a8:	4824      	ldr	r0, [pc, #144]	; (800143c <handleEncoderTurn+0xb4>)
 80013aa:	f001 fcff 	bl	8002dac <HAL_GPIO_ReadPin>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	bf14      	ite	ne
 80013b4:	2301      	movne	r3, #1
 80013b6:	2300      	moveq	r3, #0
 80013b8:	71bb      	strb	r3, [r7, #6]
	  if (a != a0) {              // A changed
 80013ba:	4b21      	ldr	r3, [pc, #132]	; (8001440 <handleEncoderTurn+0xb8>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	79fa      	ldrb	r2, [r7, #7]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d034      	beq.n	800142e <handleEncoderTurn+0xa6>
	    a0 = a;
 80013c4:	4a1e      	ldr	r2, [pc, #120]	; (8001440 <handleEncoderTurn+0xb8>)
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	7013      	strb	r3, [r2, #0]
	    if (b != b0) {
 80013ca:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <handleEncoderTurn+0xbc>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	79ba      	ldrb	r2, [r7, #6]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d02c      	beq.n	800142e <handleEncoderTurn+0xa6>
	      b0 = b;
 80013d4:	4a1b      	ldr	r2, [pc, #108]	; (8001444 <handleEncoderTurn+0xbc>)
 80013d6:	79bb      	ldrb	r3, [r7, #6]
 80013d8:	7013      	strb	r3, [r2, #0]
	      if((lastTurn != (a==b) )|| (sameDirTurnFlag == 1)){
 80013da:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <handleEncoderTurn+0xc0>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	4619      	mov	r1, r3
 80013e0:	79fa      	ldrb	r2, [r7, #7]
 80013e2:	79bb      	ldrb	r3, [r7, #6]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	bf0c      	ite	eq
 80013e8:	2301      	moveq	r3, #1
 80013ea:	2300      	movne	r3, #0
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	4299      	cmp	r1, r3
 80013f0:	d103      	bne.n	80013fa <handleEncoderTurn+0x72>
 80013f2:	4b16      	ldr	r3, [pc, #88]	; (800144c <handleEncoderTurn+0xc4>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d016      	beq.n	8001428 <handleEncoderTurn+0xa0>
	    	  sameDirTurnFlag = 0;
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <handleEncoderTurn+0xc4>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]
	    	  lastTurn = a==b;
 8001400:	79fa      	ldrb	r2, [r7, #7]
 8001402:	79bb      	ldrb	r3, [r7, #6]
 8001404:	429a      	cmp	r2, r3
 8001406:	bf0c      	ite	eq
 8001408:	2301      	moveq	r3, #1
 800140a:	2300      	movne	r3, #0
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <handleEncoderTurn+0xc0>)
 8001410:	701a      	strb	r2, [r3, #0]
	    	  changeTargetValues(a==b);
 8001412:	79fa      	ldrb	r2, [r7, #7]
 8001414:	79bb      	ldrb	r3, [r7, #6]
 8001416:	429a      	cmp	r2, r3
 8001418:	bf0c      	ite	eq
 800141a:	2301      	moveq	r3, #1
 800141c:	2300      	movne	r3, #0
 800141e:	b2db      	uxtb	r3, r3
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff7f 	bl	8001324 <changeTargetValues>
	      }


	    }
	  }
}
 8001426:	e002      	b.n	800142e <handleEncoderTurn+0xa6>
	    	  sameDirTurnFlag = 1;
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <handleEncoderTurn+0xc4>)
 800142a:	2201      	movs	r2, #1
 800142c:	701a      	strb	r2, [r3, #0]
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40020000 	.word	0x40020000
 800143c:	40020400 	.word	0x40020400
 8001440:	20000694 	.word	0x20000694
 8001444:	20000695 	.word	0x20000695
 8001448:	20000696 	.word	0x20000696
 800144c:	20000697 	.word	0x20000697

08001450 <handleOutput>:


//Triggered by TIM3 timer.
void handleOutput(){
 8001450:	b5b0      	push	{r4, r5, r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
static float previous;
	switch(data.mode){
 8001456:	4b47      	ldr	r3, [pc, #284]	; (8001574 <handleOutput+0x124>)
 8001458:	7f1b      	ldrb	r3, [r3, #28]
 800145a:	2b02      	cmp	r3, #2
 800145c:	d007      	beq.n	800146e <handleOutput+0x1e>
 800145e:	2b02      	cmp	r3, #2
 8001460:	f300 8083 	bgt.w	800156a <handleOutput+0x11a>
 8001464:	2b00      	cmp	r3, #0
 8001466:	d078      	beq.n	800155a <handleOutput+0x10a>
 8001468:	2b01      	cmp	r3, #1
 800146a:	d00d      	beq.n	8001488 <handleOutput+0x38>
			toggleFans(0);
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
			break;
	}

}
 800146c:	e07d      	b.n	800156a <handleOutput+0x11a>
			toggleFans(1);
 800146e:	2001      	movs	r0, #1
 8001470:	f7ff fe92 	bl	8001198 <toggleFans>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 65535/100*data.currentPow);
 8001474:	4b3f      	ldr	r3, [pc, #252]	; (8001574 <handleOutput+0x124>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	f240 228f 	movw	r2, #655	; 0x28f
 800147c:	fb03 f202 	mul.w	r2, r3, r2
 8001480:	4b3d      	ldr	r3, [pc, #244]	; (8001578 <handleOutput+0x128>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8001486:	e070      	b.n	800156a <handleOutput+0x11a>
			toggleFans(1);
 8001488:	2001      	movs	r0, #1
 800148a:	f7ff fe85 	bl	8001198 <toggleFans>
			e = data.measuredTemp - data.targetTemp/10.0  ;
 800148e:	4b39      	ldr	r3, [pc, #228]	; (8001574 <handleOutput+0x124>)
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff f860 	bl	8000558 <__aeabi_f2d>
 8001498:	4604      	mov	r4, r0
 800149a:	460d      	mov	r5, r1
 800149c:	4b35      	ldr	r3, [pc, #212]	; (8001574 <handleOutput+0x124>)
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff f847 	bl	8000534 <__aeabi_i2d>
 80014a6:	f04f 0200 	mov.w	r2, #0
 80014aa:	4b34      	ldr	r3, [pc, #208]	; (800157c <handleOutput+0x12c>)
 80014ac:	f7ff f9d6 	bl	800085c <__aeabi_ddiv>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4620      	mov	r0, r4
 80014b6:	4629      	mov	r1, r5
 80014b8:	f7fe feee 	bl	8000298 <__aeabi_dsub>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4610      	mov	r0, r2
 80014c2:	4619      	mov	r1, r3
 80014c4:	f7ff fb78 	bl	8000bb8 <__aeabi_d2f>
 80014c8:	4603      	mov	r3, r0
 80014ca:	60fb      	str	r3, [r7, #12]
			data.integral += e;
 80014cc:	4b29      	ldr	r3, [pc, #164]	; (8001574 <handleOutput+0x124>)
 80014ce:	ed93 7a03 	vldr	s14, [r3, #12]
 80014d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80014d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014da:	4b26      	ldr	r3, [pc, #152]	; (8001574 <handleOutput+0x124>)
 80014dc:	edc3 7a03 	vstr	s15, [r3, #12]
			float derivative = e - previous;
 80014e0:	4b27      	ldr	r3, [pc, #156]	; (8001580 <handleOutput+0x130>)
 80014e2:	edd3 7a00 	vldr	s15, [r3]
 80014e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80014ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ee:	edc7 7a02 	vstr	s15, [r7, #8]
			previous = e;
 80014f2:	4a23      	ldr	r2, [pc, #140]	; (8001580 <handleOutput+0x130>)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6013      	str	r3, [r2, #0]
			float u = (data.Kp * e) + (data.Ki * data.integral) + (data.Kd *derivative);
 80014f8:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <handleOutput+0x124>)
 80014fa:	ed93 7a00 	vldr	s14, [r3]
 80014fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001502:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001506:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <handleOutput+0x124>)
 8001508:	edd3 6a01 	vldr	s13, [r3, #4]
 800150c:	4b19      	ldr	r3, [pc, #100]	; (8001574 <handleOutput+0x124>)
 800150e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001512:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001516:	ee37 7a27 	vadd.f32	s14, s14, s15
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <handleOutput+0x124>)
 800151c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001520:	edd7 7a02 	vldr	s15, [r7, #8]
 8001524:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800152c:	edc7 7a01 	vstr	s15, [r7, #4]
			clampedAssign(&data.currentPow, u, POWER_MAX, POWER_MIN);
 8001530:	edd7 7a01 	vldr	s15, [r7, #4]
 8001534:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001538:	2300      	movs	r3, #0
 800153a:	2264      	movs	r2, #100	; 0x64
 800153c:	ee17 1a90 	vmov	r1, s15
 8001540:	4810      	ldr	r0, [pc, #64]	; (8001584 <handleOutput+0x134>)
 8001542:	f7ff fe64 	bl	800120e <clampedAssign>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 65535/100*data.currentPow);
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <handleOutput+0x124>)
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	f240 228f 	movw	r2, #655	; 0x28f
 800154e:	fb03 f202 	mul.w	r2, r3, r2
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <handleOutput+0x128>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8001558:	e007      	b.n	800156a <handleOutput+0x11a>
			toggleFans(0);
 800155a:	2000      	movs	r0, #0
 800155c:	f7ff fe1c 	bl	8001198 <toggleFans>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <handleOutput+0x128>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2200      	movs	r2, #0
 8001566:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8001568:	bf00      	nop
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bdb0      	pop	{r4, r5, r7, pc}
 8001572:	bf00      	nop
 8001574:	20000000 	.word	0x20000000
 8001578:	2000070c 	.word	0x2000070c
 800157c:	40240000 	.word	0x40240000
 8001580:	20000698 	.word	0x20000698
 8001584:	20000018 	.word	0x20000018

08001588 <HAL_GPIO_EXTI_Callback>:


//Encoder and button callbacks
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	80fb      	strh	r3, [r7, #6]

if(GPIO_Pin == GPIO_PIN_8) // Encoder
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001598:	d101      	bne.n	800159e <HAL_GPIO_EXTI_Callback+0x16>
	handleEncoderTurn();
 800159a:	f7ff fef5 	bl	8001388 <handleEncoderTurn>
if(GPIO_Pin == GPIO_PIN_9)
 800159e:	88fb      	ldrh	r3, [r7, #6]
 80015a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015a4:	d101      	bne.n	80015aa <HAL_GPIO_EXTI_Callback+0x22>
	handleButtons();
 80015a6:	f7ff fe89 	bl	80012bc <handleButtons>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <init>:
};


static uint8_t

init(void* arg) {
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b084      	sub	sp, #16
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]

    UART_HandleTypeDef* huart = arg;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	60fb      	str	r3, [r7, #12]


    LWOW_ASSERT0("arg != NULL", arg != NULL);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <init+0x16>
 80015c4:	2300      	movs	r3, #0
 80015c6:	e00b      	b.n	80015e0 <init+0x2e>


    /* Initialize UART */

    HAL_UART_DeInit(huart);
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f003 fd08 	bl	8004fde <HAL_UART_DeInit>

    return HAL_UART_Init(huart) == HAL_OK;
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f003 fcb8 	bl	8004f44 <HAL_UART_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	bf0c      	ite	eq
 80015da:	2301      	moveq	r3, #1
 80015dc:	2300      	movne	r3, #0
 80015de:	b2db      	uxtb	r3, r3

}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <deinit>:


static uint8_t

deinit(void* arg) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]

    UART_HandleTypeDef* huart = arg;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	60fb      	str	r3, [r7, #12]


    LWOW_ASSERT0("arg != NULL", arg != NULL);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <deinit+0x16>
 80015fa:	2300      	movs	r3, #0
 80015fc:	e003      	b.n	8001606 <deinit+0x1e>


    return HAL_UART_DeInit(huart);
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f003 fced 	bl	8004fde <HAL_UART_DeInit>
 8001604:	4603      	mov	r3, r0

}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <set_baudrate>:


static uint8_t

set_baudrate(uint32_t baud, void* arg) {
 800160e:	b580      	push	{r7, lr}
 8001610:	b084      	sub	sp, #16
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	6039      	str	r1, [r7, #0]

    UART_HandleTypeDef* huart = arg;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	60fb      	str	r3, [r7, #12]


    LWOW_ASSERT0("arg != NULL", arg != NULL);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <set_baudrate+0x18>
 8001622:	2300      	movs	r3, #0
 8001624:	e006      	b.n	8001634 <set_baudrate+0x26>


    huart->Init.BaudRate = baud;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	605a      	str	r2, [r3, #4]

    return init(huart);
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	f7ff ffc0 	bl	80015b2 <init>
 8001632:	4603      	mov	r3, r0

}
 8001634:	4618      	mov	r0, r3
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <transmit_receive>:


static uint8_t

transmit_receive(const uint8_t* tx, uint8_t* rx, size_t len, void* arg) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
 8001648:	603b      	str	r3, [r7, #0]

    UART_HandleTypeDef* huart = arg;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	617b      	str	r3, [r7, #20]

    uint32_t start;


    LWOW_ASSERT0("arg != NULL", arg != NULL);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <transmit_receive+0x1c>
 8001654:	2300      	movs	r3, #0
 8001656:	e021      	b.n	800169c <transmit_receive+0x60>


    /* Get current HAL tick */

    start = HAL_GetTick();
 8001658:	f000 ff3a 	bl	80024d0 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]


    /* Start RX in interrupt mode */

    HAL_UART_Receive_IT(huart, rx, len);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	b29b      	uxth	r3, r3
 8001662:	461a      	mov	r2, r3
 8001664:	68b9      	ldr	r1, [r7, #8]
 8001666:	6978      	ldr	r0, [r7, #20]
 8001668:	f003 fd7a 	bl	8005160 <HAL_UART_Receive_IT>


    /* Process TX in polling mode */

    HAL_UART_Transmit(huart, (void*)tx, len, 100);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	b29a      	uxth	r2, r3
 8001670:	2364      	movs	r3, #100	; 0x64
 8001672:	68f9      	ldr	r1, [r7, #12]
 8001674:	6978      	ldr	r0, [r7, #20]
 8001676:	f003 fce1 	bl	800503c <HAL_UART_Transmit>


    /* Wait RX to finish */

    while (huart->RxState != HAL_UART_STATE_READY) {
 800167a:	e008      	b.n	800168e <transmit_receive+0x52>

        if (HAL_GetTick() - start > 100) {
 800167c:	f000 ff28 	bl	80024d0 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b64      	cmp	r3, #100	; 0x64
 8001688:	d901      	bls.n	800168e <transmit_receive+0x52>

            return 0;
 800168a:	2300      	movs	r3, #0
 800168c:	e006      	b.n	800169c <transmit_receive+0x60>
    while (huart->RxState != HAL_UART_STATE_READY) {
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b20      	cmp	r3, #32
 8001698:	d1f0      	bne.n	800167c <transmit_receive+0x40>
        }

    }


    return 1;
 800169a:	2301      	movs	r3, #1

}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <main>:
void SystemClock_Config(void);



int main(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0

  HAL_Init();
 80016a8:	f000 feac 	bl	8002404 <HAL_Init>
  SystemClock_Config();
 80016ac:	f000 f852 	bl	8001754 <SystemClock_Config>

  MX_GPIO_Init();
 80016b0:	f7ff fc54 	bl	8000f5c <MX_GPIO_Init>
  MX_I2C1_Init();
 80016b4:	f7ff fce2 	bl	800107c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80016b8:	f000 fde0 	bl	800227c <MX_USART2_UART_Init>

  //Init display
  menuDisplay_Init();
 80016bc:	f000 f8b0 	bl	8001820 <menuDisplay_Init>
  data.statusMessage = "LWOW scan";
 80016c0:	4b1a      	ldr	r3, [pc, #104]	; (800172c <main+0x88>)
 80016c2:	4a1b      	ldr	r2, [pc, #108]	; (8001730 <main+0x8c>)
 80016c4:	621a      	str	r2, [r3, #32]
  menuDisplay_Update(0);
 80016c6:	2000      	movs	r0, #0
 80016c8:	f000 f8ee 	bl	80018a8 <menuDisplay_Update>

  //Init LWOW
  lwow_init(&ow, &lwow_ll_drv_stm32_hal, &huart2);
 80016cc:	4a19      	ldr	r2, [pc, #100]	; (8001734 <main+0x90>)
 80016ce:	491a      	ldr	r1, [pc, #104]	; (8001738 <main+0x94>)
 80016d0:	481a      	ldr	r0, [pc, #104]	; (800173c <main+0x98>)
 80016d2:	f004 ffc7 	bl	8006664 <lwow_init>

  //Thermometer must be found to ensure safe operation.
  while(!scan_onewire_devices(&ow, rom_ids, LWOW_ARRAYSIZE(rom_ids), &rom_found) == lwowOK)
 80016d6:	e002      	b.n	80016de <main+0x3a>
	  wait(100);
 80016d8:	2064      	movs	r0, #100	; 0x64
 80016da:	f7ff fd45 	bl	8001168 <wait>
  while(!scan_onewire_devices(&ow, rom_ids, LWOW_ARRAYSIZE(rom_ids), &rom_found) == lwowOK)
 80016de:	4b18      	ldr	r3, [pc, #96]	; (8001740 <main+0x9c>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	4918      	ldr	r1, [pc, #96]	; (8001744 <main+0xa0>)
 80016e4:	4815      	ldr	r0, [pc, #84]	; (800173c <main+0x98>)
 80016e6:	f000 fab9 	bl	8001c5c <scan_onewire_devices>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f3      	bne.n	80016d8 <main+0x34>

  //Configure found DS18B20 thermometer
  lwow_ds18x20_start(&ow, rom_ids);
 80016f0:	4914      	ldr	r1, [pc, #80]	; (8001744 <main+0xa0>)
 80016f2:	4812      	ldr	r0, [pc, #72]	; (800173c <main+0x98>)
 80016f4:	f004 fcff 	bl	80060f6 <lwow_ds18x20_start>
  lwow_ds18x20_set_resolution(&ow, rom_ids, 12);
 80016f8:	220c      	movs	r2, #12
 80016fa:	4912      	ldr	r1, [pc, #72]	; (8001744 <main+0xa0>)
 80016fc:	480f      	ldr	r0, [pc, #60]	; (800173c <main+0x98>)
 80016fe:	f004 ff11 	bl	8006524 <lwow_ds18x20_set_resolution>

  //Start Peltier PWM timer.
  MX_TIM4_Init();
 8001702:	f000 fcc5 	bl	8002090 <MX_TIM4_Init>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001706:	210c      	movs	r1, #12
 8001708:	480f      	ldr	r0, [pc, #60]	; (8001748 <main+0xa4>)
 800170a:	f002 fd59 	bl	80041c0 <HAL_TIM_PWM_Start>

  //Start display and logic timer.
  MX_TIM3_Init();
 800170e:	f000 fc71 	bl	8001ff4 <MX_TIM3_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 8001712:	480e      	ldr	r0, [pc, #56]	; (800174c <main+0xa8>)
 8001714:	f002 fc98 	bl	8004048 <HAL_TIM_Base_Start_IT>

  //Start cooling!
	data.statusMessage = "";
 8001718:	4b04      	ldr	r3, [pc, #16]	; (800172c <main+0x88>)
 800171a:	4a0d      	ldr	r2, [pc, #52]	; (8001750 <main+0xac>)
 800171c:	621a      	str	r2, [r3, #32]
	data.mode = TEMPERATURE_TARGET;
 800171e:	4b03      	ldr	r3, [pc, #12]	; (800172c <main+0x88>)
 8001720:	2201      	movs	r2, #1
 8001722:	771a      	strb	r2, [r3, #28]
	toggleFans(1);
 8001724:	2001      	movs	r0, #1
 8001726:	f7ff fd37 	bl	8001198 <toggleFans>

  while (1);
 800172a:	e7fe      	b.n	800172a <main+0x86>
 800172c:	20000000 	.word	0x20000000
 8001730:	0800a384 	.word	0x0800a384
 8001734:	20000754 	.word	0x20000754
 8001738:	0800a408 	.word	0x0800a408
 800173c:	2000069c 	.word	0x2000069c
 8001740:	200006b8 	.word	0x200006b8
 8001744:	200006b0 	.word	0x200006b0
 8001748:	2000070c 	.word	0x2000070c
 800174c:	200006c4 	.word	0x200006c4
 8001750:	0800a380 	.word	0x0800a380

08001754 <SystemClock_Config>:
}



void SystemClock_Config(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b094      	sub	sp, #80	; 0x50
 8001758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800175a:	f107 0320 	add.w	r3, r7, #32
 800175e:	2230      	movs	r2, #48	; 0x30
 8001760:	2100      	movs	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f005 fe1c 	bl	80073a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001778:	2300      	movs	r3, #0
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	4b23      	ldr	r3, [pc, #140]	; (800180c <SystemClock_Config+0xb8>)
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	4a22      	ldr	r2, [pc, #136]	; (800180c <SystemClock_Config+0xb8>)
 8001782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001786:	6413      	str	r3, [r2, #64]	; 0x40
 8001788:	4b20      	ldr	r3, [pc, #128]	; (800180c <SystemClock_Config+0xb8>)
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001794:	2300      	movs	r3, #0
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <SystemClock_Config+0xbc>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017a0:	4a1b      	ldr	r2, [pc, #108]	; (8001810 <SystemClock_Config+0xbc>)
 80017a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	4b19      	ldr	r3, [pc, #100]	; (8001810 <SystemClock_Config+0xbc>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017b0:	607b      	str	r3, [r7, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017b4:	2302      	movs	r3, #2
 80017b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017b8:	2301      	movs	r3, #1
 80017ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017bc:	2310      	movs	r3, #16
 80017be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c4:	f107 0320 	add.w	r3, r7, #32
 80017c8:	4618      	mov	r0, r3
 80017ca:	f001 ff95 	bl	80036f8 <HAL_RCC_OscConfig>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80017d4:	f000 f81e 	bl	8001814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d8:	230f      	movs	r3, #15
 80017da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017dc:	2300      	movs	r3, #0
 80017de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f002 f9f8 	bl	8003be8 <HAL_RCC_ClockConfig>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80017fe:	f000 f809 	bl	8001814 <Error_Handler>
  }
}
 8001802:	bf00      	nop
 8001804:	3750      	adds	r7, #80	; 0x50
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800
 8001810:	40007000 	.word	0x40007000

08001814 <Error_Handler>:



void Error_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001818:	b672      	cpsid	i
}
 800181a:	bf00      	nop
  __disable_irq();
  while (1)
 800181c:	e7fe      	b.n	800181c <Error_Handler+0x8>
	...

08001820 <menuDisplay_Init>:
#include "menuDisplay.h"

extern Data data;

//Init display and remove trash.
void menuDisplay_Init(){
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
	ssd1306_Init();
 8001824:	f005 fa8a 	bl	8006d3c <ssd1306_Init>
	ssd1306_FillBuffer(menubitmap_data, 1024);
 8001828:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800182c:	4803      	ldr	r0, [pc, #12]	; (800183c <menuDisplay_Init+0x1c>)
 800182e:	f005 fa6b 	bl	8006d08 <ssd1306_FillBuffer>
	ssd1306_UpdateScreen();
 8001832:	f005 fb25 	bl	8006e80 <ssd1306_UpdateScreen>
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000024 	.word	0x20000024

08001840 <animationHelper>:

//Helper method for that sweet ">>>>" scrolling animation
int animationHelper(int i, int ac, int offset){
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
	if((i-ac+offset)%5 != 0 && (i-ac+offset)%5 != 1)
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	1ad2      	subs	r2, r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	18d1      	adds	r1, r2, r3
 8001856:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <animationHelper+0x64>)
 8001858:	fb83 2301 	smull	r2, r3, r3, r1
 800185c:	105a      	asrs	r2, r3, #1
 800185e:	17cb      	asrs	r3, r1, #31
 8001860:	1ad2      	subs	r2, r2, r3
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	1aca      	subs	r2, r1, r3
 800186a:	2a00      	cmp	r2, #0
 800186c:	d012      	beq.n	8001894 <animationHelper+0x54>
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	1ad2      	subs	r2, r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	18d1      	adds	r1, r2, r3
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <animationHelper+0x64>)
 800187a:	fb83 2301 	smull	r2, r3, r3, r1
 800187e:	105a      	asrs	r2, r3, #1
 8001880:	17cb      	asrs	r3, r1, #31
 8001882:	1ad2      	subs	r2, r2, r3
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	1aca      	subs	r2, r1, r3
 800188c:	2a01      	cmp	r2, #1
 800188e:	d001      	beq.n	8001894 <animationHelper+0x54>
		return 1;
 8001890:	2301      	movs	r3, #1
 8001892:	e000      	b.n	8001896 <animationHelper+0x56>
	return 0;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	66666667 	.word	0x66666667

080018a8 <menuDisplay_Update>:

void menuDisplay_Update(bool animate){
 80018a8:	b5b0      	push	{r4, r5, r7, lr}
 80018aa:	b08a      	sub	sp, #40	; 0x28
 80018ac:	af02      	add	r7, sp, #8
 80018ae:	4603      	mov	r3, r0
 80018b0:	71fb      	strb	r3, [r7, #7]

	if(data.mode == POWER_OFF){
 80018b2:	4b82      	ldr	r3, [pc, #520]	; (8001abc <menuDisplay_Update+0x214>)
 80018b4:	7f1b      	ldrb	r3, [r3, #28]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d103      	bne.n	80018c2 <menuDisplay_Update+0x1a>
		ssd1306_SetDisplayOn(0);
 80018ba:	2000      	movs	r0, #0
 80018bc:	f005 fd00 	bl	80072c0 <ssd1306_SetDisplayOn>
 80018c0:	e1b8      	b.n	8001c34 <menuDisplay_Update+0x38c>
		return;
	}

	ssd1306_SetDisplayOn(1);
 80018c2:	2001      	movs	r0, #1
 80018c4:	f005 fcfc 	bl	80072c0 <ssd1306_SetDisplayOn>

	static uint8_t animationCounter;
	animationCounter+=animate;
 80018c8:	79fa      	ldrb	r2, [r7, #7]
 80018ca:	4b7d      	ldr	r3, [pc, #500]	; (8001ac0 <menuDisplay_Update+0x218>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4b7b      	ldr	r3, [pc, #492]	; (8001ac0 <menuDisplay_Update+0x218>)
 80018d4:	701a      	strb	r2, [r3, #0]
	animationCounter%=5;
 80018d6:	4b7a      	ldr	r3, [pc, #488]	; (8001ac0 <menuDisplay_Update+0x218>)
 80018d8:	781a      	ldrb	r2, [r3, #0]
 80018da:	4b7a      	ldr	r3, [pc, #488]	; (8001ac4 <menuDisplay_Update+0x21c>)
 80018dc:	fba3 1302 	umull	r1, r3, r3, r2
 80018e0:	0899      	lsrs	r1, r3, #2
 80018e2:	460b      	mov	r3, r1
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	440b      	add	r3, r1
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	4b74      	ldr	r3, [pc, #464]	; (8001ac0 <menuDisplay_Update+0x218>)
 80018ee:	701a      	strb	r2, [r3, #0]

	char tmpBuffer[8];

	//UI layout
	ssd1306_FillBuffer(menubitmap_data, 1024);
 80018f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018f4:	4874      	ldr	r0, [pc, #464]	; (8001ac8 <menuDisplay_Update+0x220>)
 80018f6:	f005 fa07 	bl	8006d08 <ssd1306_FillBuffer>

	int decimal = (int)((fabs(data.measuredTemp) - floor(fabs(data.measuredTemp)))*10);
 80018fa:	4b70      	ldr	r3, [pc, #448]	; (8001abc <menuDisplay_Update+0x214>)
 80018fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001900:	eef0 7ae7 	vabs.f32	s15, s15
 8001904:	ee17 0a90 	vmov	r0, s15
 8001908:	f7fe fe26 	bl	8000558 <__aeabi_f2d>
 800190c:	4604      	mov	r4, r0
 800190e:	460d      	mov	r5, r1
 8001910:	4b6a      	ldr	r3, [pc, #424]	; (8001abc <menuDisplay_Update+0x214>)
 8001912:	edd3 7a04 	vldr	s15, [r3, #16]
 8001916:	eef0 7ae7 	vabs.f32	s15, s15
 800191a:	ee17 0a90 	vmov	r0, s15
 800191e:	f7fe fe1b 	bl	8000558 <__aeabi_f2d>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	ec43 2b10 	vmov	d0, r2, r3
 800192a:	f008 fc9d 	bl	800a268 <floor>
 800192e:	ec53 2b10 	vmov	r2, r3, d0
 8001932:	4620      	mov	r0, r4
 8001934:	4629      	mov	r1, r5
 8001936:	f7fe fcaf 	bl	8000298 <__aeabi_dsub>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	4610      	mov	r0, r2
 8001940:	4619      	mov	r1, r3
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	4b61      	ldr	r3, [pc, #388]	; (8001acc <menuDisplay_Update+0x224>)
 8001948:	f7fe fe5e 	bl	8000608 <__aeabi_dmul>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4610      	mov	r0, r2
 8001952:	4619      	mov	r1, r3
 8001954:	f7ff f908 	bl	8000b68 <__aeabi_d2iz>
 8001958:	4603      	mov	r3, r0
 800195a:	61bb      	str	r3, [r7, #24]

	int barSize = floor((float)data.currentPow / 100 * 126);
 800195c:	4b57      	ldr	r3, [pc, #348]	; (8001abc <menuDisplay_Update+0x214>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	ee07 3a90 	vmov	s15, r3
 8001964:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001968:	eddf 6a59 	vldr	s13, [pc, #356]	; 8001ad0 <menuDisplay_Update+0x228>
 800196c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001970:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001ad4 <menuDisplay_Update+0x22c>
 8001974:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001978:	ee17 0a90 	vmov	r0, s15
 800197c:	f7fe fdec 	bl	8000558 <__aeabi_f2d>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	ec43 2b10 	vmov	d0, r2, r3
 8001988:	f008 fc6e 	bl	800a268 <floor>
 800198c:	ec53 2b10 	vmov	r2, r3, d0
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	f7ff f8e8 	bl	8000b68 <__aeabi_d2iz>
 8001998:	4603      	mov	r3, r0
 800199a:	617b      	str	r3, [r7, #20]


	//Current Temperature
	sprintf(tmpBuffer, "%2.0f",data.measuredTemp > 0? floor(data.measuredTemp):ceil(data.measuredTemp));
 800199c:	4b47      	ldr	r3, [pc, #284]	; (8001abc <menuDisplay_Update+0x214>)
 800199e:	edd3 7a04 	vldr	s15, [r3, #16]
 80019a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019aa:	dd0f      	ble.n	80019cc <menuDisplay_Update+0x124>
 80019ac:	4b43      	ldr	r3, [pc, #268]	; (8001abc <menuDisplay_Update+0x214>)
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe fdd1 	bl	8000558 <__aeabi_f2d>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	ec43 2b10 	vmov	d0, r2, r3
 80019be:	f008 fc53 	bl	800a268 <floor>
 80019c2:	eeb0 7a40 	vmov.f32	s14, s0
 80019c6:	eef0 7a60 	vmov.f32	s15, s1
 80019ca:	e00e      	b.n	80019ea <menuDisplay_Update+0x142>
 80019cc:	4b3b      	ldr	r3, [pc, #236]	; (8001abc <menuDisplay_Update+0x214>)
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7fe fdc1 	bl	8000558 <__aeabi_f2d>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	ec43 2b10 	vmov	d0, r2, r3
 80019de:	f008 fbbf 	bl	800a160 <ceil>
 80019e2:	eeb0 7a40 	vmov.f32	s14, s0
 80019e6:	eef0 7a60 	vmov.f32	s15, s1
 80019ea:	f107 000c 	add.w	r0, r7, #12
 80019ee:	ec53 2b17 	vmov	r2, r3, d7
 80019f2:	4939      	ldr	r1, [pc, #228]	; (8001ad8 <menuDisplay_Update+0x230>)
 80019f4:	f006 f95e 	bl	8007cb4 <siprintf>
	ssd1306_SetCursor(3,4);
 80019f8:	2104      	movs	r1, #4
 80019fa:	2003      	movs	r0, #3
 80019fc:	f005 fb92 	bl	8007124 <ssd1306_SetCursor>
	ssd1306_WriteString(tmpBuffer, Font_16x26,  1);
 8001a00:	4a36      	ldr	r2, [pc, #216]	; (8001adc <menuDisplay_Update+0x234>)
 8001a02:	f107 000c 	add.w	r0, r7, #12
 8001a06:	2301      	movs	r3, #1
 8001a08:	ca06      	ldmia	r2, {r1, r2}
 8001a0a:	f005 fb65 	bl	80070d8 <ssd1306_WriteString>

	sprintf(tmpBuffer, "%d",decimal);
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4932      	ldr	r1, [pc, #200]	; (8001ae0 <menuDisplay_Update+0x238>)
 8001a16:	4618      	mov	r0, r3
 8001a18:	f006 f94c 	bl	8007cb4 <siprintf>
	ssd1306_SetCursor(39,4);
 8001a1c:	2104      	movs	r1, #4
 8001a1e:	2027      	movs	r0, #39	; 0x27
 8001a20:	f005 fb80 	bl	8007124 <ssd1306_SetCursor>
	ssd1306_WriteString(tmpBuffer, Font_16x26,  1);
 8001a24:	4a2d      	ldr	r2, [pc, #180]	; (8001adc <menuDisplay_Update+0x234>)
 8001a26:	f107 000c 	add.w	r0, r7, #12
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	ca06      	ldmia	r2, {r1, r2}
 8001a2e:	f005 fb53 	bl	80070d8 <ssd1306_WriteString>
	ssd1306_SetCursor(59,4);
 8001a32:	2104      	movs	r1, #4
 8001a34:	203b      	movs	r0, #59	; 0x3b
 8001a36:	f005 fb75 	bl	8007124 <ssd1306_SetCursor>
	ssd1306_WriteString("C", Font_16x26,  1);
 8001a3a:	4a28      	ldr	r2, [pc, #160]	; (8001adc <menuDisplay_Update+0x234>)
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	ca06      	ldmia	r2, {r1, r2}
 8001a40:	4828      	ldr	r0, [pc, #160]	; (8001ae4 <menuDisplay_Update+0x23c>)
 8001a42:	f005 fb49 	bl	80070d8 <ssd1306_WriteString>

	//Target Temperature
	sprintf(tmpBuffer, "%3d", data.targetTemp);
 8001a46:	4b1d      	ldr	r3, [pc, #116]	; (8001abc <menuDisplay_Update+0x214>)
 8001a48:	695a      	ldr	r2, [r3, #20]
 8001a4a:	f107 030c 	add.w	r3, r7, #12
 8001a4e:	4926      	ldr	r1, [pc, #152]	; (8001ae8 <menuDisplay_Update+0x240>)
 8001a50:	4618      	mov	r0, r3
 8001a52:	f006 f92f 	bl	8007cb4 <siprintf>
	ssd1306_SetCursor(78,15);
 8001a56:	210f      	movs	r1, #15
 8001a58:	204e      	movs	r0, #78	; 0x4e
 8001a5a:	f005 fb63 	bl	8007124 <ssd1306_SetCursor>
	ssd1306_WriteString(tmpBuffer, Font_11x18,  1);
 8001a5e:	4a23      	ldr	r2, [pc, #140]	; (8001aec <menuDisplay_Update+0x244>)
 8001a60:	f107 000c 	add.w	r0, r7, #12
 8001a64:	2301      	movs	r3, #1
 8001a66:	ca06      	ldmia	r2, {r1, r2}
 8001a68:	f005 fb36 	bl	80070d8 <ssd1306_WriteString>

	ssd1306_SetCursor(114,15);
 8001a6c:	210f      	movs	r1, #15
 8001a6e:	2072      	movs	r0, #114	; 0x72
 8001a70:	f005 fb58 	bl	8007124 <ssd1306_SetCursor>
	ssd1306_WriteString("C", Font_11x18,  1);
 8001a74:	4a1d      	ldr	r2, [pc, #116]	; (8001aec <menuDisplay_Update+0x244>)
 8001a76:	2301      	movs	r3, #1
 8001a78:	ca06      	ldmia	r2, {r1, r2}
 8001a7a:	481a      	ldr	r0, [pc, #104]	; (8001ae4 <menuDisplay_Update+0x23c>)
 8001a7c:	f005 fb2c 	bl	80070d8 <ssd1306_WriteString>

	ssd1306_DrawRectangle(99, 30, 100, 31, 1);
 8001a80:	2301      	movs	r3, #1
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	231f      	movs	r3, #31
 8001a86:	2264      	movs	r2, #100	; 0x64
 8001a88:	211e      	movs	r1, #30
 8001a8a:	2063      	movs	r0, #99	; 0x63
 8001a8c:	f005 fbce 	bl	800722c <ssd1306_DrawRectangle>

	//Current Power
	sprintf(tmpBuffer, "%3d%%", data.currentPow);
 8001a90:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <menuDisplay_Update+0x214>)
 8001a92:	699a      	ldr	r2, [r3, #24]
 8001a94:	f107 030c 	add.w	r3, r7, #12
 8001a98:	4915      	ldr	r1, [pc, #84]	; (8001af0 <menuDisplay_Update+0x248>)
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f006 f90a 	bl	8007cb4 <siprintf>
	ssd1306_SetCursor(87,46);
 8001aa0:	212e      	movs	r1, #46	; 0x2e
 8001aa2:	2057      	movs	r0, #87	; 0x57
 8001aa4:	f005 fb3e 	bl	8007124 <ssd1306_SetCursor>
	ssd1306_WriteString(tmpBuffer, Font_7x10,  1);
 8001aa8:	4a12      	ldr	r2, [pc, #72]	; (8001af4 <menuDisplay_Update+0x24c>)
 8001aaa:	f107 000c 	add.w	r0, r7, #12
 8001aae:	2301      	movs	r3, #1
 8001ab0:	ca06      	ldmia	r2, {r1, r2}
 8001ab2:	f005 fb11 	bl	80070d8 <ssd1306_WriteString>

	//Power bar
	for(int i = 2; i < barSize; i++){
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	61fb      	str	r3, [r7, #28]
 8001aba:	e070      	b.n	8001b9e <menuDisplay_Update+0x2f6>
 8001abc:	20000000 	.word	0x20000000
 8001ac0:	200006bc 	.word	0x200006bc
 8001ac4:	cccccccd 	.word	0xcccccccd
 8001ac8:	20000024 	.word	0x20000024
 8001acc:	40240000 	.word	0x40240000
 8001ad0:	42c80000 	.word	0x42c80000
 8001ad4:	42fc0000 	.word	0x42fc0000
 8001ad8:	0800a390 	.word	0x0800a390
 8001adc:	20000448 	.word	0x20000448
 8001ae0:	0800a398 	.word	0x0800a398
 8001ae4:	0800a39c 	.word	0x0800a39c
 8001ae8:	0800a3a0 	.word	0x0800a3a0
 8001aec:	20000440 	.word	0x20000440
 8001af0:	0800a3a4 	.word	0x0800a3a4
 8001af4:	20000438 	.word	0x20000438
		ssd1306_DrawPixel(i, 58, animationHelper(i,animationCounter,3));
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	b2dc      	uxtb	r4, r3
 8001afc:	4b4f      	ldr	r3, [pc, #316]	; (8001c3c <menuDisplay_Update+0x394>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2203      	movs	r2, #3
 8001b02:	4619      	mov	r1, r3
 8001b04:	69f8      	ldr	r0, [r7, #28]
 8001b06:	f7ff fe9b 	bl	8001840 <animationHelper>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	461a      	mov	r2, r3
 8001b10:	213a      	movs	r1, #58	; 0x3a
 8001b12:	4620      	mov	r0, r4
 8001b14:	f005 fa04 	bl	8006f20 <ssd1306_DrawPixel>
		ssd1306_DrawPixel(i, 59, animationHelper(i,animationCounter,2));
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	b2dc      	uxtb	r4, r3
 8001b1c:	4b47      	ldr	r3, [pc, #284]	; (8001c3c <menuDisplay_Update+0x394>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2202      	movs	r2, #2
 8001b22:	4619      	mov	r1, r3
 8001b24:	69f8      	ldr	r0, [r7, #28]
 8001b26:	f7ff fe8b 	bl	8001840 <animationHelper>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	461a      	mov	r2, r3
 8001b30:	213b      	movs	r1, #59	; 0x3b
 8001b32:	4620      	mov	r0, r4
 8001b34:	f005 f9f4 	bl	8006f20 <ssd1306_DrawPixel>
		ssd1306_DrawPixel(i, 60, animationHelper(i,animationCounter,1));
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	b2dc      	uxtb	r4, r3
 8001b3c:	4b3f      	ldr	r3, [pc, #252]	; (8001c3c <menuDisplay_Update+0x394>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2201      	movs	r2, #1
 8001b42:	4619      	mov	r1, r3
 8001b44:	69f8      	ldr	r0, [r7, #28]
 8001b46:	f7ff fe7b 	bl	8001840 <animationHelper>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	461a      	mov	r2, r3
 8001b50:	213c      	movs	r1, #60	; 0x3c
 8001b52:	4620      	mov	r0, r4
 8001b54:	f005 f9e4 	bl	8006f20 <ssd1306_DrawPixel>
		ssd1306_DrawPixel(i, 61, animationHelper(i,animationCounter,2));
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	b2dc      	uxtb	r4, r3
 8001b5c:	4b37      	ldr	r3, [pc, #220]	; (8001c3c <menuDisplay_Update+0x394>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2202      	movs	r2, #2
 8001b62:	4619      	mov	r1, r3
 8001b64:	69f8      	ldr	r0, [r7, #28]
 8001b66:	f7ff fe6b 	bl	8001840 <animationHelper>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	461a      	mov	r2, r3
 8001b70:	213d      	movs	r1, #61	; 0x3d
 8001b72:	4620      	mov	r0, r4
 8001b74:	f005 f9d4 	bl	8006f20 <ssd1306_DrawPixel>
		ssd1306_DrawPixel(i, 62, animationHelper(i,animationCounter,3));
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	b2dc      	uxtb	r4, r3
 8001b7c:	4b2f      	ldr	r3, [pc, #188]	; (8001c3c <menuDisplay_Update+0x394>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2203      	movs	r2, #3
 8001b82:	4619      	mov	r1, r3
 8001b84:	69f8      	ldr	r0, [r7, #28]
 8001b86:	f7ff fe5b 	bl	8001840 <animationHelper>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	461a      	mov	r2, r3
 8001b90:	213e      	movs	r1, #62	; 0x3e
 8001b92:	4620      	mov	r0, r4
 8001b94:	f005 f9c4 	bl	8006f20 <ssd1306_DrawPixel>
	for(int i = 2; i < barSize; i++){
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	61fb      	str	r3, [r7, #28]
 8001b9e:	69fa      	ldr	r2, [r7, #28]
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	dba8      	blt.n	8001af8 <menuDisplay_Update+0x250>
	}

	//Rest
	ssd1306_SetCursor(78,3);
 8001ba6:	2103      	movs	r1, #3
 8001ba8:	204e      	movs	r0, #78	; 0x4e
 8001baa:	f005 fabb 	bl	8007124 <ssd1306_SetCursor>
	ssd1306_WriteString("Target", Font_7x10,  data.mode != TEMPERATURE_TARGET);
 8001bae:	4b24      	ldr	r3, [pc, #144]	; (8001c40 <menuDisplay_Update+0x398>)
 8001bb0:	7f1b      	ldrb	r3, [r3, #28]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	bf14      	ite	ne
 8001bb6:	2301      	movne	r3, #1
 8001bb8:	2300      	moveq	r3, #0
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	4a21      	ldr	r2, [pc, #132]	; (8001c44 <menuDisplay_Update+0x39c>)
 8001bbe:	ca06      	ldmia	r2, {r1, r2}
 8001bc0:	4821      	ldr	r0, [pc, #132]	; (8001c48 <menuDisplay_Update+0x3a0>)
 8001bc2:	f005 fa89 	bl	80070d8 <ssd1306_WriteString>
	ssd1306_SetCursor(78,35);
 8001bc6:	2123      	movs	r1, #35	; 0x23
 8001bc8:	204e      	movs	r0, #78	; 0x4e
 8001bca:	f005 faab 	bl	8007124 <ssd1306_SetCursor>
	ssd1306_WriteString("Power", Font_7x10,   data.mode != POWER_TARGET);
 8001bce:	4b1c      	ldr	r3, [pc, #112]	; (8001c40 <menuDisplay_Update+0x398>)
 8001bd0:	7f1b      	ldrb	r3, [r3, #28]
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	bf14      	ite	ne
 8001bd6:	2301      	movne	r3, #1
 8001bd8:	2300      	moveq	r3, #0
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	4a19      	ldr	r2, [pc, #100]	; (8001c44 <menuDisplay_Update+0x39c>)
 8001bde:	ca06      	ldmia	r2, {r1, r2}
 8001be0:	481a      	ldr	r0, [pc, #104]	; (8001c4c <menuDisplay_Update+0x3a4>)
 8001be2:	f005 fa79 	bl	80070d8 <ssd1306_WriteString>

	if(strcmp(data.statusMessage, "") == 0){
 8001be6:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <menuDisplay_Update+0x398>)
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d114      	bne.n	8001c1a <menuDisplay_Update+0x372>
		ssd1306_SetCursor(15,34);
 8001bf0:	2122      	movs	r1, #34	; 0x22
 8001bf2:	200f      	movs	r0, #15
 8001bf4:	f005 fa96 	bl	8007124 <ssd1306_SetCursor>
		ssd1306_WriteString("MB 2022", Font_7x10,  1);
 8001bf8:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <menuDisplay_Update+0x39c>)
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	ca06      	ldmia	r2, {r1, r2}
 8001bfe:	4814      	ldr	r0, [pc, #80]	; (8001c50 <menuDisplay_Update+0x3a8>)
 8001c00:	f005 fa6a 	bl	80070d8 <ssd1306_WriteString>
		ssd1306_SetCursor(15,45);
 8001c04:	212d      	movs	r1, #45	; 0x2d
 8001c06:	200f      	movs	r0, #15
 8001c08:	f005 fa8c 	bl	8007124 <ssd1306_SetCursor>
		ssd1306_WriteString("SW AGH", Font_7x10,  1);
 8001c0c:	4a0d      	ldr	r2, [pc, #52]	; (8001c44 <menuDisplay_Update+0x39c>)
 8001c0e:	2301      	movs	r3, #1
 8001c10:	ca06      	ldmia	r2, {r1, r2}
 8001c12:	4810      	ldr	r0, [pc, #64]	; (8001c54 <menuDisplay_Update+0x3ac>)
 8001c14:	f005 fa60 	bl	80070d8 <ssd1306_WriteString>
 8001c18:	e00a      	b.n	8001c30 <menuDisplay_Update+0x388>
	}else{
		ssd1306_SetCursor(15,34);
 8001c1a:	2122      	movs	r1, #34	; 0x22
 8001c1c:	200f      	movs	r0, #15
 8001c1e:	f005 fa81 	bl	8007124 <ssd1306_SetCursor>
		ssd1306_WriteString(data.statusMessage, Font_6x8,  1);
 8001c22:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <menuDisplay_Update+0x398>)
 8001c24:	6a18      	ldr	r0, [r3, #32]
 8001c26:	4a0c      	ldr	r2, [pc, #48]	; (8001c58 <menuDisplay_Update+0x3b0>)
 8001c28:	2301      	movs	r3, #1
 8001c2a:	ca06      	ldmia	r2, {r1, r2}
 8001c2c:	f005 fa54 	bl	80070d8 <ssd1306_WriteString>
	}

	//Update Screen
	ssd1306_UpdateScreen();
 8001c30:	f005 f926 	bl	8006e80 <ssd1306_UpdateScreen>
}
 8001c34:	3720      	adds	r7, #32
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bdb0      	pop	{r4, r5, r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200006bc 	.word	0x200006bc
 8001c40:	20000000 	.word	0x20000000
 8001c44:	20000438 	.word	0x20000438
 8001c48:	0800a3ac 	.word	0x0800a3ac
 8001c4c:	0800a3b4 	.word	0x0800a3b4
 8001c50:	0800a3bc 	.word	0x0800a3bc
 8001c54:	0800a3c4 	.word	0x0800a3c4
 8001c58:	20000430 	.word	0x20000430

08001c5c <scan_onewire_devices>:
 * \param[in]       rom_ids: pointer to array of \ref lwow_rom_t structures
 * \param[in]       rtf: Number of roms to find
 * \param[out]      rf: Number of roms found after scan
 */
lwowr_t
scan_onewire_devices(lwow_t* ow, lwow_rom_t* rom_ids, size_t rtf, size_t* rf) {
 8001c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c5e:	b08f      	sub	sp, #60	; 0x3c
 8001c60:	af06      	add	r7, sp, #24
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
 8001c68:	603b      	str	r3, [r7, #0]
    lwowr_t res;
    size_t found;

    /* Search for devices and save it to array */
    res = lwow_search_devices(ow, rom_ids, rtf, &found);
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	68b9      	ldr	r1, [r7, #8]
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f004 ffe3 	bl	8006c3e <lwow_search_devices>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	76fb      	strb	r3, [r7, #27]

    /* Print all devices */
    for (size_t i = 0; i < found; ++i) {
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61fb      	str	r3, [r7, #28]
 8001c80:	e03c      	b.n	8001cfc <scan_onewire_devices+0xa0>
        printf("Device ROM addr: %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
            (unsigned)rom_ids[i].rom[0], (unsigned)rom_ids[i].rom[1], (unsigned)rom_ids[i].rom[2], (unsigned)rom_ids[i].rom[3],
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	4413      	add	r3, r2
 8001c8a:	781b      	ldrb	r3, [r3, #0]
        printf("Device ROM addr: %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001c8c:	461e      	mov	r6, r3
            (unsigned)rom_ids[i].rom[0], (unsigned)rom_ids[i].rom[1], (unsigned)rom_ids[i].rom[2], (unsigned)rom_ids[i].rom[3],
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	4413      	add	r3, r2
 8001c96:	785b      	ldrb	r3, [r3, #1]
        printf("Device ROM addr: %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001c98:	469c      	mov	ip, r3
            (unsigned)rom_ids[i].rom[0], (unsigned)rom_ids[i].rom[1], (unsigned)rom_ids[i].rom[2], (unsigned)rom_ids[i].rom[3],
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	789b      	ldrb	r3, [r3, #2]
        printf("Device ROM addr: %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001ca4:	469e      	mov	lr, r3
            (unsigned)rom_ids[i].rom[0], (unsigned)rom_ids[i].rom[1], (unsigned)rom_ids[i].rom[2], (unsigned)rom_ids[i].rom[3],
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	4413      	add	r3, r2
 8001cae:	78db      	ldrb	r3, [r3, #3]
        printf("Device ROM addr: %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001cb0:	4619      	mov	r1, r3
            (unsigned)rom_ids[i].rom[4], (unsigned)rom_ids[i].rom[5], (unsigned)rom_ids[i].rom[6], (unsigned)rom_ids[i].rom[7]
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	4413      	add	r3, r2
 8001cba:	791b      	ldrb	r3, [r3, #4]
        printf("Device ROM addr: %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001cbc:	4618      	mov	r0, r3
            (unsigned)rom_ids[i].rom[4], (unsigned)rom_ids[i].rom[5], (unsigned)rom_ids[i].rom[6], (unsigned)rom_ids[i].rom[7]
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	795b      	ldrb	r3, [r3, #5]
        printf("Device ROM addr: %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001cc8:	461c      	mov	r4, r3
            (unsigned)rom_ids[i].rom[4], (unsigned)rom_ids[i].rom[5], (unsigned)rom_ids[i].rom[6], (unsigned)rom_ids[i].rom[7]
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	799b      	ldrb	r3, [r3, #6]
        printf("Device ROM addr: %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001cd4:	461d      	mov	r5, r3
            (unsigned)rom_ids[i].rom[4], (unsigned)rom_ids[i].rom[5], (unsigned)rom_ids[i].rom[6], (unsigned)rom_ids[i].rom[7]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	4413      	add	r3, r2
 8001cde:	79db      	ldrb	r3, [r3, #7]
        printf("Device ROM addr: %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8001ce0:	9304      	str	r3, [sp, #16]
 8001ce2:	9503      	str	r5, [sp, #12]
 8001ce4:	9402      	str	r4, [sp, #8]
 8001ce6:	9001      	str	r0, [sp, #4]
 8001ce8:	9100      	str	r1, [sp, #0]
 8001cea:	4673      	mov	r3, lr
 8001cec:	4662      	mov	r2, ip
 8001cee:	4631      	mov	r1, r6
 8001cf0:	480a      	ldr	r0, [pc, #40]	; (8001d1c <scan_onewire_devices+0xc0>)
 8001cf2:	f005 ffc7 	bl	8007c84 <iprintf>
    for (size_t i = 0; i < found; ++i) {
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	61fb      	str	r3, [r7, #28]
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	69fa      	ldr	r2, [r7, #28]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d3be      	bcc.n	8001c82 <scan_onewire_devices+0x26>
        );
    }
    if (rf != NULL) {
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d002      	beq.n	8001d10 <scan_onewire_devices+0xb4>
    	*rf = found;
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	601a      	str	r2, [r3, #0]
    }
    return res;
 8001d10:	7efb      	ldrb	r3, [r7, #27]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3724      	adds	r7, #36	; 0x24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	0800a3cc 	.word	0x0800a3cc

08001d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	607b      	str	r3, [r7, #4]
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <HAL_MspInit+0x4c>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2e:	4a0f      	ldr	r2, [pc, #60]	; (8001d6c <HAL_MspInit+0x4c>)
 8001d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d34:	6453      	str	r3, [r2, #68]	; 0x44
 8001d36:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <HAL_MspInit+0x4c>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d3e:	607b      	str	r3, [r7, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	603b      	str	r3, [r7, #0]
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <HAL_MspInit+0x4c>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	4a08      	ldr	r2, [pc, #32]	; (8001d6c <HAL_MspInit+0x4c>)
 8001d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d50:	6413      	str	r3, [r2, #64]	; 0x40
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_MspInit+0x4c>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800

08001d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <NMI_Handler+0x4>

08001d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d7a:	e7fe      	b.n	8001d7a <HardFault_Handler+0x4>

08001d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d80:	e7fe      	b.n	8001d80 <MemManage_Handler+0x4>

08001d82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d86:	e7fe      	b.n	8001d86 <BusFault_Handler+0x4>

08001d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <UsageFault_Handler+0x4>

08001d8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dbc:	f000 fb74 	bl	80024a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001dc8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001dcc:	f001 f820 	bl	8002e10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001dd0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001dd4:	f001 f81c 	bl	8002e10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001dd8:	bf00      	nop
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
	//Read temperature
	lwow_ds18x20_read(&ow, rom_ids, &data.measuredTemp);
 8001de0:	4a09      	ldr	r2, [pc, #36]	; (8001e08 <TIM3_IRQHandler+0x2c>)
 8001de2:	490a      	ldr	r1, [pc, #40]	; (8001e0c <TIM3_IRQHandler+0x30>)
 8001de4:	480a      	ldr	r0, [pc, #40]	; (8001e10 <TIM3_IRQHandler+0x34>)
 8001de6:	f004 fab9 	bl	800635c <lwow_ds18x20_read>
	lwow_ds18x20_start(&ow, rom_ids);
 8001dea:	4908      	ldr	r1, [pc, #32]	; (8001e0c <TIM3_IRQHandler+0x30>)
 8001dec:	4808      	ldr	r0, [pc, #32]	; (8001e10 <TIM3_IRQHandler+0x34>)
 8001dee:	f004 f982 	bl	80060f6 <lwow_ds18x20_start>

	//Update display with incremented animation step
	menuDisplay_Update(1);
 8001df2:	2001      	movs	r0, #1
 8001df4:	f7ff fd58 	bl	80018a8 <menuDisplay_Update>

	//Set output PWM
	handleOutput(&data);
 8001df8:	4806      	ldr	r0, [pc, #24]	; (8001e14 <TIM3_IRQHandler+0x38>)
 8001dfa:	f7ff fb29 	bl	8001450 <handleOutput>

	HAL_TIM_IRQHandler(&htim3);
 8001dfe:	4806      	ldr	r0, [pc, #24]	; (8001e18 <TIM3_IRQHandler+0x3c>)
 8001e00:	f002 fa8e 	bl	8004320 <HAL_TIM_IRQHandler>

}
 8001e04:	bf00      	nop
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000010 	.word	0x20000010
 8001e0c:	200006b0 	.word	0x200006b0
 8001e10:	2000069c 	.word	0x2000069c
 8001e14:	20000000 	.word	0x20000000
 8001e18:	200006c4 	.word	0x200006c4

08001e1c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e20:	4802      	ldr	r0, [pc, #8]	; (8001e2c <TIM4_IRQHandler+0x10>)
 8001e22:	f002 fa7d 	bl	8004320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	2000070c 	.word	0x2000070c

08001e30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <USART2_IRQHandler+0x10>)
 8001e36:	f003 f9c3 	bl	80051c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000754 	.word	0x20000754

08001e44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return 1;
 8001e48:	2301      	movs	r3, #1
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <_kill>:

int _kill(int pid, int sig)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e5e:	f005 fa4d 	bl	80072fc <__errno>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2216      	movs	r2, #22
 8001e66:	601a      	str	r2, [r3, #0]
  return -1;
 8001e68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <_exit>:

void _exit (int status)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ffe7 	bl	8001e54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e86:	e7fe      	b.n	8001e86 <_exit+0x12>

08001e88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	e00a      	b.n	8001eb0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e9a:	f3af 8000 	nop.w
 8001e9e:	4601      	mov	r1, r0
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	60ba      	str	r2, [r7, #8]
 8001ea6:	b2ca      	uxtb	r2, r1
 8001ea8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	3301      	adds	r3, #1
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	dbf0      	blt.n	8001e9a <_read+0x12>
  }

  return len;
 8001eb8:	687b      	ldr	r3, [r7, #4]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b086      	sub	sp, #24
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	60f8      	str	r0, [r7, #12]
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]
 8001ed2:	e009      	b.n	8001ee8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	1c5a      	adds	r2, r3, #1
 8001ed8:	60ba      	str	r2, [r7, #8]
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	dbf1      	blt.n	8001ed4 <_write+0x12>
  }
  return len;
 8001ef0:	687b      	ldr	r3, [r7, #4]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <_close>:

int _close(int file)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f22:	605a      	str	r2, [r3, #4]
  return 0;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <_isatty>:

int _isatty(int file)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f3a:	2301      	movs	r3, #1
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f6c:	4a14      	ldr	r2, [pc, #80]	; (8001fc0 <_sbrk+0x5c>)
 8001f6e:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <_sbrk+0x60>)
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f78:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <_sbrk+0x64>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d102      	bne.n	8001f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f80:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <_sbrk+0x64>)
 8001f82:	4a12      	ldr	r2, [pc, #72]	; (8001fcc <_sbrk+0x68>)
 8001f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f86:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <_sbrk+0x64>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d207      	bcs.n	8001fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f94:	f005 f9b2 	bl	80072fc <__errno>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	220c      	movs	r2, #12
 8001f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa2:	e009      	b.n	8001fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa4:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <_sbrk+0x64>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001faa:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <_sbrk+0x64>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	4a05      	ldr	r2, [pc, #20]	; (8001fc8 <_sbrk+0x64>)
 8001fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20018000 	.word	0x20018000
 8001fc4:	00000400 	.word	0x00000400
 8001fc8:	200006c0 	.word	0x200006c0
 8001fcc:	20000fb8 	.word	0x20000fb8

08001fd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <SystemInit+0x20>)
 8001fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fda:	4a05      	ldr	r2, [pc, #20]	; (8001ff0 <SystemInit+0x20>)
 8001fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fe0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;


/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ffa:	f107 0308 	add.w	r3, r7, #8
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002008:	463b      	mov	r3, r7
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002010:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <MX_TIM3_Init+0x94>)
 8002012:	4a1e      	ldr	r2, [pc, #120]	; (800208c <MX_TIM3_Init+0x98>)
 8002014:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48; // 5Hz
 8002016:	4b1c      	ldr	r3, [pc, #112]	; (8002088 <MX_TIM3_Init+0x94>)
 8002018:	2230      	movs	r2, #48	; 0x30
 800201a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201c:	4b1a      	ldr	r3, [pc, #104]	; (8002088 <MX_TIM3_Init+0x94>)
 800201e:	2200      	movs	r2, #0
 8002020:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002022:	4b19      	ldr	r3, [pc, #100]	; (8002088 <MX_TIM3_Init+0x94>)
 8002024:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002028:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800202a:	4b17      	ldr	r3, [pc, #92]	; (8002088 <MX_TIM3_Init+0x94>)
 800202c:	2200      	movs	r2, #0
 800202e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002030:	4b15      	ldr	r3, [pc, #84]	; (8002088 <MX_TIM3_Init+0x94>)
 8002032:	2200      	movs	r2, #0
 8002034:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002036:	4814      	ldr	r0, [pc, #80]	; (8002088 <MX_TIM3_Init+0x94>)
 8002038:	f001 ffb6 	bl	8003fa8 <HAL_TIM_Base_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002042:	f7ff fbe7 	bl	8001814 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800204a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800204c:	f107 0308 	add.w	r3, r7, #8
 8002050:	4619      	mov	r1, r3
 8002052:	480d      	ldr	r0, [pc, #52]	; (8002088 <MX_TIM3_Init+0x94>)
 8002054:	f002 fb2e 	bl	80046b4 <HAL_TIM_ConfigClockSource>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800205e:	f7ff fbd9 	bl	8001814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002062:	2300      	movs	r3, #0
 8002064:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002066:	2300      	movs	r3, #0
 8002068:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800206a:	463b      	mov	r3, r7
 800206c:	4619      	mov	r1, r3
 800206e:	4806      	ldr	r0, [pc, #24]	; (8002088 <MX_TIM3_Init+0x94>)
 8002070:	f002 fee6 	bl	8004e40 <HAL_TIMEx_MasterConfigSynchronization>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800207a:	f7ff fbcb 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800207e:	bf00      	nop
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	200006c4 	.word	0x200006c4
 800208c:	40000400 	.word	0x40000400

08002090 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08e      	sub	sp, #56	; 0x38
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002096:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]
 80020a0:	609a      	str	r2, [r3, #8]
 80020a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a4:	f107 0320 	add.w	r3, r7, #32
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020ae:	1d3b      	adds	r3, r7, #4
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	611a      	str	r2, [r3, #16]
 80020bc:	615a      	str	r2, [r3, #20]
 80020be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80020c0:	4b2c      	ldr	r3, [pc, #176]	; (8002174 <MX_TIM4_Init+0xe4>)
 80020c2:	4a2d      	ldr	r2, [pc, #180]	; (8002178 <MX_TIM4_Init+0xe8>)
 80020c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 12; //20Hz
 80020c6:	4b2b      	ldr	r3, [pc, #172]	; (8002174 <MX_TIM4_Init+0xe4>)
 80020c8:	220c      	movs	r2, #12
 80020ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020cc:	4b29      	ldr	r3, [pc, #164]	; (8002174 <MX_TIM4_Init+0xe4>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80020d2:	4b28      	ldr	r3, [pc, #160]	; (8002174 <MX_TIM4_Init+0xe4>)
 80020d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020d8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020da:	4b26      	ldr	r3, [pc, #152]	; (8002174 <MX_TIM4_Init+0xe4>)
 80020dc:	2200      	movs	r2, #0
 80020de:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e0:	4b24      	ldr	r3, [pc, #144]	; (8002174 <MX_TIM4_Init+0xe4>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80020e6:	4823      	ldr	r0, [pc, #140]	; (8002174 <MX_TIM4_Init+0xe4>)
 80020e8:	f001 ff5e 	bl	8003fa8 <HAL_TIM_Base_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80020f2:	f7ff fb8f 	bl	8001814 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80020fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002100:	4619      	mov	r1, r3
 8002102:	481c      	ldr	r0, [pc, #112]	; (8002174 <MX_TIM4_Init+0xe4>)
 8002104:	f002 fad6 	bl	80046b4 <HAL_TIM_ConfigClockSource>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800210e:	f7ff fb81 	bl	8001814 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002112:	4818      	ldr	r0, [pc, #96]	; (8002174 <MX_TIM4_Init+0xe4>)
 8002114:	f001 fffa 	bl	800410c <HAL_TIM_PWM_Init>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800211e:	f7ff fb79 	bl	8001814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002122:	2300      	movs	r3, #0
 8002124:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002126:	2300      	movs	r3, #0
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800212a:	f107 0320 	add.w	r3, r7, #32
 800212e:	4619      	mov	r1, r3
 8002130:	4810      	ldr	r0, [pc, #64]	; (8002174 <MX_TIM4_Init+0xe4>)
 8002132:	f002 fe85 	bl	8004e40 <HAL_TIMEx_MasterConfigSynchronization>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800213c:	f7ff fb6a 	bl	8001814 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002140:	2360      	movs	r3, #96	; 0x60
 8002142:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002150:	1d3b      	adds	r3, r7, #4
 8002152:	220c      	movs	r2, #12
 8002154:	4619      	mov	r1, r3
 8002156:	4807      	ldr	r0, [pc, #28]	; (8002174 <MX_TIM4_Init+0xe4>)
 8002158:	f002 f9ea 	bl	8004530 <HAL_TIM_PWM_ConfigChannel>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002162:	f7ff fb57 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002166:	4803      	ldr	r0, [pc, #12]	; (8002174 <MX_TIM4_Init+0xe4>)
 8002168:	f000 f84e 	bl	8002208 <HAL_TIM_MspPostInit>

}
 800216c:	bf00      	nop
 800216e:	3738      	adds	r7, #56	; 0x38
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	2000070c 	.word	0x2000070c
 8002178:	40000800 	.word	0x40000800

0800217c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a1c      	ldr	r2, [pc, #112]	; (80021fc <HAL_TIM_Base_MspInit+0x80>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d116      	bne.n	80021bc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <HAL_TIM_Base_MspInit+0x84>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	4a1a      	ldr	r2, [pc, #104]	; (8002200 <HAL_TIM_Base_MspInit+0x84>)
 8002198:	f043 0302 	orr.w	r3, r3, #2
 800219c:	6413      	str	r3, [r2, #64]	; 0x40
 800219e:	4b18      	ldr	r3, [pc, #96]	; (8002200 <HAL_TIM_Base_MspInit+0x84>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 12, 0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	210c      	movs	r1, #12
 80021ae:	201d      	movs	r0, #29
 80021b0:	f000 fabd 	bl	800272e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80021b4:	201d      	movs	r0, #29
 80021b6:	f000 fad6 	bl	8002766 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80021ba:	e01a      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a10      	ldr	r2, [pc, #64]	; (8002204 <HAL_TIM_Base_MspInit+0x88>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d115      	bne.n	80021f2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	4b0d      	ldr	r3, [pc, #52]	; (8002200 <HAL_TIM_Base_MspInit+0x84>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	4a0c      	ldr	r2, [pc, #48]	; (8002200 <HAL_TIM_Base_MspInit+0x84>)
 80021d0:	f043 0304 	orr.w	r3, r3, #4
 80021d4:	6413      	str	r3, [r2, #64]	; 0x40
 80021d6:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <HAL_TIM_Base_MspInit+0x84>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 13, 0);
 80021e2:	2200      	movs	r2, #0
 80021e4:	210d      	movs	r1, #13
 80021e6:	201e      	movs	r0, #30
 80021e8:	f000 faa1 	bl	800272e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80021ec:	201e      	movs	r0, #30
 80021ee:	f000 faba 	bl	8002766 <HAL_NVIC_EnableIRQ>
}
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40000400 	.word	0x40000400
 8002200:	40023800 	.word	0x40023800
 8002204:	40000800 	.word	0x40000800

08002208 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002210:	f107 030c 	add.w	r3, r7, #12
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a12      	ldr	r2, [pc, #72]	; (8002270 <HAL_TIM_MspPostInit+0x68>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d11e      	bne.n	8002268 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	4b11      	ldr	r3, [pc, #68]	; (8002274 <HAL_TIM_MspPostInit+0x6c>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	4a10      	ldr	r2, [pc, #64]	; (8002274 <HAL_TIM_MspPostInit+0x6c>)
 8002234:	f043 0302 	orr.w	r3, r3, #2
 8002238:	6313      	str	r3, [r2, #48]	; 0x30
 800223a:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <HAL_TIM_MspPostInit+0x6c>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002246:	f44f 7300 	mov.w	r3, #512	; 0x200
 800224a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224c:	2302      	movs	r3, #2
 800224e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002254:	2300      	movs	r3, #0
 8002256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002258:	2302      	movs	r3, #2
 800225a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225c:	f107 030c 	add.w	r3, r7, #12
 8002260:	4619      	mov	r1, r3
 8002262:	4805      	ldr	r0, [pc, #20]	; (8002278 <HAL_TIM_MspPostInit+0x70>)
 8002264:	f000 fb3a 	bl	80028dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002268:	bf00      	nop
 800226a:	3720      	adds	r7, #32
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40000800 	.word	0x40000800
 8002274:	40023800 	.word	0x40023800
 8002278:	40020400 	.word	0x40020400

0800227c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002280:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <MX_USART2_UART_Init+0x4c>)
 8002282:	4a12      	ldr	r2, [pc, #72]	; (80022cc <MX_USART2_UART_Init+0x50>)
 8002284:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002286:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <MX_USART2_UART_Init+0x4c>)
 8002288:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800228c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800228e:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <MX_USART2_UART_Init+0x4c>)
 8002290:	2200      	movs	r2, #0
 8002292:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002294:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <MX_USART2_UART_Init+0x4c>)
 8002296:	2200      	movs	r2, #0
 8002298:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800229a:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <MX_USART2_UART_Init+0x4c>)
 800229c:	2200      	movs	r2, #0
 800229e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022a0:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <MX_USART2_UART_Init+0x4c>)
 80022a2:	220c      	movs	r2, #12
 80022a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022a6:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <MX_USART2_UART_Init+0x4c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <MX_USART2_UART_Init+0x4c>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022b2:	4805      	ldr	r0, [pc, #20]	; (80022c8 <MX_USART2_UART_Init+0x4c>)
 80022b4:	f002 fe46 	bl	8004f44 <HAL_UART_Init>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022be:	f7ff faa9 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000754 	.word	0x20000754
 80022cc:	40004400 	.word	0x40004400

080022d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08a      	sub	sp, #40	; 0x28
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d8:	f107 0314 	add.w	r3, r7, #20
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a1d      	ldr	r2, [pc, #116]	; (8002364 <HAL_UART_MspInit+0x94>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d133      	bne.n	800235a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	4b1c      	ldr	r3, [pc, #112]	; (8002368 <HAL_UART_MspInit+0x98>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	4a1b      	ldr	r2, [pc, #108]	; (8002368 <HAL_UART_MspInit+0x98>)
 80022fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002300:	6413      	str	r3, [r2, #64]	; 0x40
 8002302:	4b19      	ldr	r3, [pc, #100]	; (8002368 <HAL_UART_MspInit+0x98>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	4b15      	ldr	r3, [pc, #84]	; (8002368 <HAL_UART_MspInit+0x98>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a14      	ldr	r2, [pc, #80]	; (8002368 <HAL_UART_MspInit+0x98>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b12      	ldr	r3, [pc, #72]	; (8002368 <HAL_UART_MspInit+0x98>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800232a:	230c      	movs	r3, #12
 800232c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800232e:	2312      	movs	r3, #18
 8002330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002336:	2303      	movs	r3, #3
 8002338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800233a:	2307      	movs	r3, #7
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233e:	f107 0314 	add.w	r3, r7, #20
 8002342:	4619      	mov	r1, r3
 8002344:	4809      	ldr	r0, [pc, #36]	; (800236c <HAL_UART_MspInit+0x9c>)
 8002346:	f000 fac9 	bl	80028dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800234a:	2200      	movs	r2, #0
 800234c:	2100      	movs	r1, #0
 800234e:	2026      	movs	r0, #38	; 0x26
 8002350:	f000 f9ed 	bl	800272e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002354:	2026      	movs	r0, #38	; 0x26
 8002356:	f000 fa06 	bl	8002766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800235a:	bf00      	nop
 800235c:	3728      	adds	r7, #40	; 0x28
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40004400 	.word	0x40004400
 8002368:	40023800 	.word	0x40023800
 800236c:	40020000 	.word	0x40020000

08002370 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a09      	ldr	r2, [pc, #36]	; (80023a4 <HAL_UART_MspDeInit+0x34>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d10c      	bne.n	800239c <HAL_UART_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8002382:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <HAL_UART_MspDeInit+0x38>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	4a08      	ldr	r2, [pc, #32]	; (80023a8 <HAL_UART_MspDeInit+0x38>)
 8002388:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800238c:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800238e:	210c      	movs	r1, #12
 8002390:	4806      	ldr	r0, [pc, #24]	; (80023ac <HAL_UART_MspDeInit+0x3c>)
 8002392:	f000 fc27 	bl	8002be4 <HAL_GPIO_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002396:	2026      	movs	r0, #38	; 0x26
 8002398:	f000 f9f3 	bl	8002782 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 800239c:	bf00      	nop
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40004400 	.word	0x40004400
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40020000 	.word	0x40020000

080023b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80023b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023b4:	480d      	ldr	r0, [pc, #52]	; (80023ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023b6:	490e      	ldr	r1, [pc, #56]	; (80023f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023b8:	4a0e      	ldr	r2, [pc, #56]	; (80023f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023bc:	e002      	b.n	80023c4 <LoopCopyDataInit>

080023be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023c2:	3304      	adds	r3, #4

080023c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023c8:	d3f9      	bcc.n	80023be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ca:	4a0b      	ldr	r2, [pc, #44]	; (80023f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023cc:	4c0b      	ldr	r4, [pc, #44]	; (80023fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80023ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023d0:	e001      	b.n	80023d6 <LoopFillZerobss>

080023d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023d4:	3204      	adds	r2, #4

080023d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023d8:	d3fb      	bcc.n	80023d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023da:	f7ff fdf9 	bl	8001fd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023de:	f004 ff93 	bl	8007308 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023e2:	f7ff f95f 	bl	80016a4 <main>
  bx  lr    
 80023e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80023e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80023ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023f0:	20000620 	.word	0x20000620
  ldr r2, =_sidata
 80023f4:	0800d61c 	.word	0x0800d61c
  ldr r2, =_sbss
 80023f8:	20000620 	.word	0x20000620
  ldr r4, =_ebss
 80023fc:	20000fb4 	.word	0x20000fb4

08002400 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002400:	e7fe      	b.n	8002400 <ADC_IRQHandler>
	...

08002404 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002408:	4b0e      	ldr	r3, [pc, #56]	; (8002444 <HAL_Init+0x40>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a0d      	ldr	r2, [pc, #52]	; (8002444 <HAL_Init+0x40>)
 800240e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002412:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002414:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_Init+0x40>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <HAL_Init+0x40>)
 800241a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800241e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002420:	4b08      	ldr	r3, [pc, #32]	; (8002444 <HAL_Init+0x40>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a07      	ldr	r2, [pc, #28]	; (8002444 <HAL_Init+0x40>)
 8002426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800242a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800242c:	2003      	movs	r0, #3
 800242e:	f000 f973 	bl	8002718 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002432:	200a      	movs	r0, #10
 8002434:	f000 f808 	bl	8002448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002438:	f7ff fc72 	bl	8001d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40023c00 	.word	0x40023c00

08002448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002450:	4b12      	ldr	r3, [pc, #72]	; (800249c <HAL_InitTick+0x54>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <HAL_InitTick+0x58>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	4619      	mov	r1, r3
 800245a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800245e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002462:	fbb2 f3f3 	udiv	r3, r2, r3
 8002466:	4618      	mov	r0, r3
 8002468:	f000 f999 	bl	800279e <HAL_SYSTICK_Config>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e00e      	b.n	8002494 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b0f      	cmp	r3, #15
 800247a:	d80a      	bhi.n	8002492 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800247c:	2200      	movs	r2, #0
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	f04f 30ff 	mov.w	r0, #4294967295
 8002484:	f000 f953 	bl	800272e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002488:	4a06      	ldr	r2, [pc, #24]	; (80024a4 <HAL_InitTick+0x5c>)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	e000      	b.n	8002494 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20000424 	.word	0x20000424
 80024a0:	2000042c 	.word	0x2000042c
 80024a4:	20000428 	.word	0x20000428

080024a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <HAL_IncTick+0x20>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	461a      	mov	r2, r3
 80024b2:	4b06      	ldr	r3, [pc, #24]	; (80024cc <HAL_IncTick+0x24>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4413      	add	r3, r2
 80024b8:	4a04      	ldr	r2, [pc, #16]	; (80024cc <HAL_IncTick+0x24>)
 80024ba:	6013      	str	r3, [r2, #0]
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	2000042c 	.word	0x2000042c
 80024cc:	20000798 	.word	0x20000798

080024d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return uwTick;
 80024d4:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <HAL_GetTick+0x14>)
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	20000798 	.word	0x20000798

080024e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024f0:	f7ff ffee 	bl	80024d0 <HAL_GetTick>
 80024f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002500:	d005      	beq.n	800250e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002502:	4b0a      	ldr	r3, [pc, #40]	; (800252c <HAL_Delay+0x44>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	461a      	mov	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4413      	add	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800250e:	bf00      	nop
 8002510:	f7ff ffde 	bl	80024d0 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	429a      	cmp	r2, r3
 800251e:	d8f7      	bhi.n	8002510 <HAL_Delay+0x28>
  {
  }
}
 8002520:	bf00      	nop
 8002522:	bf00      	nop
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	2000042c 	.word	0x2000042c

08002530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <__NVIC_SetPriorityGrouping+0x44>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800254c:	4013      	ands	r3, r2
 800254e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002558:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800255c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002562:	4a04      	ldr	r2, [pc, #16]	; (8002574 <__NVIC_SetPriorityGrouping+0x44>)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	60d3      	str	r3, [r2, #12]
}
 8002568:	bf00      	nop
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800257c:	4b04      	ldr	r3, [pc, #16]	; (8002590 <__NVIC_GetPriorityGrouping+0x18>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	0a1b      	lsrs	r3, r3, #8
 8002582:	f003 0307 	and.w	r3, r3, #7
}
 8002586:	4618      	mov	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	db0b      	blt.n	80025be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	f003 021f 	and.w	r2, r3, #31
 80025ac:	4907      	ldr	r1, [pc, #28]	; (80025cc <__NVIC_EnableIRQ+0x38>)
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	2001      	movs	r0, #1
 80025b6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	e000e100 	.word	0xe000e100

080025d0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	db12      	blt.n	8002608 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	f003 021f 	and.w	r2, r3, #31
 80025e8:	490a      	ldr	r1, [pc, #40]	; (8002614 <__NVIC_DisableIRQ+0x44>)
 80025ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ee:	095b      	lsrs	r3, r3, #5
 80025f0:	2001      	movs	r0, #1
 80025f2:	fa00 f202 	lsl.w	r2, r0, r2
 80025f6:	3320      	adds	r3, #32
 80025f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80025fc:	f3bf 8f4f 	dsb	sy
}
 8002600:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002602:	f3bf 8f6f 	isb	sy
}
 8002606:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000e100 	.word	0xe000e100

08002618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	6039      	str	r1, [r7, #0]
 8002622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002628:	2b00      	cmp	r3, #0
 800262a:	db0a      	blt.n	8002642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	b2da      	uxtb	r2, r3
 8002630:	490c      	ldr	r1, [pc, #48]	; (8002664 <__NVIC_SetPriority+0x4c>)
 8002632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002636:	0112      	lsls	r2, r2, #4
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	440b      	add	r3, r1
 800263c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002640:	e00a      	b.n	8002658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	b2da      	uxtb	r2, r3
 8002646:	4908      	ldr	r1, [pc, #32]	; (8002668 <__NVIC_SetPriority+0x50>)
 8002648:	79fb      	ldrb	r3, [r7, #7]
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	3b04      	subs	r3, #4
 8002650:	0112      	lsls	r2, r2, #4
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	440b      	add	r3, r1
 8002656:	761a      	strb	r2, [r3, #24]
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	e000e100 	.word	0xe000e100
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800266c:	b480      	push	{r7}
 800266e:	b089      	sub	sp, #36	; 0x24
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f1c3 0307 	rsb	r3, r3, #7
 8002686:	2b04      	cmp	r3, #4
 8002688:	bf28      	it	cs
 800268a:	2304      	movcs	r3, #4
 800268c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	3304      	adds	r3, #4
 8002692:	2b06      	cmp	r3, #6
 8002694:	d902      	bls.n	800269c <NVIC_EncodePriority+0x30>
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	3b03      	subs	r3, #3
 800269a:	e000      	b.n	800269e <NVIC_EncodePriority+0x32>
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a0:	f04f 32ff 	mov.w	r2, #4294967295
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43da      	mvns	r2, r3
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	401a      	ands	r2, r3
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b4:	f04f 31ff 	mov.w	r1, #4294967295
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	fa01 f303 	lsl.w	r3, r1, r3
 80026be:	43d9      	mvns	r1, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c4:	4313      	orrs	r3, r2
         );
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3724      	adds	r7, #36	; 0x24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
	...

080026d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3b01      	subs	r3, #1
 80026e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026e4:	d301      	bcc.n	80026ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026e6:	2301      	movs	r3, #1
 80026e8:	e00f      	b.n	800270a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ea:	4a0a      	ldr	r2, [pc, #40]	; (8002714 <SysTick_Config+0x40>)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026f2:	210f      	movs	r1, #15
 80026f4:	f04f 30ff 	mov.w	r0, #4294967295
 80026f8:	f7ff ff8e 	bl	8002618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <SysTick_Config+0x40>)
 80026fe:	2200      	movs	r2, #0
 8002700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002702:	4b04      	ldr	r3, [pc, #16]	; (8002714 <SysTick_Config+0x40>)
 8002704:	2207      	movs	r2, #7
 8002706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	e000e010 	.word	0xe000e010

08002718 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff ff05 	bl	8002530 <__NVIC_SetPriorityGrouping>
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800272e:	b580      	push	{r7, lr}
 8002730:	b086      	sub	sp, #24
 8002732:	af00      	add	r7, sp, #0
 8002734:	4603      	mov	r3, r0
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
 800273a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002740:	f7ff ff1a 	bl	8002578 <__NVIC_GetPriorityGrouping>
 8002744:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	68b9      	ldr	r1, [r7, #8]
 800274a:	6978      	ldr	r0, [r7, #20]
 800274c:	f7ff ff8e 	bl	800266c <NVIC_EncodePriority>
 8002750:	4602      	mov	r2, r0
 8002752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002756:	4611      	mov	r1, r2
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff ff5d 	bl	8002618 <__NVIC_SetPriority>
}
 800275e:	bf00      	nop
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	4603      	mov	r3, r0
 800276e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff ff0d 	bl	8002594 <__NVIC_EnableIRQ>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	4603      	mov	r3, r0
 800278a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800278c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff ff1d 	bl	80025d0 <__NVIC_DisableIRQ>
}
 8002796:	bf00      	nop
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff ff94 	bl	80026d4 <SysTick_Config>
 80027ac:	4603      	mov	r3, r0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80027c4:	f7ff fe84 	bl	80024d0 <HAL_GetTick>
 80027c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d008      	beq.n	80027e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2280      	movs	r2, #128	; 0x80
 80027da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e052      	b.n	800288e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0216 	bic.w	r2, r2, #22
 80027f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695a      	ldr	r2, [r3, #20]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002806:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	2b00      	cmp	r3, #0
 800280e:	d103      	bne.n	8002818 <HAL_DMA_Abort+0x62>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002814:	2b00      	cmp	r3, #0
 8002816:	d007      	beq.n	8002828 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0208 	bic.w	r2, r2, #8
 8002826:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0201 	bic.w	r2, r2, #1
 8002836:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002838:	e013      	b.n	8002862 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800283a:	f7ff fe49 	bl	80024d0 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b05      	cmp	r3, #5
 8002846:	d90c      	bls.n	8002862 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2220      	movs	r2, #32
 800284c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2203      	movs	r2, #3
 8002852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e015      	b.n	800288e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1e4      	bne.n	800283a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002874:	223f      	movs	r2, #63	; 0x3f
 8002876:	409a      	lsls	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d004      	beq.n	80028b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2280      	movs	r2, #128	; 0x80
 80028ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e00c      	b.n	80028ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2205      	movs	r2, #5
 80028b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0201 	bic.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028dc:	b480      	push	{r7}
 80028de:	b089      	sub	sp, #36	; 0x24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]
 80028f6:	e159      	b.n	8002bac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028f8:	2201      	movs	r2, #1
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	4013      	ands	r3, r2
 800290a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	429a      	cmp	r2, r3
 8002912:	f040 8148 	bne.w	8002ba6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	2b01      	cmp	r3, #1
 8002920:	d005      	beq.n	800292e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800292a:	2b02      	cmp	r3, #2
 800292c:	d130      	bne.n	8002990 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	2203      	movs	r2, #3
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4013      	ands	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4313      	orrs	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002964:	2201      	movs	r2, #1
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4013      	ands	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	091b      	lsrs	r3, r3, #4
 800297a:	f003 0201 	and.w	r2, r3, #1
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4313      	orrs	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	2b03      	cmp	r3, #3
 800299a:	d017      	beq.n	80029cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	2203      	movs	r2, #3
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 0303 	and.w	r3, r3, #3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d123      	bne.n	8002a20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	08da      	lsrs	r2, r3, #3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3208      	adds	r2, #8
 80029e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	220f      	movs	r2, #15
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	08da      	lsrs	r2, r3, #3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	3208      	adds	r2, #8
 8002a1a:	69b9      	ldr	r1, [r7, #24]
 8002a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	2203      	movs	r2, #3
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4013      	ands	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 0203 	and.w	r2, r3, #3
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 80a2 	beq.w	8002ba6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	4b57      	ldr	r3, [pc, #348]	; (8002bc4 <HAL_GPIO_Init+0x2e8>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6a:	4a56      	ldr	r2, [pc, #344]	; (8002bc4 <HAL_GPIO_Init+0x2e8>)
 8002a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a70:	6453      	str	r3, [r2, #68]	; 0x44
 8002a72:	4b54      	ldr	r3, [pc, #336]	; (8002bc4 <HAL_GPIO_Init+0x2e8>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a7e:	4a52      	ldr	r2, [pc, #328]	; (8002bc8 <HAL_GPIO_Init+0x2ec>)
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	089b      	lsrs	r3, r3, #2
 8002a84:	3302      	adds	r3, #2
 8002a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	220f      	movs	r2, #15
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a49      	ldr	r2, [pc, #292]	; (8002bcc <HAL_GPIO_Init+0x2f0>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d019      	beq.n	8002ade <HAL_GPIO_Init+0x202>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a48      	ldr	r2, [pc, #288]	; (8002bd0 <HAL_GPIO_Init+0x2f4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d013      	beq.n	8002ada <HAL_GPIO_Init+0x1fe>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a47      	ldr	r2, [pc, #284]	; (8002bd4 <HAL_GPIO_Init+0x2f8>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d00d      	beq.n	8002ad6 <HAL_GPIO_Init+0x1fa>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a46      	ldr	r2, [pc, #280]	; (8002bd8 <HAL_GPIO_Init+0x2fc>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d007      	beq.n	8002ad2 <HAL_GPIO_Init+0x1f6>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a45      	ldr	r2, [pc, #276]	; (8002bdc <HAL_GPIO_Init+0x300>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d101      	bne.n	8002ace <HAL_GPIO_Init+0x1f2>
 8002aca:	2304      	movs	r3, #4
 8002acc:	e008      	b.n	8002ae0 <HAL_GPIO_Init+0x204>
 8002ace:	2307      	movs	r3, #7
 8002ad0:	e006      	b.n	8002ae0 <HAL_GPIO_Init+0x204>
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e004      	b.n	8002ae0 <HAL_GPIO_Init+0x204>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e002      	b.n	8002ae0 <HAL_GPIO_Init+0x204>
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <HAL_GPIO_Init+0x204>
 8002ade:	2300      	movs	r3, #0
 8002ae0:	69fa      	ldr	r2, [r7, #28]
 8002ae2:	f002 0203 	and.w	r2, r2, #3
 8002ae6:	0092      	lsls	r2, r2, #2
 8002ae8:	4093      	lsls	r3, r2
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002af0:	4935      	ldr	r1, [pc, #212]	; (8002bc8 <HAL_GPIO_Init+0x2ec>)
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	089b      	lsrs	r3, r3, #2
 8002af6:	3302      	adds	r3, #2
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002afe:	4b38      	ldr	r3, [pc, #224]	; (8002be0 <HAL_GPIO_Init+0x304>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	43db      	mvns	r3, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b22:	4a2f      	ldr	r2, [pc, #188]	; (8002be0 <HAL_GPIO_Init+0x304>)
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b28:	4b2d      	ldr	r3, [pc, #180]	; (8002be0 <HAL_GPIO_Init+0x304>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	43db      	mvns	r3, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4013      	ands	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b4c:	4a24      	ldr	r2, [pc, #144]	; (8002be0 <HAL_GPIO_Init+0x304>)
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b52:	4b23      	ldr	r3, [pc, #140]	; (8002be0 <HAL_GPIO_Init+0x304>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b76:	4a1a      	ldr	r2, [pc, #104]	; (8002be0 <HAL_GPIO_Init+0x304>)
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b7c:	4b18      	ldr	r3, [pc, #96]	; (8002be0 <HAL_GPIO_Init+0x304>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ba0:	4a0f      	ldr	r2, [pc, #60]	; (8002be0 <HAL_GPIO_Init+0x304>)
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	61fb      	str	r3, [r7, #28]
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	2b0f      	cmp	r3, #15
 8002bb0:	f67f aea2 	bls.w	80028f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bb4:	bf00      	nop
 8002bb6:	bf00      	nop
 8002bb8:	3724      	adds	r7, #36	; 0x24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	40013800 	.word	0x40013800
 8002bcc:	40020000 	.word	0x40020000
 8002bd0:	40020400 	.word	0x40020400
 8002bd4:	40020800 	.word	0x40020800
 8002bd8:	40020c00 	.word	0x40020c00
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40013c00 	.word	0x40013c00

08002be4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b087      	sub	sp, #28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	e0bb      	b.n	8002d78 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c00:	2201      	movs	r2, #1
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	f040 80ab 	bne.w	8002d72 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002c1c:	4a5c      	ldr	r2, [pc, #368]	; (8002d90 <HAL_GPIO_DeInit+0x1ac>)
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	089b      	lsrs	r3, r3, #2
 8002c22:	3302      	adds	r3, #2
 8002c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c28:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f003 0303 	and.w	r3, r3, #3
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	220f      	movs	r2, #15
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a54      	ldr	r2, [pc, #336]	; (8002d94 <HAL_GPIO_DeInit+0x1b0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d019      	beq.n	8002c7a <HAL_GPIO_DeInit+0x96>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a53      	ldr	r2, [pc, #332]	; (8002d98 <HAL_GPIO_DeInit+0x1b4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d013      	beq.n	8002c76 <HAL_GPIO_DeInit+0x92>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a52      	ldr	r2, [pc, #328]	; (8002d9c <HAL_GPIO_DeInit+0x1b8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d00d      	beq.n	8002c72 <HAL_GPIO_DeInit+0x8e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a51      	ldr	r2, [pc, #324]	; (8002da0 <HAL_GPIO_DeInit+0x1bc>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d007      	beq.n	8002c6e <HAL_GPIO_DeInit+0x8a>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a50      	ldr	r2, [pc, #320]	; (8002da4 <HAL_GPIO_DeInit+0x1c0>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d101      	bne.n	8002c6a <HAL_GPIO_DeInit+0x86>
 8002c66:	2304      	movs	r3, #4
 8002c68:	e008      	b.n	8002c7c <HAL_GPIO_DeInit+0x98>
 8002c6a:	2307      	movs	r3, #7
 8002c6c:	e006      	b.n	8002c7c <HAL_GPIO_DeInit+0x98>
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e004      	b.n	8002c7c <HAL_GPIO_DeInit+0x98>
 8002c72:	2302      	movs	r3, #2
 8002c74:	e002      	b.n	8002c7c <HAL_GPIO_DeInit+0x98>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <HAL_GPIO_DeInit+0x98>
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	f002 0203 	and.w	r2, r2, #3
 8002c82:	0092      	lsls	r2, r2, #2
 8002c84:	4093      	lsls	r3, r2
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d132      	bne.n	8002cf2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002c8c:	4b46      	ldr	r3, [pc, #280]	; (8002da8 <HAL_GPIO_DeInit+0x1c4>)
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	43db      	mvns	r3, r3
 8002c94:	4944      	ldr	r1, [pc, #272]	; (8002da8 <HAL_GPIO_DeInit+0x1c4>)
 8002c96:	4013      	ands	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002c9a:	4b43      	ldr	r3, [pc, #268]	; (8002da8 <HAL_GPIO_DeInit+0x1c4>)
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	4941      	ldr	r1, [pc, #260]	; (8002da8 <HAL_GPIO_DeInit+0x1c4>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002ca8:	4b3f      	ldr	r3, [pc, #252]	; (8002da8 <HAL_GPIO_DeInit+0x1c4>)
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	493d      	ldr	r1, [pc, #244]	; (8002da8 <HAL_GPIO_DeInit+0x1c4>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002cb6:	4b3c      	ldr	r3, [pc, #240]	; (8002da8 <HAL_GPIO_DeInit+0x1c4>)
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	493a      	ldr	r1, [pc, #232]	; (8002da8 <HAL_GPIO_DeInit+0x1c4>)
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	220f      	movs	r2, #15
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002cd4:	4a2e      	ldr	r2, [pc, #184]	; (8002d90 <HAL_GPIO_DeInit+0x1ac>)
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	089b      	lsrs	r3, r3, #2
 8002cda:	3302      	adds	r3, #2
 8002cdc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	43da      	mvns	r2, r3
 8002ce4:	482a      	ldr	r0, [pc, #168]	; (8002d90 <HAL_GPIO_DeInit+0x1ac>)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	089b      	lsrs	r3, r3, #2
 8002cea:	400a      	ands	r2, r1
 8002cec:	3302      	adds	r3, #2
 8002cee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	2103      	movs	r1, #3
 8002cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	401a      	ands	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	08da      	lsrs	r2, r3, #3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3208      	adds	r2, #8
 8002d10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	220f      	movs	r2, #15
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	43db      	mvns	r3, r3
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	08d2      	lsrs	r2, r2, #3
 8002d28:	4019      	ands	r1, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	3208      	adds	r2, #8
 8002d2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	2103      	movs	r1, #3
 8002d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	401a      	ands	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	fa01 f303 	lsl.w	r3, r1, r3
 8002d54:	43db      	mvns	r3, r3
 8002d56:	401a      	ands	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	2103      	movs	r1, #3
 8002d66:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	401a      	ands	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	3301      	adds	r3, #1
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	2b0f      	cmp	r3, #15
 8002d7c:	f67f af40 	bls.w	8002c00 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002d80:	bf00      	nop
 8002d82:	bf00      	nop
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40013800 	.word	0x40013800
 8002d94:	40020000 	.word	0x40020000
 8002d98:	40020400 	.word	0x40020400
 8002d9c:	40020800 	.word	0x40020800
 8002da0:	40020c00 	.word	0x40020c00
 8002da4:	40021000 	.word	0x40021000
 8002da8:	40013c00 	.word	0x40013c00

08002dac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691a      	ldr	r2, [r3, #16]
 8002dbc:	887b      	ldrh	r3, [r7, #2]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d002      	beq.n	8002dca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	73fb      	strb	r3, [r7, #15]
 8002dc8:	e001      	b.n	8002dce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	460b      	mov	r3, r1
 8002de6:	807b      	strh	r3, [r7, #2]
 8002de8:	4613      	mov	r3, r2
 8002dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dec:	787b      	ldrb	r3, [r7, #1]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002df2:	887a      	ldrh	r2, [r7, #2]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002df8:	e003      	b.n	8002e02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dfa:	887b      	ldrh	r3, [r7, #2]
 8002dfc:	041a      	lsls	r2, r3, #16
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	619a      	str	r2, [r3, #24]
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
	...

08002e10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e1a:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	88fb      	ldrh	r3, [r7, #6]
 8002e20:	4013      	ands	r3, r2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d006      	beq.n	8002e34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e26:	4a05      	ldr	r2, [pc, #20]	; (8002e3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e28:	88fb      	ldrh	r3, [r7, #6]
 8002e2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e2c:	88fb      	ldrh	r3, [r7, #6]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe fbaa 	bl	8001588 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e34:	bf00      	nop
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40013c00 	.word	0x40013c00

08002e40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e12b      	b.n	80030aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d106      	bne.n	8002e6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7fe f936 	bl	80010d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2224      	movs	r2, #36	; 0x24
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0201 	bic.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ea2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ea4:	f001 f858 	bl	8003f58 <HAL_RCC_GetPCLK1Freq>
 8002ea8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	4a81      	ldr	r2, [pc, #516]	; (80030b4 <HAL_I2C_Init+0x274>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d807      	bhi.n	8002ec4 <HAL_I2C_Init+0x84>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4a80      	ldr	r2, [pc, #512]	; (80030b8 <HAL_I2C_Init+0x278>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	bf94      	ite	ls
 8002ebc:	2301      	movls	r3, #1
 8002ebe:	2300      	movhi	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	e006      	b.n	8002ed2 <HAL_I2C_Init+0x92>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4a7d      	ldr	r2, [pc, #500]	; (80030bc <HAL_I2C_Init+0x27c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	bf94      	ite	ls
 8002ecc:	2301      	movls	r3, #1
 8002ece:	2300      	movhi	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e0e7      	b.n	80030aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4a78      	ldr	r2, [pc, #480]	; (80030c0 <HAL_I2C_Init+0x280>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	0c9b      	lsrs	r3, r3, #18
 8002ee4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	4a6a      	ldr	r2, [pc, #424]	; (80030b4 <HAL_I2C_Init+0x274>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d802      	bhi.n	8002f14 <HAL_I2C_Init+0xd4>
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	3301      	adds	r3, #1
 8002f12:	e009      	b.n	8002f28 <HAL_I2C_Init+0xe8>
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f1a:	fb02 f303 	mul.w	r3, r2, r3
 8002f1e:	4a69      	ldr	r2, [pc, #420]	; (80030c4 <HAL_I2C_Init+0x284>)
 8002f20:	fba2 2303 	umull	r2, r3, r2, r3
 8002f24:	099b      	lsrs	r3, r3, #6
 8002f26:	3301      	adds	r3, #1
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6812      	ldr	r2, [r2, #0]
 8002f2c:	430b      	orrs	r3, r1
 8002f2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	495c      	ldr	r1, [pc, #368]	; (80030b4 <HAL_I2C_Init+0x274>)
 8002f44:	428b      	cmp	r3, r1
 8002f46:	d819      	bhi.n	8002f7c <HAL_I2C_Init+0x13c>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	1e59      	subs	r1, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f56:	1c59      	adds	r1, r3, #1
 8002f58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f5c:	400b      	ands	r3, r1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <HAL_I2C_Init+0x138>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	1e59      	subs	r1, r3, #1
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f70:	3301      	adds	r3, #1
 8002f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f76:	e051      	b.n	800301c <HAL_I2C_Init+0x1dc>
 8002f78:	2304      	movs	r3, #4
 8002f7a:	e04f      	b.n	800301c <HAL_I2C_Init+0x1dc>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d111      	bne.n	8002fa8 <HAL_I2C_Init+0x168>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	1e58      	subs	r0, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6859      	ldr	r1, [r3, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	440b      	add	r3, r1
 8002f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f96:	3301      	adds	r3, #1
 8002f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	bf0c      	ite	eq
 8002fa0:	2301      	moveq	r3, #1
 8002fa2:	2300      	movne	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	e012      	b.n	8002fce <HAL_I2C_Init+0x18e>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1e58      	subs	r0, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6859      	ldr	r1, [r3, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	0099      	lsls	r1, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	bf0c      	ite	eq
 8002fc8:	2301      	moveq	r3, #1
 8002fca:	2300      	movne	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_I2C_Init+0x196>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e022      	b.n	800301c <HAL_I2C_Init+0x1dc>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10e      	bne.n	8002ffc <HAL_I2C_Init+0x1bc>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1e58      	subs	r0, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6859      	ldr	r1, [r3, #4]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	440b      	add	r3, r1
 8002fec:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ffa:	e00f      	b.n	800301c <HAL_I2C_Init+0x1dc>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	1e58      	subs	r0, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6859      	ldr	r1, [r3, #4]
 8003004:	460b      	mov	r3, r1
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	0099      	lsls	r1, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003012:	3301      	adds	r3, #1
 8003014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003018:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	6809      	ldr	r1, [r1, #0]
 8003020:	4313      	orrs	r3, r2
 8003022:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69da      	ldr	r2, [r3, #28]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800304a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6911      	ldr	r1, [r2, #16]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68d2      	ldr	r2, [r2, #12]
 8003056:	4311      	orrs	r1, r2
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	430b      	orrs	r3, r1
 800305e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695a      	ldr	r2, [r3, #20]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0201 	orr.w	r2, r2, #1
 800308a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	000186a0 	.word	0x000186a0
 80030b8:	001e847f 	.word	0x001e847f
 80030bc:	003d08ff 	.word	0x003d08ff
 80030c0:	431bde83 	.word	0x431bde83
 80030c4:	10624dd3 	.word	0x10624dd3

080030c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af02      	add	r7, sp, #8
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	4608      	mov	r0, r1
 80030d2:	4611      	mov	r1, r2
 80030d4:	461a      	mov	r2, r3
 80030d6:	4603      	mov	r3, r0
 80030d8:	817b      	strh	r3, [r7, #10]
 80030da:	460b      	mov	r3, r1
 80030dc:	813b      	strh	r3, [r7, #8]
 80030de:	4613      	mov	r3, r2
 80030e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030e2:	f7ff f9f5 	bl	80024d0 <HAL_GetTick>
 80030e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b20      	cmp	r3, #32
 80030f2:	f040 80d9 	bne.w	80032a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	2319      	movs	r3, #25
 80030fc:	2201      	movs	r2, #1
 80030fe:	496d      	ldr	r1, [pc, #436]	; (80032b4 <HAL_I2C_Mem_Write+0x1ec>)
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 f971 	bl	80033e8 <I2C_WaitOnFlagUntilTimeout>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800310c:	2302      	movs	r3, #2
 800310e:	e0cc      	b.n	80032aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_I2C_Mem_Write+0x56>
 800311a:	2302      	movs	r3, #2
 800311c:	e0c5      	b.n	80032aa <HAL_I2C_Mem_Write+0x1e2>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b01      	cmp	r3, #1
 8003132:	d007      	beq.n	8003144 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003152:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2221      	movs	r2, #33	; 0x21
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2240      	movs	r2, #64	; 0x40
 8003160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6a3a      	ldr	r2, [r7, #32]
 800316e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003174:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4a4d      	ldr	r2, [pc, #308]	; (80032b8 <HAL_I2C_Mem_Write+0x1f0>)
 8003184:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003186:	88f8      	ldrh	r0, [r7, #6]
 8003188:	893a      	ldrh	r2, [r7, #8]
 800318a:	8979      	ldrh	r1, [r7, #10]
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	9301      	str	r3, [sp, #4]
 8003190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	4603      	mov	r3, r0
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 f890 	bl	80032bc <I2C_RequestMemoryWrite>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d052      	beq.n	8003248 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e081      	b.n	80032aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 f9f2 	bl	8003594 <I2C_WaitOnTXEFlagUntilTimeout>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00d      	beq.n	80031d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d107      	bne.n	80031ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e06b      	b.n	80032aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	781a      	ldrb	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	1c5a      	adds	r2, r3, #1
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b04      	cmp	r3, #4
 800320e:	d11b      	bne.n	8003248 <HAL_I2C_Mem_Write+0x180>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003214:	2b00      	cmp	r3, #0
 8003216:	d017      	beq.n	8003248 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	781a      	ldrb	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003232:	3b01      	subs	r3, #1
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1aa      	bne.n	80031a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 f9de 	bl	8003616 <I2C_WaitOnBTFFlagUntilTimeout>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00d      	beq.n	800327c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	2b04      	cmp	r3, #4
 8003266:	d107      	bne.n	8003278 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003276:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e016      	b.n	80032aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800328a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2220      	movs	r2, #32
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032a4:	2300      	movs	r3, #0
 80032a6:	e000      	b.n	80032aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80032a8:	2302      	movs	r3, #2
  }
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	00100002 	.word	0x00100002
 80032b8:	ffff0000 	.word	0xffff0000

080032bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b088      	sub	sp, #32
 80032c0:	af02      	add	r7, sp, #8
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	4608      	mov	r0, r1
 80032c6:	4611      	mov	r1, r2
 80032c8:	461a      	mov	r2, r3
 80032ca:	4603      	mov	r3, r0
 80032cc:	817b      	strh	r3, [r7, #10]
 80032ce:	460b      	mov	r3, r1
 80032d0:	813b      	strh	r3, [r7, #8]
 80032d2:	4613      	mov	r3, r2
 80032d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 f878 	bl	80033e8 <I2C_WaitOnFlagUntilTimeout>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00d      	beq.n	800331a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800330c:	d103      	bne.n	8003316 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003314:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e05f      	b.n	80033da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800331a:	897b      	ldrh	r3, [r7, #10]
 800331c:	b2db      	uxtb	r3, r3
 800331e:	461a      	mov	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003328:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	6a3a      	ldr	r2, [r7, #32]
 800332e:	492d      	ldr	r1, [pc, #180]	; (80033e4 <I2C_RequestMemoryWrite+0x128>)
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 f8b0 	bl	8003496 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e04c      	b.n	80033da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003358:	6a39      	ldr	r1, [r7, #32]
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 f91a 	bl	8003594 <I2C_WaitOnTXEFlagUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00d      	beq.n	8003382 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	2b04      	cmp	r3, #4
 800336c:	d107      	bne.n	800337e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800337c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e02b      	b.n	80033da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003382:	88fb      	ldrh	r3, [r7, #6]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d105      	bne.n	8003394 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003388:	893b      	ldrh	r3, [r7, #8]
 800338a:	b2da      	uxtb	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	611a      	str	r2, [r3, #16]
 8003392:	e021      	b.n	80033d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003394:	893b      	ldrh	r3, [r7, #8]
 8003396:	0a1b      	lsrs	r3, r3, #8
 8003398:	b29b      	uxth	r3, r3
 800339a:	b2da      	uxtb	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a4:	6a39      	ldr	r1, [r7, #32]
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f8f4 	bl	8003594 <I2C_WaitOnTXEFlagUntilTimeout>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00d      	beq.n	80033ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d107      	bne.n	80033ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e005      	b.n	80033da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033ce:	893b      	ldrh	r3, [r7, #8]
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	00010002 	.word	0x00010002

080033e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	603b      	str	r3, [r7, #0]
 80033f4:	4613      	mov	r3, r2
 80033f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033f8:	e025      	b.n	8003446 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003400:	d021      	beq.n	8003446 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003402:	f7ff f865 	bl	80024d0 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d302      	bcc.n	8003418 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d116      	bne.n	8003446 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2220      	movs	r2, #32
 8003422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	f043 0220 	orr.w	r2, r3, #32
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e023      	b.n	800348e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	0c1b      	lsrs	r3, r3, #16
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b01      	cmp	r3, #1
 800344e:	d10d      	bne.n	800346c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	43da      	mvns	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	4013      	ands	r3, r2
 800345c:	b29b      	uxth	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	bf0c      	ite	eq
 8003462:	2301      	moveq	r3, #1
 8003464:	2300      	movne	r3, #0
 8003466:	b2db      	uxtb	r3, r3
 8003468:	461a      	mov	r2, r3
 800346a:	e00c      	b.n	8003486 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	43da      	mvns	r2, r3
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	4013      	ands	r3, r2
 8003478:	b29b      	uxth	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	bf0c      	ite	eq
 800347e:	2301      	moveq	r3, #1
 8003480:	2300      	movne	r3, #0
 8003482:	b2db      	uxtb	r3, r3
 8003484:	461a      	mov	r2, r3
 8003486:	79fb      	ldrb	r3, [r7, #7]
 8003488:	429a      	cmp	r2, r3
 800348a:	d0b6      	beq.n	80033fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b084      	sub	sp, #16
 800349a:	af00      	add	r7, sp, #0
 800349c:	60f8      	str	r0, [r7, #12]
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	607a      	str	r2, [r7, #4]
 80034a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034a4:	e051      	b.n	800354a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b4:	d123      	bne.n	80034fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2220      	movs	r2, #32
 80034da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	f043 0204 	orr.w	r2, r3, #4
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e046      	b.n	800358c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003504:	d021      	beq.n	800354a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003506:	f7fe ffe3 	bl	80024d0 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	429a      	cmp	r2, r3
 8003514:	d302      	bcc.n	800351c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d116      	bne.n	800354a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2220      	movs	r2, #32
 8003526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	f043 0220 	orr.w	r2, r3, #32
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e020      	b.n	800358c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	0c1b      	lsrs	r3, r3, #16
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b01      	cmp	r3, #1
 8003552:	d10c      	bne.n	800356e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	43da      	mvns	r2, r3
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	4013      	ands	r3, r2
 8003560:	b29b      	uxth	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	bf14      	ite	ne
 8003566:	2301      	movne	r3, #1
 8003568:	2300      	moveq	r3, #0
 800356a:	b2db      	uxtb	r3, r3
 800356c:	e00b      	b.n	8003586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	43da      	mvns	r2, r3
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	4013      	ands	r3, r2
 800357a:	b29b      	uxth	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	bf14      	ite	ne
 8003580:	2301      	movne	r3, #1
 8003582:	2300      	moveq	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d18d      	bne.n	80034a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035a0:	e02d      	b.n	80035fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 f878 	bl	8003698 <I2C_IsAcknowledgeFailed>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e02d      	b.n	800360e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b8:	d021      	beq.n	80035fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ba:	f7fe ff89 	bl	80024d0 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d302      	bcc.n	80035d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d116      	bne.n	80035fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2220      	movs	r2, #32
 80035da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	f043 0220 	orr.w	r2, r3, #32
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e007      	b.n	800360e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003608:	2b80      	cmp	r3, #128	; 0x80
 800360a:	d1ca      	bne.n	80035a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b084      	sub	sp, #16
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003622:	e02d      	b.n	8003680 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 f837 	bl	8003698 <I2C_IsAcknowledgeFailed>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e02d      	b.n	8003690 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363a:	d021      	beq.n	8003680 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800363c:	f7fe ff48 	bl	80024d0 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	429a      	cmp	r2, r3
 800364a:	d302      	bcc.n	8003652 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d116      	bne.n	8003680 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	f043 0220 	orr.w	r2, r3, #32
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e007      	b.n	8003690 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	f003 0304 	and.w	r3, r3, #4
 800368a:	2b04      	cmp	r3, #4
 800368c:	d1ca      	bne.n	8003624 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ae:	d11b      	bne.n	80036e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	f043 0204 	orr.w	r2, r3, #4
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e000      	b.n	80036ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
	...

080036f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e267      	b.n	8003bda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d075      	beq.n	8003802 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003716:	4b88      	ldr	r3, [pc, #544]	; (8003938 <HAL_RCC_OscConfig+0x240>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 030c 	and.w	r3, r3, #12
 800371e:	2b04      	cmp	r3, #4
 8003720:	d00c      	beq.n	800373c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003722:	4b85      	ldr	r3, [pc, #532]	; (8003938 <HAL_RCC_OscConfig+0x240>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800372a:	2b08      	cmp	r3, #8
 800372c:	d112      	bne.n	8003754 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800372e:	4b82      	ldr	r3, [pc, #520]	; (8003938 <HAL_RCC_OscConfig+0x240>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003736:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800373a:	d10b      	bne.n	8003754 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800373c:	4b7e      	ldr	r3, [pc, #504]	; (8003938 <HAL_RCC_OscConfig+0x240>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d05b      	beq.n	8003800 <HAL_RCC_OscConfig+0x108>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d157      	bne.n	8003800 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e242      	b.n	8003bda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800375c:	d106      	bne.n	800376c <HAL_RCC_OscConfig+0x74>
 800375e:	4b76      	ldr	r3, [pc, #472]	; (8003938 <HAL_RCC_OscConfig+0x240>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a75      	ldr	r2, [pc, #468]	; (8003938 <HAL_RCC_OscConfig+0x240>)
 8003764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003768:	6013      	str	r3, [r2, #0]
 800376a:	e01d      	b.n	80037a8 <HAL_RCC_OscConfig+0xb0>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003774:	d10c      	bne.n	8003790 <HAL_RCC_OscConfig+0x98>
 8003776:	4b70      	ldr	r3, [pc, #448]	; (8003938 <HAL_RCC_OscConfig+0x240>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a6f      	ldr	r2, [pc, #444]	; (8003938 <HAL_RCC_OscConfig+0x240>)
 800377c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	4b6d      	ldr	r3, [pc, #436]	; (8003938 <HAL_RCC_OscConfig+0x240>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a6c      	ldr	r2, [pc, #432]	; (8003938 <HAL_RCC_OscConfig+0x240>)
 8003788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	e00b      	b.n	80037a8 <HAL_RCC_OscConfig+0xb0>
 8003790:	4b69      	ldr	r3, [pc, #420]	; (8003938 <HAL_RCC_OscConfig+0x240>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a68      	ldr	r2, [pc, #416]	; (8003938 <HAL_RCC_OscConfig+0x240>)
 8003796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800379a:	6013      	str	r3, [r2, #0]
 800379c:	4b66      	ldr	r3, [pc, #408]	; (8003938 <HAL_RCC_OscConfig+0x240>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a65      	ldr	r2, [pc, #404]	; (8003938 <HAL_RCC_OscConfig+0x240>)
 80037a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d013      	beq.n	80037d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b0:	f7fe fe8e 	bl	80024d0 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037b8:	f7fe fe8a 	bl	80024d0 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b64      	cmp	r3, #100	; 0x64
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e207      	b.n	8003bda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ca:	4b5b      	ldr	r3, [pc, #364]	; (8003938 <HAL_RCC_OscConfig+0x240>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0f0      	beq.n	80037b8 <HAL_RCC_OscConfig+0xc0>
 80037d6:	e014      	b.n	8003802 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d8:	f7fe fe7a 	bl	80024d0 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037e0:	f7fe fe76 	bl	80024d0 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b64      	cmp	r3, #100	; 0x64
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e1f3      	b.n	8003bda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037f2:	4b51      	ldr	r3, [pc, #324]	; (8003938 <HAL_RCC_OscConfig+0x240>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1f0      	bne.n	80037e0 <HAL_RCC_OscConfig+0xe8>
 80037fe:	e000      	b.n	8003802 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d063      	beq.n	80038d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800380e:	4b4a      	ldr	r3, [pc, #296]	; (8003938 <HAL_RCC_OscConfig+0x240>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 030c 	and.w	r3, r3, #12
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00b      	beq.n	8003832 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800381a:	4b47      	ldr	r3, [pc, #284]	; (8003938 <HAL_RCC_OscConfig+0x240>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003822:	2b08      	cmp	r3, #8
 8003824:	d11c      	bne.n	8003860 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003826:	4b44      	ldr	r3, [pc, #272]	; (8003938 <HAL_RCC_OscConfig+0x240>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d116      	bne.n	8003860 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003832:	4b41      	ldr	r3, [pc, #260]	; (8003938 <HAL_RCC_OscConfig+0x240>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d005      	beq.n	800384a <HAL_RCC_OscConfig+0x152>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d001      	beq.n	800384a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e1c7      	b.n	8003bda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800384a:	4b3b      	ldr	r3, [pc, #236]	; (8003938 <HAL_RCC_OscConfig+0x240>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	4937      	ldr	r1, [pc, #220]	; (8003938 <HAL_RCC_OscConfig+0x240>)
 800385a:	4313      	orrs	r3, r2
 800385c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800385e:	e03a      	b.n	80038d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d020      	beq.n	80038aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003868:	4b34      	ldr	r3, [pc, #208]	; (800393c <HAL_RCC_OscConfig+0x244>)
 800386a:	2201      	movs	r2, #1
 800386c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386e:	f7fe fe2f 	bl	80024d0 <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003874:	e008      	b.n	8003888 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003876:	f7fe fe2b 	bl	80024d0 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e1a8      	b.n	8003bda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003888:	4b2b      	ldr	r3, [pc, #172]	; (8003938 <HAL_RCC_OscConfig+0x240>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0f0      	beq.n	8003876 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003894:	4b28      	ldr	r3, [pc, #160]	; (8003938 <HAL_RCC_OscConfig+0x240>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	4925      	ldr	r1, [pc, #148]	; (8003938 <HAL_RCC_OscConfig+0x240>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	600b      	str	r3, [r1, #0]
 80038a8:	e015      	b.n	80038d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038aa:	4b24      	ldr	r3, [pc, #144]	; (800393c <HAL_RCC_OscConfig+0x244>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b0:	f7fe fe0e 	bl	80024d0 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038b8:	f7fe fe0a 	bl	80024d0 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e187      	b.n	8003bda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ca:	4b1b      	ldr	r3, [pc, #108]	; (8003938 <HAL_RCC_OscConfig+0x240>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1f0      	bne.n	80038b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0308 	and.w	r3, r3, #8
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d036      	beq.n	8003950 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d016      	beq.n	8003918 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ea:	4b15      	ldr	r3, [pc, #84]	; (8003940 <HAL_RCC_OscConfig+0x248>)
 80038ec:	2201      	movs	r2, #1
 80038ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f0:	f7fe fdee 	bl	80024d0 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038f8:	f7fe fdea 	bl	80024d0 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e167      	b.n	8003bda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800390a:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <HAL_RCC_OscConfig+0x240>)
 800390c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0f0      	beq.n	80038f8 <HAL_RCC_OscConfig+0x200>
 8003916:	e01b      	b.n	8003950 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003918:	4b09      	ldr	r3, [pc, #36]	; (8003940 <HAL_RCC_OscConfig+0x248>)
 800391a:	2200      	movs	r2, #0
 800391c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800391e:	f7fe fdd7 	bl	80024d0 <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003924:	e00e      	b.n	8003944 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003926:	f7fe fdd3 	bl	80024d0 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d907      	bls.n	8003944 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e150      	b.n	8003bda <HAL_RCC_OscConfig+0x4e2>
 8003938:	40023800 	.word	0x40023800
 800393c:	42470000 	.word	0x42470000
 8003940:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003944:	4b88      	ldr	r3, [pc, #544]	; (8003b68 <HAL_RCC_OscConfig+0x470>)
 8003946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1ea      	bne.n	8003926 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 8097 	beq.w	8003a8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800395e:	2300      	movs	r3, #0
 8003960:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003962:	4b81      	ldr	r3, [pc, #516]	; (8003b68 <HAL_RCC_OscConfig+0x470>)
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10f      	bne.n	800398e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800396e:	2300      	movs	r3, #0
 8003970:	60bb      	str	r3, [r7, #8]
 8003972:	4b7d      	ldr	r3, [pc, #500]	; (8003b68 <HAL_RCC_OscConfig+0x470>)
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	4a7c      	ldr	r2, [pc, #496]	; (8003b68 <HAL_RCC_OscConfig+0x470>)
 8003978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800397c:	6413      	str	r3, [r2, #64]	; 0x40
 800397e:	4b7a      	ldr	r3, [pc, #488]	; (8003b68 <HAL_RCC_OscConfig+0x470>)
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003986:	60bb      	str	r3, [r7, #8]
 8003988:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800398a:	2301      	movs	r3, #1
 800398c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800398e:	4b77      	ldr	r3, [pc, #476]	; (8003b6c <HAL_RCC_OscConfig+0x474>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003996:	2b00      	cmp	r3, #0
 8003998:	d118      	bne.n	80039cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800399a:	4b74      	ldr	r3, [pc, #464]	; (8003b6c <HAL_RCC_OscConfig+0x474>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a73      	ldr	r2, [pc, #460]	; (8003b6c <HAL_RCC_OscConfig+0x474>)
 80039a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039a6:	f7fe fd93 	bl	80024d0 <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ae:	f7fe fd8f 	bl	80024d0 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e10c      	b.n	8003bda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c0:	4b6a      	ldr	r3, [pc, #424]	; (8003b6c <HAL_RCC_OscConfig+0x474>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d0f0      	beq.n	80039ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d106      	bne.n	80039e2 <HAL_RCC_OscConfig+0x2ea>
 80039d4:	4b64      	ldr	r3, [pc, #400]	; (8003b68 <HAL_RCC_OscConfig+0x470>)
 80039d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d8:	4a63      	ldr	r2, [pc, #396]	; (8003b68 <HAL_RCC_OscConfig+0x470>)
 80039da:	f043 0301 	orr.w	r3, r3, #1
 80039de:	6713      	str	r3, [r2, #112]	; 0x70
 80039e0:	e01c      	b.n	8003a1c <HAL_RCC_OscConfig+0x324>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	2b05      	cmp	r3, #5
 80039e8:	d10c      	bne.n	8003a04 <HAL_RCC_OscConfig+0x30c>
 80039ea:	4b5f      	ldr	r3, [pc, #380]	; (8003b68 <HAL_RCC_OscConfig+0x470>)
 80039ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ee:	4a5e      	ldr	r2, [pc, #376]	; (8003b68 <HAL_RCC_OscConfig+0x470>)
 80039f0:	f043 0304 	orr.w	r3, r3, #4
 80039f4:	6713      	str	r3, [r2, #112]	; 0x70
 80039f6:	4b5c      	ldr	r3, [pc, #368]	; (8003b68 <HAL_RCC_OscConfig+0x470>)
 80039f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fa:	4a5b      	ldr	r2, [pc, #364]	; (8003b68 <HAL_RCC_OscConfig+0x470>)
 80039fc:	f043 0301 	orr.w	r3, r3, #1
 8003a00:	6713      	str	r3, [r2, #112]	; 0x70
 8003a02:	e00b      	b.n	8003a1c <HAL_RCC_OscConfig+0x324>
 8003a04:	4b58      	ldr	r3, [pc, #352]	; (8003b68 <HAL_RCC_OscConfig+0x470>)
 8003a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a08:	4a57      	ldr	r2, [pc, #348]	; (8003b68 <HAL_RCC_OscConfig+0x470>)
 8003a0a:	f023 0301 	bic.w	r3, r3, #1
 8003a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a10:	4b55      	ldr	r3, [pc, #340]	; (8003b68 <HAL_RCC_OscConfig+0x470>)
 8003a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a14:	4a54      	ldr	r2, [pc, #336]	; (8003b68 <HAL_RCC_OscConfig+0x470>)
 8003a16:	f023 0304 	bic.w	r3, r3, #4
 8003a1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d015      	beq.n	8003a50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a24:	f7fe fd54 	bl	80024d0 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a2a:	e00a      	b.n	8003a42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a2c:	f7fe fd50 	bl	80024d0 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e0cb      	b.n	8003bda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a42:	4b49      	ldr	r3, [pc, #292]	; (8003b68 <HAL_RCC_OscConfig+0x470>)
 8003a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0ee      	beq.n	8003a2c <HAL_RCC_OscConfig+0x334>
 8003a4e:	e014      	b.n	8003a7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a50:	f7fe fd3e 	bl	80024d0 <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a56:	e00a      	b.n	8003a6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a58:	f7fe fd3a 	bl	80024d0 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e0b5      	b.n	8003bda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a6e:	4b3e      	ldr	r3, [pc, #248]	; (8003b68 <HAL_RCC_OscConfig+0x470>)
 8003a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1ee      	bne.n	8003a58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a7a:	7dfb      	ldrb	r3, [r7, #23]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d105      	bne.n	8003a8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a80:	4b39      	ldr	r3, [pc, #228]	; (8003b68 <HAL_RCC_OscConfig+0x470>)
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	4a38      	ldr	r2, [pc, #224]	; (8003b68 <HAL_RCC_OscConfig+0x470>)
 8003a86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 80a1 	beq.w	8003bd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a96:	4b34      	ldr	r3, [pc, #208]	; (8003b68 <HAL_RCC_OscConfig+0x470>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 030c 	and.w	r3, r3, #12
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	d05c      	beq.n	8003b5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d141      	bne.n	8003b2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aaa:	4b31      	ldr	r3, [pc, #196]	; (8003b70 <HAL_RCC_OscConfig+0x478>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab0:	f7fe fd0e 	bl	80024d0 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ab8:	f7fe fd0a 	bl	80024d0 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e087      	b.n	8003bda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aca:	4b27      	ldr	r3, [pc, #156]	; (8003b68 <HAL_RCC_OscConfig+0x470>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1f0      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69da      	ldr	r2, [r3, #28]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	019b      	lsls	r3, r3, #6
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aec:	085b      	lsrs	r3, r3, #1
 8003aee:	3b01      	subs	r3, #1
 8003af0:	041b      	lsls	r3, r3, #16
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af8:	061b      	lsls	r3, r3, #24
 8003afa:	491b      	ldr	r1, [pc, #108]	; (8003b68 <HAL_RCC_OscConfig+0x470>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b00:	4b1b      	ldr	r3, [pc, #108]	; (8003b70 <HAL_RCC_OscConfig+0x478>)
 8003b02:	2201      	movs	r2, #1
 8003b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b06:	f7fe fce3 	bl	80024d0 <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b0c:	e008      	b.n	8003b20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b0e:	f7fe fcdf 	bl	80024d0 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e05c      	b.n	8003bda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b20:	4b11      	ldr	r3, [pc, #68]	; (8003b68 <HAL_RCC_OscConfig+0x470>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0f0      	beq.n	8003b0e <HAL_RCC_OscConfig+0x416>
 8003b2c:	e054      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b2e:	4b10      	ldr	r3, [pc, #64]	; (8003b70 <HAL_RCC_OscConfig+0x478>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b34:	f7fe fccc 	bl	80024d0 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b3c:	f7fe fcc8 	bl	80024d0 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e045      	b.n	8003bda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b4e:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <HAL_RCC_OscConfig+0x470>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1f0      	bne.n	8003b3c <HAL_RCC_OscConfig+0x444>
 8003b5a:	e03d      	b.n	8003bd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d107      	bne.n	8003b74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e038      	b.n	8003bda <HAL_RCC_OscConfig+0x4e2>
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	40007000 	.word	0x40007000
 8003b70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b74:	4b1b      	ldr	r3, [pc, #108]	; (8003be4 <HAL_RCC_OscConfig+0x4ec>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d028      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d121      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d11a      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003baa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d111      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bba:	085b      	lsrs	r3, r3, #1
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d107      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d001      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	40023800 	.word	0x40023800

08003be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e0cc      	b.n	8003d96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bfc:	4b68      	ldr	r3, [pc, #416]	; (8003da0 <HAL_RCC_ClockConfig+0x1b8>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d90c      	bls.n	8003c24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c0a:	4b65      	ldr	r3, [pc, #404]	; (8003da0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c12:	4b63      	ldr	r3, [pc, #396]	; (8003da0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0307 	and.w	r3, r3, #7
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d001      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e0b8      	b.n	8003d96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d020      	beq.n	8003c72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d005      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c3c:	4b59      	ldr	r3, [pc, #356]	; (8003da4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	4a58      	ldr	r2, [pc, #352]	; (8003da4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0308 	and.w	r3, r3, #8
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d005      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c54:	4b53      	ldr	r3, [pc, #332]	; (8003da4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	4a52      	ldr	r2, [pc, #328]	; (8003da4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c60:	4b50      	ldr	r3, [pc, #320]	; (8003da4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	494d      	ldr	r1, [pc, #308]	; (8003da4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d044      	beq.n	8003d08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d107      	bne.n	8003c96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c86:	4b47      	ldr	r3, [pc, #284]	; (8003da4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d119      	bne.n	8003cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e07f      	b.n	8003d96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d003      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ca2:	2b03      	cmp	r3, #3
 8003ca4:	d107      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ca6:	4b3f      	ldr	r3, [pc, #252]	; (8003da4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d109      	bne.n	8003cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e06f      	b.n	8003d96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb6:	4b3b      	ldr	r3, [pc, #236]	; (8003da4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e067      	b.n	8003d96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cc6:	4b37      	ldr	r3, [pc, #220]	; (8003da4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f023 0203 	bic.w	r2, r3, #3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	4934      	ldr	r1, [pc, #208]	; (8003da4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cd8:	f7fe fbfa 	bl	80024d0 <HAL_GetTick>
 8003cdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cde:	e00a      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce0:	f7fe fbf6 	bl	80024d0 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e04f      	b.n	8003d96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cf6:	4b2b      	ldr	r3, [pc, #172]	; (8003da4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 020c 	and.w	r2, r3, #12
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d1eb      	bne.n	8003ce0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d08:	4b25      	ldr	r3, [pc, #148]	; (8003da0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d20c      	bcs.n	8003d30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d16:	4b22      	ldr	r3, [pc, #136]	; (8003da0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d1e:	4b20      	ldr	r3, [pc, #128]	; (8003da0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d001      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e032      	b.n	8003d96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d008      	beq.n	8003d4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d3c:	4b19      	ldr	r3, [pc, #100]	; (8003da4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	4916      	ldr	r1, [pc, #88]	; (8003da4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0308 	and.w	r3, r3, #8
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d009      	beq.n	8003d6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d5a:	4b12      	ldr	r3, [pc, #72]	; (8003da4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	490e      	ldr	r1, [pc, #56]	; (8003da4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d6e:	f000 f821 	bl	8003db4 <HAL_RCC_GetSysClockFreq>
 8003d72:	4602      	mov	r2, r0
 8003d74:	4b0b      	ldr	r3, [pc, #44]	; (8003da4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	091b      	lsrs	r3, r3, #4
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	490a      	ldr	r1, [pc, #40]	; (8003da8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d80:	5ccb      	ldrb	r3, [r1, r3]
 8003d82:	fa22 f303 	lsr.w	r3, r2, r3
 8003d86:	4a09      	ldr	r2, [pc, #36]	; (8003dac <HAL_RCC_ClockConfig+0x1c4>)
 8003d88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d8a:	4b09      	ldr	r3, [pc, #36]	; (8003db0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fe fb5a 	bl	8002448 <HAL_InitTick>

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40023c00 	.word	0x40023c00
 8003da4:	40023800 	.word	0x40023800
 8003da8:	0800a418 	.word	0x0800a418
 8003dac:	20000424 	.word	0x20000424
 8003db0:	20000428 	.word	0x20000428

08003db4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003db8:	b090      	sub	sp, #64	; 0x40
 8003dba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	637b      	str	r3, [r7, #52]	; 0x34
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dcc:	4b59      	ldr	r3, [pc, #356]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 030c 	and.w	r3, r3, #12
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d00d      	beq.n	8003df4 <HAL_RCC_GetSysClockFreq+0x40>
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	f200 80a1 	bhi.w	8003f20 <HAL_RCC_GetSysClockFreq+0x16c>
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <HAL_RCC_GetSysClockFreq+0x34>
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	d003      	beq.n	8003dee <HAL_RCC_GetSysClockFreq+0x3a>
 8003de6:	e09b      	b.n	8003f20 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003de8:	4b53      	ldr	r3, [pc, #332]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x184>)
 8003dea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003dec:	e09b      	b.n	8003f26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dee:	4b53      	ldr	r3, [pc, #332]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x188>)
 8003df0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003df2:	e098      	b.n	8003f26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003df4:	4b4f      	ldr	r3, [pc, #316]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x180>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dfc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dfe:	4b4d      	ldr	r3, [pc, #308]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d028      	beq.n	8003e5c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e0a:	4b4a      	ldr	r3, [pc, #296]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	099b      	lsrs	r3, r3, #6
 8003e10:	2200      	movs	r2, #0
 8003e12:	623b      	str	r3, [r7, #32]
 8003e14:	627a      	str	r2, [r7, #36]	; 0x24
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	4b47      	ldr	r3, [pc, #284]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x188>)
 8003e20:	fb03 f201 	mul.w	r2, r3, r1
 8003e24:	2300      	movs	r3, #0
 8003e26:	fb00 f303 	mul.w	r3, r0, r3
 8003e2a:	4413      	add	r3, r2
 8003e2c:	4a43      	ldr	r2, [pc, #268]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x188>)
 8003e2e:	fba0 1202 	umull	r1, r2, r0, r2
 8003e32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e34:	460a      	mov	r2, r1
 8003e36:	62ba      	str	r2, [r7, #40]	; 0x28
 8003e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e3a:	4413      	add	r3, r2
 8003e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e40:	2200      	movs	r2, #0
 8003e42:	61bb      	str	r3, [r7, #24]
 8003e44:	61fa      	str	r2, [r7, #28]
 8003e46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e4a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003e4e:	f7fc ff03 	bl	8000c58 <__aeabi_uldivmod>
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	4613      	mov	r3, r2
 8003e58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e5a:	e053      	b.n	8003f04 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e5c:	4b35      	ldr	r3, [pc, #212]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	099b      	lsrs	r3, r3, #6
 8003e62:	2200      	movs	r2, #0
 8003e64:	613b      	str	r3, [r7, #16]
 8003e66:	617a      	str	r2, [r7, #20]
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e6e:	f04f 0b00 	mov.w	fp, #0
 8003e72:	4652      	mov	r2, sl
 8003e74:	465b      	mov	r3, fp
 8003e76:	f04f 0000 	mov.w	r0, #0
 8003e7a:	f04f 0100 	mov.w	r1, #0
 8003e7e:	0159      	lsls	r1, r3, #5
 8003e80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e84:	0150      	lsls	r0, r2, #5
 8003e86:	4602      	mov	r2, r0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	ebb2 080a 	subs.w	r8, r2, sl
 8003e8e:	eb63 090b 	sbc.w	r9, r3, fp
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	f04f 0300 	mov.w	r3, #0
 8003e9a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e9e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003ea2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ea6:	ebb2 0408 	subs.w	r4, r2, r8
 8003eaa:	eb63 0509 	sbc.w	r5, r3, r9
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	f04f 0300 	mov.w	r3, #0
 8003eb6:	00eb      	lsls	r3, r5, #3
 8003eb8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ebc:	00e2      	lsls	r2, r4, #3
 8003ebe:	4614      	mov	r4, r2
 8003ec0:	461d      	mov	r5, r3
 8003ec2:	eb14 030a 	adds.w	r3, r4, sl
 8003ec6:	603b      	str	r3, [r7, #0]
 8003ec8:	eb45 030b 	adc.w	r3, r5, fp
 8003ecc:	607b      	str	r3, [r7, #4]
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	f04f 0300 	mov.w	r3, #0
 8003ed6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003eda:	4629      	mov	r1, r5
 8003edc:	028b      	lsls	r3, r1, #10
 8003ede:	4621      	mov	r1, r4
 8003ee0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ee4:	4621      	mov	r1, r4
 8003ee6:	028a      	lsls	r2, r1, #10
 8003ee8:	4610      	mov	r0, r2
 8003eea:	4619      	mov	r1, r3
 8003eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eee:	2200      	movs	r2, #0
 8003ef0:	60bb      	str	r3, [r7, #8]
 8003ef2:	60fa      	str	r2, [r7, #12]
 8003ef4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ef8:	f7fc feae 	bl	8000c58 <__aeabi_uldivmod>
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4613      	mov	r3, r2
 8003f02:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f04:	4b0b      	ldr	r3, [pc, #44]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	0c1b      	lsrs	r3, r3, #16
 8003f0a:	f003 0303 	and.w	r3, r3, #3
 8003f0e:	3301      	adds	r3, #1
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003f14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f1e:	e002      	b.n	8003f26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f20:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f22:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3740      	adds	r7, #64	; 0x40
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f32:	bf00      	nop
 8003f34:	40023800 	.word	0x40023800
 8003f38:	00f42400 	.word	0x00f42400
 8003f3c:	017d7840 	.word	0x017d7840

08003f40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f44:	4b03      	ldr	r3, [pc, #12]	; (8003f54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f46:	681b      	ldr	r3, [r3, #0]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	20000424 	.word	0x20000424

08003f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f5c:	f7ff fff0 	bl	8003f40 <HAL_RCC_GetHCLKFreq>
 8003f60:	4602      	mov	r2, r0
 8003f62:	4b05      	ldr	r3, [pc, #20]	; (8003f78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	0a9b      	lsrs	r3, r3, #10
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	4903      	ldr	r1, [pc, #12]	; (8003f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f6e:	5ccb      	ldrb	r3, [r1, r3]
 8003f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	0800a428 	.word	0x0800a428

08003f80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f84:	f7ff ffdc 	bl	8003f40 <HAL_RCC_GetHCLKFreq>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	4b05      	ldr	r3, [pc, #20]	; (8003fa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	0b5b      	lsrs	r3, r3, #13
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	4903      	ldr	r1, [pc, #12]	; (8003fa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f96:	5ccb      	ldrb	r3, [r1, r3]
 8003f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	0800a428 	.word	0x0800a428

08003fa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e041      	b.n	800403e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d106      	bne.n	8003fd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7fe f8d4 	bl	800217c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	f000 fc5e 	bl	80048a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
	...

08004048 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b01      	cmp	r3, #1
 800405a:	d001      	beq.n	8004060 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e044      	b.n	80040ea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0201 	orr.w	r2, r2, #1
 8004076:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a1e      	ldr	r2, [pc, #120]	; (80040f8 <HAL_TIM_Base_Start_IT+0xb0>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d018      	beq.n	80040b4 <HAL_TIM_Base_Start_IT+0x6c>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800408a:	d013      	beq.n	80040b4 <HAL_TIM_Base_Start_IT+0x6c>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a1a      	ldr	r2, [pc, #104]	; (80040fc <HAL_TIM_Base_Start_IT+0xb4>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d00e      	beq.n	80040b4 <HAL_TIM_Base_Start_IT+0x6c>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a19      	ldr	r2, [pc, #100]	; (8004100 <HAL_TIM_Base_Start_IT+0xb8>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d009      	beq.n	80040b4 <HAL_TIM_Base_Start_IT+0x6c>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a17      	ldr	r2, [pc, #92]	; (8004104 <HAL_TIM_Base_Start_IT+0xbc>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d004      	beq.n	80040b4 <HAL_TIM_Base_Start_IT+0x6c>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a16      	ldr	r2, [pc, #88]	; (8004108 <HAL_TIM_Base_Start_IT+0xc0>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d111      	bne.n	80040d8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2b06      	cmp	r3, #6
 80040c4:	d010      	beq.n	80040e8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f042 0201 	orr.w	r2, r2, #1
 80040d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d6:	e007      	b.n	80040e8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0201 	orr.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	40010000 	.word	0x40010000
 80040fc:	40000400 	.word	0x40000400
 8004100:	40000800 	.word	0x40000800
 8004104:	40000c00 	.word	0x40000c00
 8004108:	40014000 	.word	0x40014000

0800410c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e041      	b.n	80041a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d106      	bne.n	8004138 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f839 	bl	80041aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3304      	adds	r3, #4
 8004148:	4619      	mov	r1, r3
 800414a:	4610      	mov	r0, r2
 800414c:	f000 fbac 	bl	80048a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
	...

080041c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d109      	bne.n	80041e4 <HAL_TIM_PWM_Start+0x24>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b01      	cmp	r3, #1
 80041da:	bf14      	ite	ne
 80041dc:	2301      	movne	r3, #1
 80041de:	2300      	moveq	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	e022      	b.n	800422a <HAL_TIM_PWM_Start+0x6a>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d109      	bne.n	80041fe <HAL_TIM_PWM_Start+0x3e>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	bf14      	ite	ne
 80041f6:	2301      	movne	r3, #1
 80041f8:	2300      	moveq	r3, #0
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	e015      	b.n	800422a <HAL_TIM_PWM_Start+0x6a>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b08      	cmp	r3, #8
 8004202:	d109      	bne.n	8004218 <HAL_TIM_PWM_Start+0x58>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b01      	cmp	r3, #1
 800420e:	bf14      	ite	ne
 8004210:	2301      	movne	r3, #1
 8004212:	2300      	moveq	r3, #0
 8004214:	b2db      	uxtb	r3, r3
 8004216:	e008      	b.n	800422a <HAL_TIM_PWM_Start+0x6a>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b01      	cmp	r3, #1
 8004222:	bf14      	ite	ne
 8004224:	2301      	movne	r3, #1
 8004226:	2300      	moveq	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e068      	b.n	8004304 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d104      	bne.n	8004242 <HAL_TIM_PWM_Start+0x82>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004240:	e013      	b.n	800426a <HAL_TIM_PWM_Start+0xaa>
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b04      	cmp	r3, #4
 8004246:	d104      	bne.n	8004252 <HAL_TIM_PWM_Start+0x92>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004250:	e00b      	b.n	800426a <HAL_TIM_PWM_Start+0xaa>
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b08      	cmp	r3, #8
 8004256:	d104      	bne.n	8004262 <HAL_TIM_PWM_Start+0xa2>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004260:	e003      	b.n	800426a <HAL_TIM_PWM_Start+0xaa>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2202      	movs	r2, #2
 8004266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2201      	movs	r2, #1
 8004270:	6839      	ldr	r1, [r7, #0]
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fdbe 	bl	8004df4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a23      	ldr	r2, [pc, #140]	; (800430c <HAL_TIM_PWM_Start+0x14c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d107      	bne.n	8004292 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004290:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a1d      	ldr	r2, [pc, #116]	; (800430c <HAL_TIM_PWM_Start+0x14c>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d018      	beq.n	80042ce <HAL_TIM_PWM_Start+0x10e>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a4:	d013      	beq.n	80042ce <HAL_TIM_PWM_Start+0x10e>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a19      	ldr	r2, [pc, #100]	; (8004310 <HAL_TIM_PWM_Start+0x150>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d00e      	beq.n	80042ce <HAL_TIM_PWM_Start+0x10e>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a17      	ldr	r2, [pc, #92]	; (8004314 <HAL_TIM_PWM_Start+0x154>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d009      	beq.n	80042ce <HAL_TIM_PWM_Start+0x10e>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a16      	ldr	r2, [pc, #88]	; (8004318 <HAL_TIM_PWM_Start+0x158>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d004      	beq.n	80042ce <HAL_TIM_PWM_Start+0x10e>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a14      	ldr	r2, [pc, #80]	; (800431c <HAL_TIM_PWM_Start+0x15c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d111      	bne.n	80042f2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2b06      	cmp	r3, #6
 80042de:	d010      	beq.n	8004302 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0201 	orr.w	r2, r2, #1
 80042ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f0:	e007      	b.n	8004302 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f042 0201 	orr.w	r2, r2, #1
 8004300:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40010000 	.word	0x40010000
 8004310:	40000400 	.word	0x40000400
 8004314:	40000800 	.word	0x40000800
 8004318:	40000c00 	.word	0x40000c00
 800431c:	40014000 	.word	0x40014000

08004320 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b02      	cmp	r3, #2
 8004334:	d122      	bne.n	800437c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b02      	cmp	r3, #2
 8004342:	d11b      	bne.n	800437c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f06f 0202 	mvn.w	r2, #2
 800434c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	f003 0303 	and.w	r3, r3, #3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 fa81 	bl	800486a <HAL_TIM_IC_CaptureCallback>
 8004368:	e005      	b.n	8004376 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fa73 	bl	8004856 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 fa84 	bl	800487e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f003 0304 	and.w	r3, r3, #4
 8004386:	2b04      	cmp	r3, #4
 8004388:	d122      	bne.n	80043d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b04      	cmp	r3, #4
 8004396:	d11b      	bne.n	80043d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f06f 0204 	mvn.w	r2, #4
 80043a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2202      	movs	r2, #2
 80043a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 fa57 	bl	800486a <HAL_TIM_IC_CaptureCallback>
 80043bc:	e005      	b.n	80043ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 fa49 	bl	8004856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 fa5a 	bl	800487e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	f003 0308 	and.w	r3, r3, #8
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d122      	bne.n	8004424 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f003 0308 	and.w	r3, r3, #8
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d11b      	bne.n	8004424 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f06f 0208 	mvn.w	r2, #8
 80043f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2204      	movs	r2, #4
 80043fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	f003 0303 	and.w	r3, r3, #3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 fa2d 	bl	800486a <HAL_TIM_IC_CaptureCallback>
 8004410:	e005      	b.n	800441e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 fa1f 	bl	8004856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 fa30 	bl	800487e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	f003 0310 	and.w	r3, r3, #16
 800442e:	2b10      	cmp	r3, #16
 8004430:	d122      	bne.n	8004478 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f003 0310 	and.w	r3, r3, #16
 800443c:	2b10      	cmp	r3, #16
 800443e:	d11b      	bne.n	8004478 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f06f 0210 	mvn.w	r2, #16
 8004448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2208      	movs	r2, #8
 800444e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 fa03 	bl	800486a <HAL_TIM_IC_CaptureCallback>
 8004464:	e005      	b.n	8004472 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f9f5 	bl	8004856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 fa06 	bl	800487e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b01      	cmp	r3, #1
 8004484:	d10e      	bne.n	80044a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b01      	cmp	r3, #1
 8004492:	d107      	bne.n	80044a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f06f 0201 	mvn.w	r2, #1
 800449c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f9cf 	bl	8004842 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ae:	2b80      	cmp	r3, #128	; 0x80
 80044b0:	d10e      	bne.n	80044d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044bc:	2b80      	cmp	r3, #128	; 0x80
 80044be:	d107      	bne.n	80044d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 fd30 	bl	8004f30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044da:	2b40      	cmp	r3, #64	; 0x40
 80044dc:	d10e      	bne.n	80044fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e8:	2b40      	cmp	r3, #64	; 0x40
 80044ea:	d107      	bne.n	80044fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f9cb 	bl	8004892 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f003 0320 	and.w	r3, r3, #32
 8004506:	2b20      	cmp	r3, #32
 8004508:	d10e      	bne.n	8004528 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f003 0320 	and.w	r3, r3, #32
 8004514:	2b20      	cmp	r3, #32
 8004516:	d107      	bne.n	8004528 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f06f 0220 	mvn.w	r2, #32
 8004520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 fcfa 	bl	8004f1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004528:	bf00      	nop
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800453c:	2300      	movs	r3, #0
 800453e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800454a:	2302      	movs	r3, #2
 800454c:	e0ae      	b.n	80046ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b0c      	cmp	r3, #12
 800455a:	f200 809f 	bhi.w	800469c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800455e:	a201      	add	r2, pc, #4	; (adr r2, 8004564 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004564:	08004599 	.word	0x08004599
 8004568:	0800469d 	.word	0x0800469d
 800456c:	0800469d 	.word	0x0800469d
 8004570:	0800469d 	.word	0x0800469d
 8004574:	080045d9 	.word	0x080045d9
 8004578:	0800469d 	.word	0x0800469d
 800457c:	0800469d 	.word	0x0800469d
 8004580:	0800469d 	.word	0x0800469d
 8004584:	0800461b 	.word	0x0800461b
 8004588:	0800469d 	.word	0x0800469d
 800458c:	0800469d 	.word	0x0800469d
 8004590:	0800469d 	.word	0x0800469d
 8004594:	0800465b 	.word	0x0800465b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68b9      	ldr	r1, [r7, #8]
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 fa02 	bl	80049a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	699a      	ldr	r2, [r3, #24]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0208 	orr.w	r2, r2, #8
 80045b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	699a      	ldr	r2, [r3, #24]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0204 	bic.w	r2, r2, #4
 80045c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6999      	ldr	r1, [r3, #24]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	691a      	ldr	r2, [r3, #16]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	619a      	str	r2, [r3, #24]
      break;
 80045d6:	e064      	b.n	80046a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68b9      	ldr	r1, [r7, #8]
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 fa48 	bl	8004a74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699a      	ldr	r2, [r3, #24]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699a      	ldr	r2, [r3, #24]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004602:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6999      	ldr	r1, [r3, #24]
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	021a      	lsls	r2, r3, #8
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	619a      	str	r2, [r3, #24]
      break;
 8004618:	e043      	b.n	80046a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68b9      	ldr	r1, [r7, #8]
 8004620:	4618      	mov	r0, r3
 8004622:	f000 fa93 	bl	8004b4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69da      	ldr	r2, [r3, #28]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f042 0208 	orr.w	r2, r2, #8
 8004634:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	69da      	ldr	r2, [r3, #28]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0204 	bic.w	r2, r2, #4
 8004644:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	69d9      	ldr	r1, [r3, #28]
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	61da      	str	r2, [r3, #28]
      break;
 8004658:	e023      	b.n	80046a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68b9      	ldr	r1, [r7, #8]
 8004660:	4618      	mov	r0, r3
 8004662:	f000 fadd 	bl	8004c20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69da      	ldr	r2, [r3, #28]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004674:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69da      	ldr	r2, [r3, #28]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004684:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	69d9      	ldr	r1, [r3, #28]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	021a      	lsls	r2, r3, #8
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	61da      	str	r2, [r3, #28]
      break;
 800469a:	e002      	b.n	80046a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	75fb      	strb	r3, [r7, #23]
      break;
 80046a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3718      	adds	r7, #24
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046be:	2300      	movs	r3, #0
 80046c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d101      	bne.n	80046d0 <HAL_TIM_ConfigClockSource+0x1c>
 80046cc:	2302      	movs	r3, #2
 80046ce:	e0b4      	b.n	800483a <HAL_TIM_ConfigClockSource+0x186>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004708:	d03e      	beq.n	8004788 <HAL_TIM_ConfigClockSource+0xd4>
 800470a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800470e:	f200 8087 	bhi.w	8004820 <HAL_TIM_ConfigClockSource+0x16c>
 8004712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004716:	f000 8086 	beq.w	8004826 <HAL_TIM_ConfigClockSource+0x172>
 800471a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800471e:	d87f      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x16c>
 8004720:	2b70      	cmp	r3, #112	; 0x70
 8004722:	d01a      	beq.n	800475a <HAL_TIM_ConfigClockSource+0xa6>
 8004724:	2b70      	cmp	r3, #112	; 0x70
 8004726:	d87b      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x16c>
 8004728:	2b60      	cmp	r3, #96	; 0x60
 800472a:	d050      	beq.n	80047ce <HAL_TIM_ConfigClockSource+0x11a>
 800472c:	2b60      	cmp	r3, #96	; 0x60
 800472e:	d877      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x16c>
 8004730:	2b50      	cmp	r3, #80	; 0x50
 8004732:	d03c      	beq.n	80047ae <HAL_TIM_ConfigClockSource+0xfa>
 8004734:	2b50      	cmp	r3, #80	; 0x50
 8004736:	d873      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x16c>
 8004738:	2b40      	cmp	r3, #64	; 0x40
 800473a:	d058      	beq.n	80047ee <HAL_TIM_ConfigClockSource+0x13a>
 800473c:	2b40      	cmp	r3, #64	; 0x40
 800473e:	d86f      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x16c>
 8004740:	2b30      	cmp	r3, #48	; 0x30
 8004742:	d064      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x15a>
 8004744:	2b30      	cmp	r3, #48	; 0x30
 8004746:	d86b      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x16c>
 8004748:	2b20      	cmp	r3, #32
 800474a:	d060      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x15a>
 800474c:	2b20      	cmp	r3, #32
 800474e:	d867      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x16c>
 8004750:	2b00      	cmp	r3, #0
 8004752:	d05c      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x15a>
 8004754:	2b10      	cmp	r3, #16
 8004756:	d05a      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x15a>
 8004758:	e062      	b.n	8004820 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6818      	ldr	r0, [r3, #0]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	6899      	ldr	r1, [r3, #8]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f000 fb23 	bl	8004db4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800477c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	609a      	str	r2, [r3, #8]
      break;
 8004786:	e04f      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6818      	ldr	r0, [r3, #0]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	6899      	ldr	r1, [r3, #8]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f000 fb0c 	bl	8004db4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689a      	ldr	r2, [r3, #8]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047aa:	609a      	str	r2, [r3, #8]
      break;
 80047ac:	e03c      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	6859      	ldr	r1, [r3, #4]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	461a      	mov	r2, r3
 80047bc:	f000 fa80 	bl	8004cc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2150      	movs	r1, #80	; 0x50
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 fad9 	bl	8004d7e <TIM_ITRx_SetConfig>
      break;
 80047cc:	e02c      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6818      	ldr	r0, [r3, #0]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	6859      	ldr	r1, [r3, #4]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	461a      	mov	r2, r3
 80047dc:	f000 fa9f 	bl	8004d1e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2160      	movs	r1, #96	; 0x60
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fac9 	bl	8004d7e <TIM_ITRx_SetConfig>
      break;
 80047ec:	e01c      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6859      	ldr	r1, [r3, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	461a      	mov	r2, r3
 80047fc:	f000 fa60 	bl	8004cc0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2140      	movs	r1, #64	; 0x40
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fab9 	bl	8004d7e <TIM_ITRx_SetConfig>
      break;
 800480c:	e00c      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4619      	mov	r1, r3
 8004818:	4610      	mov	r0, r2
 800481a:	f000 fab0 	bl	8004d7e <TIM_ITRx_SetConfig>
      break;
 800481e:	e003      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	73fb      	strb	r3, [r7, #15]
      break;
 8004824:	e000      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004826:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004838:	7bfb      	ldrb	r3, [r7, #15]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004856:	b480      	push	{r7}
 8004858:	b083      	sub	sp, #12
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
	...

080048a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a34      	ldr	r2, [pc, #208]	; (800498c <TIM_Base_SetConfig+0xe4>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d00f      	beq.n	80048e0 <TIM_Base_SetConfig+0x38>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c6:	d00b      	beq.n	80048e0 <TIM_Base_SetConfig+0x38>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a31      	ldr	r2, [pc, #196]	; (8004990 <TIM_Base_SetConfig+0xe8>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d007      	beq.n	80048e0 <TIM_Base_SetConfig+0x38>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a30      	ldr	r2, [pc, #192]	; (8004994 <TIM_Base_SetConfig+0xec>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d003      	beq.n	80048e0 <TIM_Base_SetConfig+0x38>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a2f      	ldr	r2, [pc, #188]	; (8004998 <TIM_Base_SetConfig+0xf0>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d108      	bne.n	80048f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a25      	ldr	r2, [pc, #148]	; (800498c <TIM_Base_SetConfig+0xe4>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d01b      	beq.n	8004932 <TIM_Base_SetConfig+0x8a>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004900:	d017      	beq.n	8004932 <TIM_Base_SetConfig+0x8a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a22      	ldr	r2, [pc, #136]	; (8004990 <TIM_Base_SetConfig+0xe8>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d013      	beq.n	8004932 <TIM_Base_SetConfig+0x8a>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a21      	ldr	r2, [pc, #132]	; (8004994 <TIM_Base_SetConfig+0xec>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00f      	beq.n	8004932 <TIM_Base_SetConfig+0x8a>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a20      	ldr	r2, [pc, #128]	; (8004998 <TIM_Base_SetConfig+0xf0>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d00b      	beq.n	8004932 <TIM_Base_SetConfig+0x8a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a1f      	ldr	r2, [pc, #124]	; (800499c <TIM_Base_SetConfig+0xf4>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d007      	beq.n	8004932 <TIM_Base_SetConfig+0x8a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a1e      	ldr	r2, [pc, #120]	; (80049a0 <TIM_Base_SetConfig+0xf8>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d003      	beq.n	8004932 <TIM_Base_SetConfig+0x8a>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a1d      	ldr	r2, [pc, #116]	; (80049a4 <TIM_Base_SetConfig+0xfc>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d108      	bne.n	8004944 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	4313      	orrs	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a08      	ldr	r2, [pc, #32]	; (800498c <TIM_Base_SetConfig+0xe4>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d103      	bne.n	8004978 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	691a      	ldr	r2, [r3, #16]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	615a      	str	r2, [r3, #20]
}
 800497e:	bf00      	nop
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	40010000 	.word	0x40010000
 8004990:	40000400 	.word	0x40000400
 8004994:	40000800 	.word	0x40000800
 8004998:	40000c00 	.word	0x40000c00
 800499c:	40014000 	.word	0x40014000
 80049a0:	40014400 	.word	0x40014400
 80049a4:	40014800 	.word	0x40014800

080049a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b087      	sub	sp, #28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	f023 0201 	bic.w	r2, r3, #1
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 0303 	bic.w	r3, r3, #3
 80049de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f023 0302 	bic.w	r3, r3, #2
 80049f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a1c      	ldr	r2, [pc, #112]	; (8004a70 <TIM_OC1_SetConfig+0xc8>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d10c      	bne.n	8004a1e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f023 0308 	bic.w	r3, r3, #8
 8004a0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f023 0304 	bic.w	r3, r3, #4
 8004a1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a13      	ldr	r2, [pc, #76]	; (8004a70 <TIM_OC1_SetConfig+0xc8>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d111      	bne.n	8004a4a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	621a      	str	r2, [r3, #32]
}
 8004a64:	bf00      	nop
 8004a66:	371c      	adds	r7, #28
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	40010000 	.word	0x40010000

08004a74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	f023 0210 	bic.w	r2, r3, #16
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	021b      	lsls	r3, r3, #8
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	f023 0320 	bic.w	r3, r3, #32
 8004abe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a1e      	ldr	r2, [pc, #120]	; (8004b48 <TIM_OC2_SetConfig+0xd4>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d10d      	bne.n	8004af0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ada:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a15      	ldr	r2, [pc, #84]	; (8004b48 <TIM_OC2_SetConfig+0xd4>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d113      	bne.n	8004b20 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004afe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	621a      	str	r2, [r3, #32]
}
 8004b3a:	bf00      	nop
 8004b3c:	371c      	adds	r7, #28
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	40010000 	.word	0x40010000

08004b4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 0303 	bic.w	r3, r3, #3
 8004b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	021b      	lsls	r3, r3, #8
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a1d      	ldr	r2, [pc, #116]	; (8004c1c <TIM_OC3_SetConfig+0xd0>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d10d      	bne.n	8004bc6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	021b      	lsls	r3, r3, #8
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a14      	ldr	r2, [pc, #80]	; (8004c1c <TIM_OC3_SetConfig+0xd0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d113      	bne.n	8004bf6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	011b      	lsls	r3, r3, #4
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	621a      	str	r2, [r3, #32]
}
 8004c10:	bf00      	nop
 8004c12:	371c      	adds	r7, #28
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	40010000 	.word	0x40010000

08004c20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	021b      	lsls	r3, r3, #8
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	031b      	lsls	r3, r3, #12
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a10      	ldr	r2, [pc, #64]	; (8004cbc <TIM_OC4_SetConfig+0x9c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d109      	bne.n	8004c94 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	019b      	lsls	r3, r3, #6
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	621a      	str	r2, [r3, #32]
}
 8004cae:	bf00      	nop
 8004cb0:	371c      	adds	r7, #28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40010000 	.word	0x40010000

08004cc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	f023 0201 	bic.w	r2, r3, #1
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f023 030a 	bic.w	r3, r3, #10
 8004cfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	621a      	str	r2, [r3, #32]
}
 8004d12:	bf00      	nop
 8004d14:	371c      	adds	r7, #28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b087      	sub	sp, #28
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	60f8      	str	r0, [r7, #12]
 8004d26:	60b9      	str	r1, [r7, #8]
 8004d28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	f023 0210 	bic.w	r2, r3, #16
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	031b      	lsls	r3, r3, #12
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	011b      	lsls	r3, r3, #4
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	621a      	str	r2, [r3, #32]
}
 8004d72:	bf00      	nop
 8004d74:	371c      	adds	r7, #28
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b085      	sub	sp, #20
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
 8004d86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f043 0307 	orr.w	r3, r3, #7
 8004da0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	609a      	str	r2, [r3, #8]
}
 8004da8:	bf00      	nop
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b087      	sub	sp, #28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
 8004dc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	021a      	lsls	r2, r3, #8
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	609a      	str	r2, [r3, #8]
}
 8004de8:	bf00      	nop
 8004dea:	371c      	adds	r7, #28
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	f003 031f 	and.w	r3, r3, #31
 8004e06:	2201      	movs	r2, #1
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6a1a      	ldr	r2, [r3, #32]
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	43db      	mvns	r3, r3
 8004e16:	401a      	ands	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6a1a      	ldr	r2, [r3, #32]
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	f003 031f 	and.w	r3, r3, #31
 8004e26:	6879      	ldr	r1, [r7, #4]
 8004e28:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	621a      	str	r2, [r3, #32]
}
 8004e32:	bf00      	nop
 8004e34:	371c      	adds	r7, #28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
	...

08004e40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d101      	bne.n	8004e58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e54:	2302      	movs	r3, #2
 8004e56:	e050      	b.n	8004efa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a1c      	ldr	r2, [pc, #112]	; (8004f08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d018      	beq.n	8004ece <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ea4:	d013      	beq.n	8004ece <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a18      	ldr	r2, [pc, #96]	; (8004f0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d00e      	beq.n	8004ece <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a16      	ldr	r2, [pc, #88]	; (8004f10 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d009      	beq.n	8004ece <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a15      	ldr	r2, [pc, #84]	; (8004f14 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d004      	beq.n	8004ece <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a13      	ldr	r2, [pc, #76]	; (8004f18 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d10c      	bne.n	8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ed4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	40010000 	.word	0x40010000
 8004f0c:	40000400 	.word	0x40000400
 8004f10:	40000800 	.word	0x40000800
 8004f14:	40000c00 	.word	0x40000c00
 8004f18:	40014000 	.word	0x40014000

08004f1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e03f      	b.n	8004fd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d106      	bne.n	8004f70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7fd f9b0 	bl	80022d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2224      	movs	r2, #36	; 0x24
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 fe17 	bl	8005bbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695a      	ldr	r2, [r3, #20]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b082      	sub	sp, #8
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e021      	b.n	8005034 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2224      	movs	r2, #36	; 0x24
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68da      	ldr	r2, [r3, #12]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005006:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f7fd f9b1 	bl	8002370 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b08a      	sub	sp, #40	; 0x28
 8005040:	af02      	add	r7, sp, #8
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	603b      	str	r3, [r7, #0]
 8005048:	4613      	mov	r3, r2
 800504a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800504c:	2300      	movs	r3, #0
 800504e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b20      	cmp	r3, #32
 800505a:	d17c      	bne.n	8005156 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d002      	beq.n	8005068 <HAL_UART_Transmit+0x2c>
 8005062:	88fb      	ldrh	r3, [r7, #6]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d101      	bne.n	800506c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e075      	b.n	8005158 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005072:	2b01      	cmp	r3, #1
 8005074:	d101      	bne.n	800507a <HAL_UART_Transmit+0x3e>
 8005076:	2302      	movs	r3, #2
 8005078:	e06e      	b.n	8005158 <HAL_UART_Transmit+0x11c>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2221      	movs	r2, #33	; 0x21
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005090:	f7fd fa1e 	bl	80024d0 <HAL_GetTick>
 8005094:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	88fa      	ldrh	r2, [r7, #6]
 800509a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	88fa      	ldrh	r2, [r7, #6]
 80050a0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050aa:	d108      	bne.n	80050be <HAL_UART_Transmit+0x82>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d104      	bne.n	80050be <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80050b4:	2300      	movs	r3, #0
 80050b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	61bb      	str	r3, [r7, #24]
 80050bc:	e003      	b.n	80050c6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050c2:	2300      	movs	r3, #0
 80050c4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80050ce:	e02a      	b.n	8005126 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	2200      	movs	r2, #0
 80050d8:	2180      	movs	r1, #128	; 0x80
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 fb28 	bl	8005730 <UART_WaitOnFlagUntilTimeout>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e036      	b.n	8005158 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10b      	bne.n	8005108 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	461a      	mov	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050fe:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	3302      	adds	r3, #2
 8005104:	61bb      	str	r3, [r7, #24]
 8005106:	e007      	b.n	8005118 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	781a      	ldrb	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	3301      	adds	r3, #1
 8005116:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800511c:	b29b      	uxth	r3, r3
 800511e:	3b01      	subs	r3, #1
 8005120:	b29a      	uxth	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800512a:	b29b      	uxth	r3, r3
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1cf      	bne.n	80050d0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	2200      	movs	r2, #0
 8005138:	2140      	movs	r1, #64	; 0x40
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 faf8 	bl	8005730 <UART_WaitOnFlagUntilTimeout>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e006      	b.n	8005158 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2220      	movs	r2, #32
 800514e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005152:	2300      	movs	r3, #0
 8005154:	e000      	b.n	8005158 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005156:	2302      	movs	r3, #2
  }
}
 8005158:	4618      	mov	r0, r3
 800515a:	3720      	adds	r7, #32
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	4613      	mov	r3, r2
 800516c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b20      	cmp	r3, #32
 8005178:	d11d      	bne.n	80051b6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d002      	beq.n	8005186 <HAL_UART_Receive_IT+0x26>
 8005180:	88fb      	ldrh	r3, [r7, #6]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e016      	b.n	80051b8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005190:	2b01      	cmp	r3, #1
 8005192:	d101      	bne.n	8005198 <HAL_UART_Receive_IT+0x38>
 8005194:	2302      	movs	r3, #2
 8005196:	e00f      	b.n	80051b8 <HAL_UART_Receive_IT+0x58>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80051a6:	88fb      	ldrh	r3, [r7, #6]
 80051a8:	461a      	mov	r2, r3
 80051aa:	68b9      	ldr	r1, [r7, #8]
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 fb2d 	bl	800580c <UART_Start_Receive_IT>
 80051b2:	4603      	mov	r3, r0
 80051b4:	e000      	b.n	80051b8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80051b6:	2302      	movs	r3, #2
  }
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b0ba      	sub	sp, #232	; 0xe8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80051ec:	2300      	movs	r3, #0
 80051ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80051f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051f6:	f003 030f 	and.w	r3, r3, #15
 80051fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80051fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10f      	bne.n	8005226 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800520a:	f003 0320 	and.w	r3, r3, #32
 800520e:	2b00      	cmp	r3, #0
 8005210:	d009      	beq.n	8005226 <HAL_UART_IRQHandler+0x66>
 8005212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005216:	f003 0320 	and.w	r3, r3, #32
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fc11 	bl	8005a46 <UART_Receive_IT>
      return;
 8005224:	e256      	b.n	80056d4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005226:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800522a:	2b00      	cmp	r3, #0
 800522c:	f000 80de 	beq.w	80053ec <HAL_UART_IRQHandler+0x22c>
 8005230:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	2b00      	cmp	r3, #0
 800523a:	d106      	bne.n	800524a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800523c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005240:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 80d1 	beq.w	80053ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800524a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00b      	beq.n	800526e <HAL_UART_IRQHandler+0xae>
 8005256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800525a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525e:	2b00      	cmp	r3, #0
 8005260:	d005      	beq.n	800526e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	f043 0201 	orr.w	r2, r3, #1
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800526e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005272:	f003 0304 	and.w	r3, r3, #4
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00b      	beq.n	8005292 <HAL_UART_IRQHandler+0xd2>
 800527a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b00      	cmp	r3, #0
 8005284:	d005      	beq.n	8005292 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	f043 0202 	orr.w	r2, r3, #2
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00b      	beq.n	80052b6 <HAL_UART_IRQHandler+0xf6>
 800529e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d005      	beq.n	80052b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	f043 0204 	orr.w	r2, r3, #4
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80052b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ba:	f003 0308 	and.w	r3, r3, #8
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d011      	beq.n	80052e6 <HAL_UART_IRQHandler+0x126>
 80052c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052c6:	f003 0320 	and.w	r3, r3, #32
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d105      	bne.n	80052da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80052ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d005      	beq.n	80052e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	f043 0208 	orr.w	r2, r3, #8
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 81ed 	beq.w	80056ca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052f4:	f003 0320 	and.w	r3, r3, #32
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d008      	beq.n	800530e <HAL_UART_IRQHandler+0x14e>
 80052fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005300:	f003 0320 	and.w	r3, r3, #32
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 fb9c 	bl	8005a46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005318:	2b40      	cmp	r3, #64	; 0x40
 800531a:	bf0c      	ite	eq
 800531c:	2301      	moveq	r3, #1
 800531e:	2300      	movne	r3, #0
 8005320:	b2db      	uxtb	r3, r3
 8005322:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532a:	f003 0308 	and.w	r3, r3, #8
 800532e:	2b00      	cmp	r3, #0
 8005330:	d103      	bne.n	800533a <HAL_UART_IRQHandler+0x17a>
 8005332:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005336:	2b00      	cmp	r3, #0
 8005338:	d04f      	beq.n	80053da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 faa4 	bl	8005888 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534a:	2b40      	cmp	r3, #64	; 0x40
 800534c:	d141      	bne.n	80053d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3314      	adds	r3, #20
 8005354:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005358:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800535c:	e853 3f00 	ldrex	r3, [r3]
 8005360:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005364:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005368:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800536c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3314      	adds	r3, #20
 8005376:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800537a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800537e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005382:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005386:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800538a:	e841 2300 	strex	r3, r2, [r1]
 800538e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005392:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1d9      	bne.n	800534e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d013      	beq.n	80053ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a6:	4a7d      	ldr	r2, [pc, #500]	; (800559c <HAL_UART_IRQHandler+0x3dc>)
 80053a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7fd fa71 	bl	8002896 <HAL_DMA_Abort_IT>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d016      	beq.n	80053e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053c4:	4610      	mov	r0, r2
 80053c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053c8:	e00e      	b.n	80053e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f99a 	bl	8005704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d0:	e00a      	b.n	80053e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f996 	bl	8005704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d8:	e006      	b.n	80053e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f992 	bl	8005704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80053e6:	e170      	b.n	80056ca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e8:	bf00      	nop
    return;
 80053ea:	e16e      	b.n	80056ca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	f040 814a 	bne.w	800568a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80053f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053fa:	f003 0310 	and.w	r3, r3, #16
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f000 8143 	beq.w	800568a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005408:	f003 0310 	and.w	r3, r3, #16
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 813c 	beq.w	800568a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005412:	2300      	movs	r3, #0
 8005414:	60bb      	str	r3, [r7, #8]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	60bb      	str	r3, [r7, #8]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	60bb      	str	r3, [r7, #8]
 8005426:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005432:	2b40      	cmp	r3, #64	; 0x40
 8005434:	f040 80b4 	bne.w	80055a0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005444:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 8140 	beq.w	80056ce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005452:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005456:	429a      	cmp	r2, r3
 8005458:	f080 8139 	bcs.w	80056ce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005462:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800546e:	f000 8088 	beq.w	8005582 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	330c      	adds	r3, #12
 8005478:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005480:	e853 3f00 	ldrex	r3, [r3]
 8005484:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005488:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800548c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005490:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	330c      	adds	r3, #12
 800549a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800549e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80054aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80054ae:	e841 2300 	strex	r3, r2, [r1]
 80054b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80054b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1d9      	bne.n	8005472 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3314      	adds	r3, #20
 80054c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054c8:	e853 3f00 	ldrex	r3, [r3]
 80054cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80054ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054d0:	f023 0301 	bic.w	r3, r3, #1
 80054d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3314      	adds	r3, #20
 80054de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80054e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80054e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80054ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054ee:	e841 2300 	strex	r3, r2, [r1]
 80054f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80054f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1e1      	bne.n	80054be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	3314      	adds	r3, #20
 8005500:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005502:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005504:	e853 3f00 	ldrex	r3, [r3]
 8005508:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800550a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800550c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005510:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	3314      	adds	r3, #20
 800551a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800551e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005520:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005522:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005524:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005526:	e841 2300 	strex	r3, r2, [r1]
 800552a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800552c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1e3      	bne.n	80054fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2220      	movs	r2, #32
 8005536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	330c      	adds	r3, #12
 8005546:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800554a:	e853 3f00 	ldrex	r3, [r3]
 800554e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005552:	f023 0310 	bic.w	r3, r3, #16
 8005556:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	330c      	adds	r3, #12
 8005560:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005564:	65ba      	str	r2, [r7, #88]	; 0x58
 8005566:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005568:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800556a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800556c:	e841 2300 	strex	r3, r2, [r1]
 8005570:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1e3      	bne.n	8005540 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557c:	4618      	mov	r0, r3
 800557e:	f7fd f91a 	bl	80027b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800558a:	b29b      	uxth	r3, r3
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	b29b      	uxth	r3, r3
 8005590:	4619      	mov	r1, r3
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f8c0 	bl	8005718 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005598:	e099      	b.n	80056ce <HAL_UART_IRQHandler+0x50e>
 800559a:	bf00      	nop
 800559c:	0800594f 	.word	0x0800594f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 808b 	beq.w	80056d2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80055bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f000 8086 	beq.w	80056d2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	330c      	adds	r3, #12
 80055cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d0:	e853 3f00 	ldrex	r3, [r3]
 80055d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	330c      	adds	r3, #12
 80055e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80055ea:	647a      	str	r2, [r7, #68]	; 0x44
 80055ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055f2:	e841 2300 	strex	r3, r2, [r1]
 80055f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1e3      	bne.n	80055c6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	3314      	adds	r3, #20
 8005604:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	e853 3f00 	ldrex	r3, [r3]
 800560c:	623b      	str	r3, [r7, #32]
   return(result);
 800560e:	6a3b      	ldr	r3, [r7, #32]
 8005610:	f023 0301 	bic.w	r3, r3, #1
 8005614:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	3314      	adds	r3, #20
 800561e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005622:	633a      	str	r2, [r7, #48]	; 0x30
 8005624:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005626:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800562a:	e841 2300 	strex	r3, r2, [r1]
 800562e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1e3      	bne.n	80055fe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2220      	movs	r2, #32
 800563a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	330c      	adds	r3, #12
 800564a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	e853 3f00 	ldrex	r3, [r3]
 8005652:	60fb      	str	r3, [r7, #12]
   return(result);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 0310 	bic.w	r3, r3, #16
 800565a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	330c      	adds	r3, #12
 8005664:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005668:	61fa      	str	r2, [r7, #28]
 800566a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566c:	69b9      	ldr	r1, [r7, #24]
 800566e:	69fa      	ldr	r2, [r7, #28]
 8005670:	e841 2300 	strex	r3, r2, [r1]
 8005674:	617b      	str	r3, [r7, #20]
   return(result);
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1e3      	bne.n	8005644 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800567c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005680:	4619      	mov	r1, r3
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f848 	bl	8005718 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005688:	e023      	b.n	80056d2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800568a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800568e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005692:	2b00      	cmp	r3, #0
 8005694:	d009      	beq.n	80056aa <HAL_UART_IRQHandler+0x4ea>
 8005696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800569a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f967 	bl	8005976 <UART_Transmit_IT>
    return;
 80056a8:	e014      	b.n	80056d4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80056aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00e      	beq.n	80056d4 <HAL_UART_IRQHandler+0x514>
 80056b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d008      	beq.n	80056d4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f9a7 	bl	8005a16 <UART_EndTransmit_IT>
    return;
 80056c8:	e004      	b.n	80056d4 <HAL_UART_IRQHandler+0x514>
    return;
 80056ca:	bf00      	nop
 80056cc:	e002      	b.n	80056d4 <HAL_UART_IRQHandler+0x514>
      return;
 80056ce:	bf00      	nop
 80056d0:	e000      	b.n	80056d4 <HAL_UART_IRQHandler+0x514>
      return;
 80056d2:	bf00      	nop
  }
}
 80056d4:	37e8      	adds	r7, #232	; 0xe8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop

080056dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	460b      	mov	r3, r1
 8005722:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b090      	sub	sp, #64	; 0x40
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	603b      	str	r3, [r7, #0]
 800573c:	4613      	mov	r3, r2
 800573e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005740:	e050      	b.n	80057e4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005748:	d04c      	beq.n	80057e4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800574a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800574c:	2b00      	cmp	r3, #0
 800574e:	d007      	beq.n	8005760 <UART_WaitOnFlagUntilTimeout+0x30>
 8005750:	f7fc febe 	bl	80024d0 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800575c:	429a      	cmp	r2, r3
 800575e:	d241      	bcs.n	80057e4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	330c      	adds	r3, #12
 8005766:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576a:	e853 3f00 	ldrex	r3, [r3]
 800576e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005776:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	330c      	adds	r3, #12
 800577e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005780:	637a      	str	r2, [r7, #52]	; 0x34
 8005782:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005784:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005786:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005788:	e841 2300 	strex	r3, r2, [r1]
 800578c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800578e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1e5      	bne.n	8005760 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	3314      	adds	r3, #20
 800579a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	e853 3f00 	ldrex	r3, [r3]
 80057a2:	613b      	str	r3, [r7, #16]
   return(result);
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	f023 0301 	bic.w	r3, r3, #1
 80057aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	3314      	adds	r3, #20
 80057b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057b4:	623a      	str	r2, [r7, #32]
 80057b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b8:	69f9      	ldr	r1, [r7, #28]
 80057ba:	6a3a      	ldr	r2, [r7, #32]
 80057bc:	e841 2300 	strex	r3, r2, [r1]
 80057c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1e5      	bne.n	8005794 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2220      	movs	r2, #32
 80057d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e00f      	b.n	8005804 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	4013      	ands	r3, r2
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	bf0c      	ite	eq
 80057f4:	2301      	moveq	r3, #1
 80057f6:	2300      	movne	r3, #0
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	461a      	mov	r2, r3
 80057fc:	79fb      	ldrb	r3, [r7, #7]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d09f      	beq.n	8005742 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3740      	adds	r7, #64	; 0x40
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	4613      	mov	r3, r2
 8005818:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	88fa      	ldrh	r2, [r7, #6]
 8005824:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	88fa      	ldrh	r2, [r7, #6]
 800582a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2222      	movs	r2, #34	; 0x22
 8005836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d007      	beq.n	800585a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68da      	ldr	r2, [r3, #12]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005858:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	695a      	ldr	r2, [r3, #20]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f042 0201 	orr.w	r2, r2, #1
 8005868:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68da      	ldr	r2, [r3, #12]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f042 0220 	orr.w	r2, r2, #32
 8005878:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3714      	adds	r7, #20
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005888:	b480      	push	{r7}
 800588a:	b095      	sub	sp, #84	; 0x54
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	330c      	adds	r3, #12
 8005896:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800589a:	e853 3f00 	ldrex	r3, [r3]
 800589e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	330c      	adds	r3, #12
 80058ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058b0:	643a      	str	r2, [r7, #64]	; 0x40
 80058b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058b8:	e841 2300 	strex	r3, r2, [r1]
 80058bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1e5      	bne.n	8005890 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	3314      	adds	r3, #20
 80058ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	e853 3f00 	ldrex	r3, [r3]
 80058d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	f023 0301 	bic.w	r3, r3, #1
 80058da:	64bb      	str	r3, [r7, #72]	; 0x48
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3314      	adds	r3, #20
 80058e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058ec:	e841 2300 	strex	r3, r2, [r1]
 80058f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1e5      	bne.n	80058c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d119      	bne.n	8005934 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	330c      	adds	r3, #12
 8005906:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	e853 3f00 	ldrex	r3, [r3]
 800590e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	f023 0310 	bic.w	r3, r3, #16
 8005916:	647b      	str	r3, [r7, #68]	; 0x44
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	330c      	adds	r3, #12
 800591e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005920:	61ba      	str	r2, [r7, #24]
 8005922:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005924:	6979      	ldr	r1, [r7, #20]
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	e841 2300 	strex	r3, r2, [r1]
 800592c:	613b      	str	r3, [r7, #16]
   return(result);
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d1e5      	bne.n	8005900 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2220      	movs	r2, #32
 8005938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005942:	bf00      	nop
 8005944:	3754      	adds	r7, #84	; 0x54
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b084      	sub	sp, #16
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f7ff fecb 	bl	8005704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800596e:	bf00      	nop
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005976:	b480      	push	{r7}
 8005978:	b085      	sub	sp, #20
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b21      	cmp	r3, #33	; 0x21
 8005988:	d13e      	bne.n	8005a08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005992:	d114      	bne.n	80059be <UART_Transmit_IT+0x48>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d110      	bne.n	80059be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a1b      	ldr	r3, [r3, #32]
 80059a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	881b      	ldrh	r3, [r3, #0]
 80059a6:	461a      	mov	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	1c9a      	adds	r2, r3, #2
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	621a      	str	r2, [r3, #32]
 80059bc:	e008      	b.n	80059d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	1c59      	adds	r1, r3, #1
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6211      	str	r1, [r2, #32]
 80059c8:	781a      	ldrb	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	3b01      	subs	r3, #1
 80059d8:	b29b      	uxth	r3, r3
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	4619      	mov	r1, r3
 80059de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10f      	bne.n	8005a04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68da      	ldr	r2, [r3, #12]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a04:	2300      	movs	r3, #0
 8005a06:	e000      	b.n	8005a0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a08:	2302      	movs	r3, #2
  }
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b082      	sub	sp, #8
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68da      	ldr	r2, [r3, #12]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2220      	movs	r2, #32
 8005a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7ff fe50 	bl	80056dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b08c      	sub	sp, #48	; 0x30
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b22      	cmp	r3, #34	; 0x22
 8005a58:	f040 80ab 	bne.w	8005bb2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a64:	d117      	bne.n	8005a96 <UART_Receive_IT+0x50>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d113      	bne.n	8005a96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a76:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8e:	1c9a      	adds	r2, r3, #2
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	629a      	str	r2, [r3, #40]	; 0x28
 8005a94:	e026      	b.n	8005ae4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aa8:	d007      	beq.n	8005aba <UART_Receive_IT+0x74>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10a      	bne.n	8005ac8 <UART_Receive_IT+0x82>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d106      	bne.n	8005ac8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	b2da      	uxtb	r2, r3
 8005ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac4:	701a      	strb	r2, [r3, #0]
 8005ac6:	e008      	b.n	8005ada <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ade:	1c5a      	adds	r2, r3, #1
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	3b01      	subs	r3, #1
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	4619      	mov	r1, r3
 8005af2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d15a      	bne.n	8005bae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68da      	ldr	r2, [r3, #12]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 0220 	bic.w	r2, r2, #32
 8005b06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68da      	ldr	r2, [r3, #12]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	695a      	ldr	r2, [r3, #20]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 0201 	bic.w	r2, r2, #1
 8005b26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d135      	bne.n	8005ba4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	330c      	adds	r3, #12
 8005b44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	e853 3f00 	ldrex	r3, [r3]
 8005b4c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f023 0310 	bic.w	r3, r3, #16
 8005b54:	627b      	str	r3, [r7, #36]	; 0x24
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	330c      	adds	r3, #12
 8005b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b5e:	623a      	str	r2, [r7, #32]
 8005b60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b62:	69f9      	ldr	r1, [r7, #28]
 8005b64:	6a3a      	ldr	r2, [r7, #32]
 8005b66:	e841 2300 	strex	r3, r2, [r1]
 8005b6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1e5      	bne.n	8005b3e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0310 	and.w	r3, r3, #16
 8005b7c:	2b10      	cmp	r3, #16
 8005b7e:	d10a      	bne.n	8005b96 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b80:	2300      	movs	r3, #0
 8005b82:	60fb      	str	r3, [r7, #12]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f7ff fdbb 	bl	8005718 <HAL_UARTEx_RxEventCallback>
 8005ba2:	e002      	b.n	8005baa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f7ff fda3 	bl	80056f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005baa:	2300      	movs	r3, #0
 8005bac:	e002      	b.n	8005bb4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	e000      	b.n	8005bb4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005bb2:	2302      	movs	r3, #2
  }
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3730      	adds	r7, #48	; 0x30
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bc0:	b0c0      	sub	sp, #256	; 0x100
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd8:	68d9      	ldr	r1, [r3, #12]
 8005bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	ea40 0301 	orr.w	r3, r0, r1
 8005be4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bea:	689a      	ldr	r2, [r3, #8]
 8005bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	431a      	orrs	r2, r3
 8005bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005c14:	f021 010c 	bic.w	r1, r1, #12
 8005c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c22:	430b      	orrs	r3, r1
 8005c24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c36:	6999      	ldr	r1, [r3, #24]
 8005c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	ea40 0301 	orr.w	r3, r0, r1
 8005c42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	4b8f      	ldr	r3, [pc, #572]	; (8005e88 <UART_SetConfig+0x2cc>)
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d005      	beq.n	8005c5c <UART_SetConfig+0xa0>
 8005c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	4b8d      	ldr	r3, [pc, #564]	; (8005e8c <UART_SetConfig+0x2d0>)
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d104      	bne.n	8005c66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c5c:	f7fe f990 	bl	8003f80 <HAL_RCC_GetPCLK2Freq>
 8005c60:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005c64:	e003      	b.n	8005c6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c66:	f7fe f977 	bl	8003f58 <HAL_RCC_GetPCLK1Freq>
 8005c6a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c78:	f040 810c 	bne.w	8005e94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c80:	2200      	movs	r2, #0
 8005c82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c86:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005c8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005c8e:	4622      	mov	r2, r4
 8005c90:	462b      	mov	r3, r5
 8005c92:	1891      	adds	r1, r2, r2
 8005c94:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c96:	415b      	adcs	r3, r3
 8005c98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c9e:	4621      	mov	r1, r4
 8005ca0:	eb12 0801 	adds.w	r8, r2, r1
 8005ca4:	4629      	mov	r1, r5
 8005ca6:	eb43 0901 	adc.w	r9, r3, r1
 8005caa:	f04f 0200 	mov.w	r2, #0
 8005cae:	f04f 0300 	mov.w	r3, #0
 8005cb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cbe:	4690      	mov	r8, r2
 8005cc0:	4699      	mov	r9, r3
 8005cc2:	4623      	mov	r3, r4
 8005cc4:	eb18 0303 	adds.w	r3, r8, r3
 8005cc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ccc:	462b      	mov	r3, r5
 8005cce:	eb49 0303 	adc.w	r3, r9, r3
 8005cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ce2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005ce6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005cea:	460b      	mov	r3, r1
 8005cec:	18db      	adds	r3, r3, r3
 8005cee:	653b      	str	r3, [r7, #80]	; 0x50
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	eb42 0303 	adc.w	r3, r2, r3
 8005cf6:	657b      	str	r3, [r7, #84]	; 0x54
 8005cf8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005cfc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005d00:	f7fa ffaa 	bl	8000c58 <__aeabi_uldivmod>
 8005d04:	4602      	mov	r2, r0
 8005d06:	460b      	mov	r3, r1
 8005d08:	4b61      	ldr	r3, [pc, #388]	; (8005e90 <UART_SetConfig+0x2d4>)
 8005d0a:	fba3 2302 	umull	r2, r3, r3, r2
 8005d0e:	095b      	lsrs	r3, r3, #5
 8005d10:	011c      	lsls	r4, r3, #4
 8005d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d16:	2200      	movs	r2, #0
 8005d18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d1c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005d20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005d24:	4642      	mov	r2, r8
 8005d26:	464b      	mov	r3, r9
 8005d28:	1891      	adds	r1, r2, r2
 8005d2a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005d2c:	415b      	adcs	r3, r3
 8005d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005d34:	4641      	mov	r1, r8
 8005d36:	eb12 0a01 	adds.w	sl, r2, r1
 8005d3a:	4649      	mov	r1, r9
 8005d3c:	eb43 0b01 	adc.w	fp, r3, r1
 8005d40:	f04f 0200 	mov.w	r2, #0
 8005d44:	f04f 0300 	mov.w	r3, #0
 8005d48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d54:	4692      	mov	sl, r2
 8005d56:	469b      	mov	fp, r3
 8005d58:	4643      	mov	r3, r8
 8005d5a:	eb1a 0303 	adds.w	r3, sl, r3
 8005d5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d62:	464b      	mov	r3, r9
 8005d64:	eb4b 0303 	adc.w	r3, fp, r3
 8005d68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d78:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005d7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005d80:	460b      	mov	r3, r1
 8005d82:	18db      	adds	r3, r3, r3
 8005d84:	643b      	str	r3, [r7, #64]	; 0x40
 8005d86:	4613      	mov	r3, r2
 8005d88:	eb42 0303 	adc.w	r3, r2, r3
 8005d8c:	647b      	str	r3, [r7, #68]	; 0x44
 8005d8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005d96:	f7fa ff5f 	bl	8000c58 <__aeabi_uldivmod>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	4611      	mov	r1, r2
 8005da0:	4b3b      	ldr	r3, [pc, #236]	; (8005e90 <UART_SetConfig+0x2d4>)
 8005da2:	fba3 2301 	umull	r2, r3, r3, r1
 8005da6:	095b      	lsrs	r3, r3, #5
 8005da8:	2264      	movs	r2, #100	; 0x64
 8005daa:	fb02 f303 	mul.w	r3, r2, r3
 8005dae:	1acb      	subs	r3, r1, r3
 8005db0:	00db      	lsls	r3, r3, #3
 8005db2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005db6:	4b36      	ldr	r3, [pc, #216]	; (8005e90 <UART_SetConfig+0x2d4>)
 8005db8:	fba3 2302 	umull	r2, r3, r3, r2
 8005dbc:	095b      	lsrs	r3, r3, #5
 8005dbe:	005b      	lsls	r3, r3, #1
 8005dc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005dc4:	441c      	add	r4, r3
 8005dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005dd0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005dd4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005dd8:	4642      	mov	r2, r8
 8005dda:	464b      	mov	r3, r9
 8005ddc:	1891      	adds	r1, r2, r2
 8005dde:	63b9      	str	r1, [r7, #56]	; 0x38
 8005de0:	415b      	adcs	r3, r3
 8005de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005de4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005de8:	4641      	mov	r1, r8
 8005dea:	1851      	adds	r1, r2, r1
 8005dec:	6339      	str	r1, [r7, #48]	; 0x30
 8005dee:	4649      	mov	r1, r9
 8005df0:	414b      	adcs	r3, r1
 8005df2:	637b      	str	r3, [r7, #52]	; 0x34
 8005df4:	f04f 0200 	mov.w	r2, #0
 8005df8:	f04f 0300 	mov.w	r3, #0
 8005dfc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005e00:	4659      	mov	r1, fp
 8005e02:	00cb      	lsls	r3, r1, #3
 8005e04:	4651      	mov	r1, sl
 8005e06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e0a:	4651      	mov	r1, sl
 8005e0c:	00ca      	lsls	r2, r1, #3
 8005e0e:	4610      	mov	r0, r2
 8005e10:	4619      	mov	r1, r3
 8005e12:	4603      	mov	r3, r0
 8005e14:	4642      	mov	r2, r8
 8005e16:	189b      	adds	r3, r3, r2
 8005e18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e1c:	464b      	mov	r3, r9
 8005e1e:	460a      	mov	r2, r1
 8005e20:	eb42 0303 	adc.w	r3, r2, r3
 8005e24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005e34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005e38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	18db      	adds	r3, r3, r3
 8005e40:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e42:	4613      	mov	r3, r2
 8005e44:	eb42 0303 	adc.w	r3, r2, r3
 8005e48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005e52:	f7fa ff01 	bl	8000c58 <__aeabi_uldivmod>
 8005e56:	4602      	mov	r2, r0
 8005e58:	460b      	mov	r3, r1
 8005e5a:	4b0d      	ldr	r3, [pc, #52]	; (8005e90 <UART_SetConfig+0x2d4>)
 8005e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e60:	095b      	lsrs	r3, r3, #5
 8005e62:	2164      	movs	r1, #100	; 0x64
 8005e64:	fb01 f303 	mul.w	r3, r1, r3
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	00db      	lsls	r3, r3, #3
 8005e6c:	3332      	adds	r3, #50	; 0x32
 8005e6e:	4a08      	ldr	r2, [pc, #32]	; (8005e90 <UART_SetConfig+0x2d4>)
 8005e70:	fba2 2303 	umull	r2, r3, r2, r3
 8005e74:	095b      	lsrs	r3, r3, #5
 8005e76:	f003 0207 	and.w	r2, r3, #7
 8005e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4422      	add	r2, r4
 8005e82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e84:	e105      	b.n	8006092 <UART_SetConfig+0x4d6>
 8005e86:	bf00      	nop
 8005e88:	40011000 	.word	0x40011000
 8005e8c:	40011400 	.word	0x40011400
 8005e90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005ea2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005ea6:	4642      	mov	r2, r8
 8005ea8:	464b      	mov	r3, r9
 8005eaa:	1891      	adds	r1, r2, r2
 8005eac:	6239      	str	r1, [r7, #32]
 8005eae:	415b      	adcs	r3, r3
 8005eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8005eb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005eb6:	4641      	mov	r1, r8
 8005eb8:	1854      	adds	r4, r2, r1
 8005eba:	4649      	mov	r1, r9
 8005ebc:	eb43 0501 	adc.w	r5, r3, r1
 8005ec0:	f04f 0200 	mov.w	r2, #0
 8005ec4:	f04f 0300 	mov.w	r3, #0
 8005ec8:	00eb      	lsls	r3, r5, #3
 8005eca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ece:	00e2      	lsls	r2, r4, #3
 8005ed0:	4614      	mov	r4, r2
 8005ed2:	461d      	mov	r5, r3
 8005ed4:	4643      	mov	r3, r8
 8005ed6:	18e3      	adds	r3, r4, r3
 8005ed8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005edc:	464b      	mov	r3, r9
 8005ede:	eb45 0303 	adc.w	r3, r5, r3
 8005ee2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ef2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ef6:	f04f 0200 	mov.w	r2, #0
 8005efa:	f04f 0300 	mov.w	r3, #0
 8005efe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005f02:	4629      	mov	r1, r5
 8005f04:	008b      	lsls	r3, r1, #2
 8005f06:	4621      	mov	r1, r4
 8005f08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	008a      	lsls	r2, r1, #2
 8005f10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005f14:	f7fa fea0 	bl	8000c58 <__aeabi_uldivmod>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	4b60      	ldr	r3, [pc, #384]	; (80060a0 <UART_SetConfig+0x4e4>)
 8005f1e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f22:	095b      	lsrs	r3, r3, #5
 8005f24:	011c      	lsls	r4, r3, #4
 8005f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005f34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005f38:	4642      	mov	r2, r8
 8005f3a:	464b      	mov	r3, r9
 8005f3c:	1891      	adds	r1, r2, r2
 8005f3e:	61b9      	str	r1, [r7, #24]
 8005f40:	415b      	adcs	r3, r3
 8005f42:	61fb      	str	r3, [r7, #28]
 8005f44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f48:	4641      	mov	r1, r8
 8005f4a:	1851      	adds	r1, r2, r1
 8005f4c:	6139      	str	r1, [r7, #16]
 8005f4e:	4649      	mov	r1, r9
 8005f50:	414b      	adcs	r3, r1
 8005f52:	617b      	str	r3, [r7, #20]
 8005f54:	f04f 0200 	mov.w	r2, #0
 8005f58:	f04f 0300 	mov.w	r3, #0
 8005f5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f60:	4659      	mov	r1, fp
 8005f62:	00cb      	lsls	r3, r1, #3
 8005f64:	4651      	mov	r1, sl
 8005f66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f6a:	4651      	mov	r1, sl
 8005f6c:	00ca      	lsls	r2, r1, #3
 8005f6e:	4610      	mov	r0, r2
 8005f70:	4619      	mov	r1, r3
 8005f72:	4603      	mov	r3, r0
 8005f74:	4642      	mov	r2, r8
 8005f76:	189b      	adds	r3, r3, r2
 8005f78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f7c:	464b      	mov	r3, r9
 8005f7e:	460a      	mov	r2, r1
 8005f80:	eb42 0303 	adc.w	r3, r2, r3
 8005f84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005f94:	f04f 0200 	mov.w	r2, #0
 8005f98:	f04f 0300 	mov.w	r3, #0
 8005f9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005fa0:	4649      	mov	r1, r9
 8005fa2:	008b      	lsls	r3, r1, #2
 8005fa4:	4641      	mov	r1, r8
 8005fa6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005faa:	4641      	mov	r1, r8
 8005fac:	008a      	lsls	r2, r1, #2
 8005fae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005fb2:	f7fa fe51 	bl	8000c58 <__aeabi_uldivmod>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	460b      	mov	r3, r1
 8005fba:	4b39      	ldr	r3, [pc, #228]	; (80060a0 <UART_SetConfig+0x4e4>)
 8005fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8005fc0:	095b      	lsrs	r3, r3, #5
 8005fc2:	2164      	movs	r1, #100	; 0x64
 8005fc4:	fb01 f303 	mul.w	r3, r1, r3
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	011b      	lsls	r3, r3, #4
 8005fcc:	3332      	adds	r3, #50	; 0x32
 8005fce:	4a34      	ldr	r2, [pc, #208]	; (80060a0 <UART_SetConfig+0x4e4>)
 8005fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd4:	095b      	lsrs	r3, r3, #5
 8005fd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fda:	441c      	add	r4, r3
 8005fdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	673b      	str	r3, [r7, #112]	; 0x70
 8005fe4:	677a      	str	r2, [r7, #116]	; 0x74
 8005fe6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005fea:	4642      	mov	r2, r8
 8005fec:	464b      	mov	r3, r9
 8005fee:	1891      	adds	r1, r2, r2
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	415b      	adcs	r3, r3
 8005ff4:	60fb      	str	r3, [r7, #12]
 8005ff6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ffa:	4641      	mov	r1, r8
 8005ffc:	1851      	adds	r1, r2, r1
 8005ffe:	6039      	str	r1, [r7, #0]
 8006000:	4649      	mov	r1, r9
 8006002:	414b      	adcs	r3, r1
 8006004:	607b      	str	r3, [r7, #4]
 8006006:	f04f 0200 	mov.w	r2, #0
 800600a:	f04f 0300 	mov.w	r3, #0
 800600e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006012:	4659      	mov	r1, fp
 8006014:	00cb      	lsls	r3, r1, #3
 8006016:	4651      	mov	r1, sl
 8006018:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800601c:	4651      	mov	r1, sl
 800601e:	00ca      	lsls	r2, r1, #3
 8006020:	4610      	mov	r0, r2
 8006022:	4619      	mov	r1, r3
 8006024:	4603      	mov	r3, r0
 8006026:	4642      	mov	r2, r8
 8006028:	189b      	adds	r3, r3, r2
 800602a:	66bb      	str	r3, [r7, #104]	; 0x68
 800602c:	464b      	mov	r3, r9
 800602e:	460a      	mov	r2, r1
 8006030:	eb42 0303 	adc.w	r3, r2, r3
 8006034:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	663b      	str	r3, [r7, #96]	; 0x60
 8006040:	667a      	str	r2, [r7, #100]	; 0x64
 8006042:	f04f 0200 	mov.w	r2, #0
 8006046:	f04f 0300 	mov.w	r3, #0
 800604a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800604e:	4649      	mov	r1, r9
 8006050:	008b      	lsls	r3, r1, #2
 8006052:	4641      	mov	r1, r8
 8006054:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006058:	4641      	mov	r1, r8
 800605a:	008a      	lsls	r2, r1, #2
 800605c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006060:	f7fa fdfa 	bl	8000c58 <__aeabi_uldivmod>
 8006064:	4602      	mov	r2, r0
 8006066:	460b      	mov	r3, r1
 8006068:	4b0d      	ldr	r3, [pc, #52]	; (80060a0 <UART_SetConfig+0x4e4>)
 800606a:	fba3 1302 	umull	r1, r3, r3, r2
 800606e:	095b      	lsrs	r3, r3, #5
 8006070:	2164      	movs	r1, #100	; 0x64
 8006072:	fb01 f303 	mul.w	r3, r1, r3
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	011b      	lsls	r3, r3, #4
 800607a:	3332      	adds	r3, #50	; 0x32
 800607c:	4a08      	ldr	r2, [pc, #32]	; (80060a0 <UART_SetConfig+0x4e4>)
 800607e:	fba2 2303 	umull	r2, r3, r2, r3
 8006082:	095b      	lsrs	r3, r3, #5
 8006084:	f003 020f 	and.w	r2, r3, #15
 8006088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4422      	add	r2, r4
 8006090:	609a      	str	r2, [r3, #8]
}
 8006092:	bf00      	nop
 8006094:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006098:	46bd      	mov	sp, r7
 800609a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800609e:	bf00      	nop
 80060a0:	51eb851f 	.word	0x51eb851f

080060a4 <lwow_ds18x20_start_raw>:
 * \param[in]       rom_id: 1-Wire device address to start measurement for.
 *                      Set to `NULL` to start measurement on all devices at the same time
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwow_ds18x20_start_raw(lwow_t* const ow, const lwow_rom_t* const rom_id) {
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
    uint8_t ret = 0;
 80060ae:	2300      	movs	r3, #0
 80060b0:	73fb      	strb	r3, [r7, #15]

    LWOW_ASSERT0("ow != NULL", ow != NULL);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d101      	bne.n	80060bc <lwow_ds18x20_start_raw+0x18>
 80060b8:	2300      	movs	r3, #0
 80060ba:	e018      	b.n	80060ee <lwow_ds18x20_start_raw+0x4a>

    if (lwow_reset_raw(ow) == lwowOK) {
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fb34 	bl	800672a <lwow_reset_raw>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d111      	bne.n	80060ec <lwow_ds18x20_start_raw+0x48>
        if (rom_id == NULL) {      /* Check for ROM id */
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d103      	bne.n	80060d6 <lwow_ds18x20_start_raw+0x32>
            lwow_skip_rom_raw(ow); /* Skip ROM, send to all devices */
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 fcee 	bl	8006ab0 <lwow_skip_rom_raw>
 80060d4:	e003      	b.n	80060de <lwow_ds18x20_start_raw+0x3a>
        } else {
            lwow_match_rom_raw(ow, rom_id); /* Select exact device by ROM address */
 80060d6:	6839      	ldr	r1, [r7, #0]
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 fcb5 	bl	8006a48 <lwow_match_rom_raw>
        }
        lwow_write_byte_ex_raw(ow, 0x44, NULL); /* Start temperature conversion */
 80060de:	2200      	movs	r2, #0
 80060e0:	2144      	movs	r1, #68	; 0x44
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 fb65 	bl	80067b2 <lwow_write_byte_ex_raw>
        ret = 1;
 80060e8:	2301      	movs	r3, #1
 80060ea:	73fb      	strb	r3, [r7, #15]
    }
    return ret;
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <lwow_ds18x20_start>:
/**
 * \copydoc         lwow_ds18x20_start_raw
 * \note            This function is thread-safe
 */
uint8_t
lwow_ds18x20_start(lwow_t* const ow, const lwow_rom_t* const rom_id) {
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b084      	sub	sp, #16
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	6039      	str	r1, [r7, #0]
    uint8_t res;

    LWOW_ASSERT0("ow != NULL", ow != NULL);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <lwow_ds18x20_start+0x14>
 8006106:	2300      	movs	r3, #0
 8006108:	e00e      	b.n	8006128 <lwow_ds18x20_start+0x32>

    lwow_protect(ow, 1);
 800610a:	2101      	movs	r1, #1
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fae8 	bl	80066e2 <lwow_protect>
    res = lwow_ds18x20_start_raw(ow, rom_id);
 8006112:	6839      	ldr	r1, [r7, #0]
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f7ff ffc5 	bl	80060a4 <lwow_ds18x20_start_raw>
 800611a:	4603      	mov	r3, r0
 800611c:	73fb      	strb	r3, [r7, #15]
    lwow_unprotect(ow, 1);
 800611e:	2101      	movs	r1, #1
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 faf0 	bl	8006706 <lwow_unprotect>
    return res;
 8006126:	7bfb      	ldrb	r3, [r7, #15]
}
 8006128:	4618      	mov	r0, r3
 800612a:	3710      	adds	r7, #16
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <lwow_ds18x20_read_raw>:
 * \param[in]       rom_id: 1-Wire device address to read data from
 * \param[out]      t: Pointer to output float variable to save temperature
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwow_ds18x20_read_raw(lwow_t* const ow, const lwow_rom_t* const rom_id, float* const t) {
 8006130:	b580      	push	{r7, lr}
 8006132:	b08c      	sub	sp, #48	; 0x30
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
    float dec;
    uint16_t temp;
    uint8_t ret = 0, data[9], crc, resolution, m = 0, bit_val;
 800613c:	2300      	movs	r3, #0
 800613e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8006142:	2300      	movs	r3, #0
 8006144:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    int8_t digit;

    LWOW_ASSERT0("ow != NULL", ow != NULL);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d101      	bne.n	8006152 <lwow_ds18x20_read_raw+0x22>
 800614e:	2300      	movs	r3, #0
 8006150:	e0fb      	b.n	800634a <lwow_ds18x20_read_raw+0x21a>
    LWOW_ASSERT0("t != NULL", t != NULL);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d101      	bne.n	800615c <lwow_ds18x20_read_raw+0x2c>
 8006158:	2300      	movs	r3, #0
 800615a:	e0f6      	b.n	800634a <lwow_ds18x20_read_raw+0x21a>
    if (rom_id != NULL) {
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00f      	beq.n	8006182 <lwow_ds18x20_read_raw+0x52>
        LWOW_ASSERT0("lwow_ds18x20_is_b(ow, rom_id) || lwow_ds18x20_is_s(ow, rom_id)",
 8006162:	68b9      	ldr	r1, [r7, #8]
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f000 fa0f 	bl	8006588 <lwow_ds18x20_is_b>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d108      	bne.n	8006182 <lwow_ds18x20_read_raw+0x52>
 8006170:	68b9      	ldr	r1, [r7, #8]
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f000 fa24 	bl	80065c0 <lwow_ds18x20_is_s>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d101      	bne.n	8006182 <lwow_ds18x20_read_raw+0x52>
 800617e:	2300      	movs	r3, #0
 8006180:	e0e3      	b.n	800634a <lwow_ds18x20_read_raw+0x21a>

    /*
     * First read bit and check if all devices completed with conversion.
     * If everything ready, try to reset the network and continue
     */
    if (lwow_read_bit_ex_raw(ow, &bit_val) == lwowOK && bit_val != 0 && lwow_reset_raw(ow) == lwowOK) {
 8006182:	f107 0317 	add.w	r3, r7, #23
 8006186:	4619      	mov	r1, r3
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f000 fb90 	bl	80068ae <lwow_read_bit_ex_raw>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	f040 80d8 	bne.w	8006346 <lwow_ds18x20_read_raw+0x216>
 8006196:	7dfb      	ldrb	r3, [r7, #23]
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 80d4 	beq.w	8006346 <lwow_ds18x20_read_raw+0x216>
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f000 fac3 	bl	800672a <lwow_reset_raw>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f040 80cd 	bne.w	8006346 <lwow_ds18x20_read_raw+0x216>
        if (rom_id == NULL) {
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d103      	bne.n	80061ba <lwow_ds18x20_read_raw+0x8a>
            lwow_skip_rom_raw(ow);
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f000 fc7c 	bl	8006ab0 <lwow_skip_rom_raw>
 80061b8:	e003      	b.n	80061c2 <lwow_ds18x20_read_raw+0x92>
        } else {
            lwow_match_rom_raw(ow, rom_id);
 80061ba:	68b9      	ldr	r1, [r7, #8]
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 fc43 	bl	8006a48 <lwow_match_rom_raw>
        }
        lwow_write_byte_ex_raw(ow, LWOW_CMD_RSCRATCHPAD, NULL);
 80061c2:	2200      	movs	r2, #0
 80061c4:	21be      	movs	r1, #190	; 0xbe
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f000 faf3 	bl	80067b2 <lwow_write_byte_ex_raw>

        /* Read plain data from device */
        for (uint8_t i = 0; i < LWOW_ARRAYSIZE(data); ++i) {
 80061cc:	2300      	movs	r3, #0
 80061ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80061d2:	e00d      	b.n	80061f0 <lwow_ds18x20_read_raw+0xc0>
            lwow_read_byte_ex_raw(ow, &data[i]);
 80061d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80061d8:	f107 0218 	add.w	r2, r7, #24
 80061dc:	4413      	add	r3, r2
 80061de:	4619      	mov	r1, r3
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 fb4b 	bl	800687c <lwow_read_byte_ex_raw>
        for (uint8_t i = 0; i < LWOW_ARRAYSIZE(data); ++i) {
 80061e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80061ea:	3301      	adds	r3, #1
 80061ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80061f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80061f4:	2b08      	cmp	r3, #8
 80061f6:	d9ed      	bls.n	80061d4 <lwow_ds18x20_read_raw+0xa4>
        }
        crc = lwow_crc(data, LWOW_ARRAYSIZE(data));         /* Calculate CRC */
 80061f8:	f107 0318 	add.w	r3, r7, #24
 80061fc:	2109      	movs	r1, #9
 80061fe:	4618      	mov	r0, r3
 8006200:	f000 fc69 	bl	8006ad6 <lwow_crc>
 8006204:	4603      	mov	r3, r0
 8006206:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (crc == 0) {                                     /* Result must be 0 to match the CRC */
 800620a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800620e:	2b00      	cmp	r3, #0
 8006210:	f040 8099 	bne.w	8006346 <lwow_ds18x20_read_raw+0x216>
            temp = (data[1] << 0x08) | data[0];             /* Format data in integer format */
 8006214:	7e7b      	ldrb	r3, [r7, #25]
 8006216:	021b      	lsls	r3, r3, #8
 8006218:	b21a      	sxth	r2, r3
 800621a:	7e3b      	ldrb	r3, [r7, #24]
 800621c:	b21b      	sxth	r3, r3
 800621e:	4313      	orrs	r3, r2
 8006220:	b21b      	sxth	r3, r3
 8006222:	857b      	strh	r3, [r7, #42]	; 0x2a
            resolution = ((data[4] & 0x60) >> 0x05) + 0x09; /* Set resolution in units of bits */
 8006224:	7f3b      	ldrb	r3, [r7, #28]
 8006226:	115b      	asrs	r3, r3, #5
 8006228:	b2db      	uxtb	r3, r3
 800622a:	f003 0303 	and.w	r3, r3, #3
 800622e:	b2db      	uxtb	r3, r3
 8006230:	3309      	adds	r3, #9
 8006232:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            if (temp & 0x8000) {                            /* Check for negative temperature */
 8006236:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800623a:	2b00      	cmp	r3, #0
 800623c:	da05      	bge.n	800624a <lwow_ds18x20_read_raw+0x11a>
                temp = ~temp + 1;                           /* Perform two's complement */
 800623e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006240:	425b      	negs	r3, r3
 8006242:	857b      	strh	r3, [r7, #42]	; 0x2a
                m = 1;
 8006244:	2301      	movs	r3, #1
 8006246:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            }
            digit = (temp >> 0x04) | (((temp >> 0x08) & 0x07) << 0x04);
 800624a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800624c:	091b      	lsrs	r3, r3, #4
 800624e:	b29b      	uxth	r3, r3
 8006250:	b25a      	sxtb	r2, r3
 8006252:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006254:	0a1b      	lsrs	r3, r3, #8
 8006256:	b29b      	uxth	r3, r3
 8006258:	011b      	lsls	r3, r3, #4
 800625a:	b25b      	sxtb	r3, r3
 800625c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006260:	b25b      	sxtb	r3, r3
 8006262:	4313      	orrs	r3, r2
 8006264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (resolution) { /* Check for resolution settings */
 8006268:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800626c:	3b09      	subs	r3, #9
 800626e:	2b03      	cmp	r3, #3
 8006270:	d848      	bhi.n	8006304 <lwow_ds18x20_read_raw+0x1d4>
 8006272:	a201      	add	r2, pc, #4	; (adr r2, 8006278 <lwow_ds18x20_read_raw+0x148>)
 8006274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006278:	08006289 	.word	0x08006289
 800627c:	080062a9 	.word	0x080062a9
 8006280:	080062c9 	.word	0x080062c9
 8006284:	080062e9 	.word	0x080062e9
                case 9:
                    dec = ((temp >> 0x03) & 0x01) * 0.5f;
 8006288:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800628a:	08db      	lsrs	r3, r3, #3
 800628c:	b29b      	uxth	r3, r3
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	ee07 3a90 	vmov	s15, r3
 8006296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800629a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800629e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062a2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    break;
 80062a6:	e032      	b.n	800630e <lwow_ds18x20_read_raw+0x1de>
                case 10:
                    dec = ((temp >> 0x02) & 0x03) * 0.25f;
 80062a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80062aa:	089b      	lsrs	r3, r3, #2
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	f003 0303 	and.w	r3, r3, #3
 80062b2:	ee07 3a90 	vmov	s15, r3
 80062b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062ba:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80062be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062c2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    break;
 80062c6:	e022      	b.n	800630e <lwow_ds18x20_read_raw+0x1de>
                case 11:
                    dec = ((temp >> 0x01) & 0x07) * 0.125f;
 80062c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80062ca:	085b      	lsrs	r3, r3, #1
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	f003 0307 	and.w	r3, r3, #7
 80062d2:	ee07 3a90 	vmov	s15, r3
 80062d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062da:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 80062de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062e2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    break;
 80062e6:	e012      	b.n	800630e <lwow_ds18x20_read_raw+0x1de>
                case 12:
                    dec = (temp & 0x0F) * 0.0625f;
 80062e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80062ea:	f003 030f 	and.w	r3, r3, #15
 80062ee:	ee07 3a90 	vmov	s15, r3
 80062f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062f6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006354 <lwow_ds18x20_read_raw+0x224>
 80062fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062fe:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    break;
 8006302:	e004      	b.n	800630e <lwow_ds18x20_read_raw+0x1de>
                default:
                    dec = 0xFF, digit = 0;
 8006304:	4b14      	ldr	r3, [pc, #80]	; (8006358 <lwow_ds18x20_read_raw+0x228>)
 8006306:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006308:	2300      	movs	r3, #0
 800630a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            dec += digit;
 800630e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006312:	ee07 3a90 	vmov	s15, r3
 8006316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800631a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800631e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006322:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            if (m) {
 8006326:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800632a:	2b00      	cmp	r3, #0
 800632c:	d005      	beq.n	800633a <lwow_ds18x20_read_raw+0x20a>
                dec = -dec;
 800632e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006332:	eef1 7a67 	vneg.f32	s15, s15
 8006336:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            }
            *t = dec;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800633e:	601a      	str	r2, [r3, #0]
            ret = 1;
 8006340:	2301      	movs	r3, #1
 8006342:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
        }
    }

    return ret;
 8006346:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
}
 800634a:	4618      	mov	r0, r3
 800634c:	3730      	adds	r7, #48	; 0x30
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	3d800000 	.word	0x3d800000
 8006358:	437f0000 	.word	0x437f0000

0800635c <lwow_ds18x20_read>:
/**
 * \copydoc         lwow_ds18x20_read_raw
 * \note            This function is thread-safe
 */
uint8_t
lwow_ds18x20_read(lwow_t* const ow, const lwow_rom_t* const rom_id, float* const t) {
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
    uint8_t res;

    LWOW_ASSERT0("ow != NULL", ow != NULL);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <lwow_ds18x20_read+0x16>
 800636e:	2300      	movs	r3, #0
 8006370:	e027      	b.n	80063c2 <lwow_ds18x20_read+0x66>
    LWOW_ASSERT0("t != NULL", t != NULL);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d101      	bne.n	800637c <lwow_ds18x20_read+0x20>
 8006378:	2300      	movs	r3, #0
 800637a:	e022      	b.n	80063c2 <lwow_ds18x20_read+0x66>
    if (rom_id != NULL) {
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00f      	beq.n	80063a2 <lwow_ds18x20_read+0x46>
        LWOW_ASSERT0("lwow_ds18x20_is_b(ow, rom_id) || lwow_ds18x20_is_s(ow, rom_id)",
 8006382:	68b9      	ldr	r1, [r7, #8]
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f000 f8ff 	bl	8006588 <lwow_ds18x20_is_b>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d108      	bne.n	80063a2 <lwow_ds18x20_read+0x46>
 8006390:	68b9      	ldr	r1, [r7, #8]
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f000 f914 	bl	80065c0 <lwow_ds18x20_is_s>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <lwow_ds18x20_read+0x46>
 800639e:	2300      	movs	r3, #0
 80063a0:	e00f      	b.n	80063c2 <lwow_ds18x20_read+0x66>
                     lwow_ds18x20_is_b(ow, rom_id) || lwow_ds18x20_is_s(ow, rom_id));
    }

    lwow_protect(ow, 1);
 80063a2:	2101      	movs	r1, #1
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f000 f99c 	bl	80066e2 <lwow_protect>
    res = lwow_ds18x20_read_raw(ow, rom_id, t);
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	68b9      	ldr	r1, [r7, #8]
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f7ff febe 	bl	8006130 <lwow_ds18x20_read_raw>
 80063b4:	4603      	mov	r3, r0
 80063b6:	75fb      	strb	r3, [r7, #23]
    lwow_unprotect(ow, 1);
 80063b8:	2101      	movs	r1, #1
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 f9a3 	bl	8006706 <lwow_unprotect>
    return res;
 80063c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3718      	adds	r7, #24
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <lwow_ds18x20_set_resolution_raw>:
 * \param[in]       rom_id: 1-Wire device address to set resolution
 * \param[in]       bits: Number of resolution bits. Possible values are `9 - 12`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwow_ds18x20_set_resolution_raw(lwow_t* const ow, const lwow_rom_t* const rom_id, const uint8_t bits) {
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b086      	sub	sp, #24
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	60f8      	str	r0, [r7, #12]
 80063d2:	60b9      	str	r1, [r7, #8]
 80063d4:	4613      	mov	r3, r2
 80063d6:	71fb      	strb	r3, [r7, #7]
    uint8_t th, tl, conf, res = 0;
 80063d8:	2300      	movs	r3, #0
 80063da:	75fb      	strb	r3, [r7, #23]

    LWOW_ASSERT0("ow != NULL", ow != NULL);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d101      	bne.n	80063e6 <lwow_ds18x20_set_resolution_raw+0x1c>
 80063e2:	2300      	movs	r3, #0
 80063e4:	e09a      	b.n	800651c <lwow_ds18x20_set_resolution_raw+0x152>
    LWOW_ASSERT0("bits >= 9 && bits <= 12", bits >= 9 && bits <= 12);
 80063e6:	79fb      	ldrb	r3, [r7, #7]
 80063e8:	2b08      	cmp	r3, #8
 80063ea:	d902      	bls.n	80063f2 <lwow_ds18x20_set_resolution_raw+0x28>
 80063ec:	79fb      	ldrb	r3, [r7, #7]
 80063ee:	2b0c      	cmp	r3, #12
 80063f0:	d901      	bls.n	80063f6 <lwow_ds18x20_set_resolution_raw+0x2c>
 80063f2:	2300      	movs	r3, #0
 80063f4:	e092      	b.n	800651c <lwow_ds18x20_set_resolution_raw+0x152>
    LWOW_ASSERT0("lwow_ds18x20_is_b(ow, rom_id)", lwow_ds18x20_is_b(ow, rom_id));
 80063f6:	68b9      	ldr	r1, [r7, #8]
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 f8c5 	bl	8006588 <lwow_ds18x20_is_b>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d101      	bne.n	8006408 <lwow_ds18x20_set_resolution_raw+0x3e>
 8006404:	2300      	movs	r3, #0
 8006406:	e089      	b.n	800651c <lwow_ds18x20_set_resolution_raw+0x152>

    if (lwow_reset_raw(ow) == lwowOK) {
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f000 f98e 	bl	800672a <lwow_reset_raw>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	f040 8082 	bne.w	800651a <lwow_ds18x20_set_resolution_raw+0x150>
        if (rom_id == NULL) {
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d104      	bne.n	8006426 <lwow_ds18x20_set_resolution_raw+0x5c>
            lwow_match_rom_raw(ow, rom_id);
 800641c:	68b9      	ldr	r1, [r7, #8]
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f000 fb12 	bl	8006a48 <lwow_match_rom_raw>
 8006424:	e002      	b.n	800642c <lwow_ds18x20_set_resolution_raw+0x62>
        } else {
            lwow_skip_rom_raw(ow);
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f000 fb42 	bl	8006ab0 <lwow_skip_rom_raw>
        }
        lwow_write_byte_ex_raw(ow, LWOW_CMD_RSCRATCHPAD, NULL);
 800642c:	2200      	movs	r2, #0
 800642e:	21be      	movs	r1, #190	; 0xbe
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f000 f9be 	bl	80067b2 <lwow_write_byte_ex_raw>

        /* Read and ignore bytes */
        lwow_read_byte_ex_raw(ow, &th);
 8006436:	f107 0316 	add.w	r3, r7, #22
 800643a:	4619      	mov	r1, r3
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 fa1d 	bl	800687c <lwow_read_byte_ex_raw>
        lwow_read_byte_ex_raw(ow, &th);
 8006442:	f107 0316 	add.w	r3, r7, #22
 8006446:	4619      	mov	r1, r3
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 fa17 	bl	800687c <lwow_read_byte_ex_raw>

        /* Read important data */
        lwow_read_byte_ex_raw(ow, &th);
 800644e:	f107 0316 	add.w	r3, r7, #22
 8006452:	4619      	mov	r1, r3
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f000 fa11 	bl	800687c <lwow_read_byte_ex_raw>
        lwow_read_byte_ex_raw(ow, &tl);
 800645a:	f107 0315 	add.w	r3, r7, #21
 800645e:	4619      	mov	r1, r3
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f000 fa0b 	bl	800687c <lwow_read_byte_ex_raw>
        lwow_read_byte_ex_raw(ow, &conf);
 8006466:	f107 0314 	add.w	r3, r7, #20
 800646a:	4619      	mov	r1, r3
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f000 fa05 	bl	800687c <lwow_read_byte_ex_raw>

        conf &= ~0x60; /* Remove configuration bits for temperature resolution */
 8006472:	7d3b      	ldrb	r3, [r7, #20]
 8006474:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006478:	b2db      	uxtb	r3, r3
 800647a:	753b      	strb	r3, [r7, #20]
        switch (bits) {
 800647c:	79fb      	ldrb	r3, [r7, #7]
 800647e:	2b0c      	cmp	r3, #12
 8006480:	d006      	beq.n	8006490 <lwow_ds18x20_set_resolution_raw+0xc6>
 8006482:	2b0c      	cmp	r3, #12
 8006484:	dc16      	bgt.n	80064b4 <lwow_ds18x20_set_resolution_raw+0xea>
 8006486:	2b0a      	cmp	r3, #10
 8006488:	d00e      	beq.n	80064a8 <lwow_ds18x20_set_resolution_raw+0xde>
 800648a:	2b0b      	cmp	r3, #11
 800648c:	d006      	beq.n	800649c <lwow_ds18x20_set_resolution_raw+0xd2>
            case 10:
                conf |= 0x20;
                break;
            case 9:
            default:
                break;
 800648e:	e011      	b.n	80064b4 <lwow_ds18x20_set_resolution_raw+0xea>
                conf |= 0x60;
 8006490:	7d3b      	ldrb	r3, [r7, #20]
 8006492:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006496:	b2db      	uxtb	r3, r3
 8006498:	753b      	strb	r3, [r7, #20]
                break;
 800649a:	e00c      	b.n	80064b6 <lwow_ds18x20_set_resolution_raw+0xec>
                conf |= 0x40;
 800649c:	7d3b      	ldrb	r3, [r7, #20]
 800649e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	753b      	strb	r3, [r7, #20]
                break;
 80064a6:	e006      	b.n	80064b6 <lwow_ds18x20_set_resolution_raw+0xec>
                conf |= 0x20;
 80064a8:	7d3b      	ldrb	r3, [r7, #20]
 80064aa:	f043 0320 	orr.w	r3, r3, #32
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	753b      	strb	r3, [r7, #20]
                break;
 80064b2:	e000      	b.n	80064b6 <lwow_ds18x20_set_resolution_raw+0xec>
                break;
 80064b4:	bf00      	nop
        }

        /* Write data back to device */
        if (lwow_reset_raw(ow) == lwowOK) {
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f000 f937 	bl	800672a <lwow_reset_raw>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d12b      	bne.n	800651a <lwow_ds18x20_set_resolution_raw+0x150>
            lwow_match_rom_raw(ow, rom_id);
 80064c2:	68b9      	ldr	r1, [r7, #8]
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f000 fabf 	bl	8006a48 <lwow_match_rom_raw>
            lwow_write_byte_ex_raw(ow, LWOW_CMD_WSCRATCHPAD, NULL);
 80064ca:	2200      	movs	r2, #0
 80064cc:	214e      	movs	r1, #78	; 0x4e
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 f96f 	bl	80067b2 <lwow_write_byte_ex_raw>

            lwow_write_byte_ex_raw(ow, th, NULL);
 80064d4:	7dbb      	ldrb	r3, [r7, #22]
 80064d6:	2200      	movs	r2, #0
 80064d8:	4619      	mov	r1, r3
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 f969 	bl	80067b2 <lwow_write_byte_ex_raw>
            lwow_write_byte_ex_raw(ow, tl, NULL);
 80064e0:	7d7b      	ldrb	r3, [r7, #21]
 80064e2:	2200      	movs	r2, #0
 80064e4:	4619      	mov	r1, r3
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f000 f963 	bl	80067b2 <lwow_write_byte_ex_raw>
            lwow_write_byte_ex_raw(ow, conf, NULL);
 80064ec:	7d3b      	ldrb	r3, [r7, #20]
 80064ee:	2200      	movs	r2, #0
 80064f0:	4619      	mov	r1, r3
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f000 f95d 	bl	80067b2 <lwow_write_byte_ex_raw>

            /* Copy scratchpad to non-volatile memory */
            if (lwow_reset_raw(ow) == lwowOK) {
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f000 f916 	bl	800672a <lwow_reset_raw>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10a      	bne.n	800651a <lwow_ds18x20_set_resolution_raw+0x150>
                lwow_match_rom_raw(ow, rom_id);
 8006504:	68b9      	ldr	r1, [r7, #8]
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f000 fa9e 	bl	8006a48 <lwow_match_rom_raw>
                lwow_write_byte_ex_raw(ow, LWOW_CMD_CPYSCRATCHPAD, NULL);
 800650c:	2200      	movs	r2, #0
 800650e:	2148      	movs	r1, #72	; 0x48
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 f94e 	bl	80067b2 <lwow_write_byte_ex_raw>
                res = 1;
 8006516:	2301      	movs	r3, #1
 8006518:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    return res;
 800651a:	7dfb      	ldrb	r3, [r7, #23]
}
 800651c:	4618      	mov	r0, r3
 800651e:	3718      	adds	r7, #24
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <lwow_ds18x20_set_resolution>:
/**
 * \copydoc         lwow_ds18x20_set_resolution_raw
 * \note            This function is thread-safe
 */
uint8_t
lwow_ds18x20_set_resolution(lwow_t* const ow, const lwow_rom_t* const rom_id, const uint8_t bits) {
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	4613      	mov	r3, r2
 8006530:	71fb      	strb	r3, [r7, #7]
    uint8_t res;

    LWOW_ASSERT0("ow != NULL", ow != NULL);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d101      	bne.n	800653c <lwow_ds18x20_set_resolution+0x18>
 8006538:	2300      	movs	r3, #0
 800653a:	e021      	b.n	8006580 <lwow_ds18x20_set_resolution+0x5c>
    LWOW_ASSERT0("bits >= 9 && bits <= 12", bits >= 9 && bits <= 12);
 800653c:	79fb      	ldrb	r3, [r7, #7]
 800653e:	2b08      	cmp	r3, #8
 8006540:	d902      	bls.n	8006548 <lwow_ds18x20_set_resolution+0x24>
 8006542:	79fb      	ldrb	r3, [r7, #7]
 8006544:	2b0c      	cmp	r3, #12
 8006546:	d901      	bls.n	800654c <lwow_ds18x20_set_resolution+0x28>
 8006548:	2300      	movs	r3, #0
 800654a:	e019      	b.n	8006580 <lwow_ds18x20_set_resolution+0x5c>
    LWOW_ASSERT0("lwow_ds18x20_is_b(ow, rom_id)", lwow_ds18x20_is_b(ow, rom_id));
 800654c:	68b9      	ldr	r1, [r7, #8]
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f000 f81a 	bl	8006588 <lwow_ds18x20_is_b>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <lwow_ds18x20_set_resolution+0x3a>
 800655a:	2300      	movs	r3, #0
 800655c:	e010      	b.n	8006580 <lwow_ds18x20_set_resolution+0x5c>

    lwow_protect(ow, 1);
 800655e:	2101      	movs	r1, #1
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f000 f8be 	bl	80066e2 <lwow_protect>
    res = lwow_ds18x20_set_resolution_raw(ow, rom_id, bits);
 8006566:	79fb      	ldrb	r3, [r7, #7]
 8006568:	461a      	mov	r2, r3
 800656a:	68b9      	ldr	r1, [r7, #8]
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f7ff ff2c 	bl	80063ca <lwow_ds18x20_set_resolution_raw>
 8006572:	4603      	mov	r3, r0
 8006574:	75fb      	strb	r3, [r7, #23]
    lwow_unprotect(ow, 1);
 8006576:	2101      	movs	r1, #1
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f000 f8c4 	bl	8006706 <lwow_unprotect>
    return res;
 800657e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3718      	adds	r7, #24
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <lwow_ds18x20_is_b>:
 * \param[in]       rom_id: 1-Wire device address to test against `DS18B20`
 * \return          `1` on success, `0` otherwise
 * \note            This function is reentrant
 */
uint8_t
lwow_ds18x20_is_b(lwow_t* const ow, const lwow_rom_t* const rom_id) {
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
    LWOW_ASSERT0("ow != NULL", ow != NULL);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d101      	bne.n	800659c <lwow_ds18x20_is_b+0x14>
 8006598:	2300      	movs	r3, #0
 800659a:	e00b      	b.n	80065b4 <lwow_ds18x20_is_b+0x2c>
    LWOW_ASSERT0("rom_id != NULL", rom_id != NULL);
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <lwow_ds18x20_is_b+0x1e>
 80065a2:	2300      	movs	r3, #0
 80065a4:	e006      	b.n	80065b4 <lwow_ds18x20_is_b+0x2c>

    LWOW_UNUSED(ow);
    return rom_id->rom[0] == 0x28;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	2b28      	cmp	r3, #40	; 0x28
 80065ac:	bf0c      	ite	eq
 80065ae:	2301      	moveq	r3, #1
 80065b0:	2300      	movne	r3, #0
 80065b2:	b2db      	uxtb	r3, r3
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <lwow_ds18x20_is_s>:
 * \param[in]       rom_id: 1-Wire device address to test against `DS18S20`
 * \return          `1` on success, `0` otherwise
 * \note            This function is reentrant
 */
uint8_t
lwow_ds18x20_is_s(lwow_t* const ow, const lwow_rom_t* const rom_id) {
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
    LWOW_ASSERT0("ow != NULL", ow != NULL);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <lwow_ds18x20_is_s+0x14>
 80065d0:	2300      	movs	r3, #0
 80065d2:	e00b      	b.n	80065ec <lwow_ds18x20_is_s+0x2c>
    LWOW_ASSERT0("rom_id != NULL", rom_id != NULL);
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d101      	bne.n	80065de <lwow_ds18x20_is_s+0x1e>
 80065da:	2300      	movs	r3, #0
 80065dc:	e006      	b.n	80065ec <lwow_ds18x20_is_s+0x2c>

    LWOW_UNUSED(ow);
    return rom_id->rom[0] == 0x10;
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	2b10      	cmp	r3, #16
 80065e4:	bf0c      	ite	eq
 80065e6:	2301      	moveq	r3, #1
 80065e8:	2300      	movne	r3, #0
 80065ea:	b2db      	uxtb	r3, r3
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <prv_send_bit>:
 * \param[in]       btw: Bit to send, either `1` or `0`
 * \param[out]      btr: Pointer to output variable to write read bit
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
static lwowr_t
prv_send_bit(lwow_t* const ow, uint8_t btw, uint8_t* btr) {
 80065f8:	b590      	push	{r4, r7, lr}
 80065fa:	b087      	sub	sp, #28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	460b      	mov	r3, r1
 8006602:	607a      	str	r2, [r7, #4]
 8006604:	72fb      	strb	r3, [r7, #11]
    uint8_t b;

    SET_NOT_NULL(btr, 0);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d002      	beq.n	8006612 <prv_send_bit+0x1a>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	701a      	strb	r2, [r3, #0]

    /*
     * To send logical 1 over 1-wire, send 0xFF over UART
     * To send logical 0 over 1-wire, send 0x00 over UART
     */
    btw = btw > 0 ? 0xFF : 0x00; /* Convert to 0 or 1 */
 8006612:	7afb      	ldrb	r3, [r7, #11]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d001      	beq.n	800661c <prv_send_bit+0x24>
 8006618:	23ff      	movs	r3, #255	; 0xff
 800661a:	e000      	b.n	800661e <prv_send_bit+0x26>
 800661c:	2300      	movs	r3, #0
 800661e:	72fb      	strb	r3, [r7, #11]
    if (!ow->ll_drv->tx_rx(&btw, &b, 1, ow->arg)) {
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	68dc      	ldr	r4, [r3, #12]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	f107 0117 	add.w	r1, r7, #23
 800662e:	f107 000b 	add.w	r0, r7, #11
 8006632:	2201      	movs	r2, #1
 8006634:	47a0      	blx	r4
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <prv_send_bit+0x48>
        return lwowERRTXRX; /* Transmit error */
 800663c:	2303      	movs	r3, #3
 800663e:	e00d      	b.n	800665c <prv_send_bit+0x64>
    }
    b = b == 0xFF ? 1 : 0; /* Go to bit values */
 8006640:	7dfb      	ldrb	r3, [r7, #23]
 8006642:	2bff      	cmp	r3, #255	; 0xff
 8006644:	bf0c      	ite	eq
 8006646:	2301      	moveq	r3, #1
 8006648:	2300      	movne	r3, #0
 800664a:	b2db      	uxtb	r3, r3
 800664c:	75fb      	strb	r3, [r7, #23]
    SET_NOT_NULL(btr, b);  /* Set new byte */
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d002      	beq.n	800665a <prv_send_bit+0x62>
 8006654:	7dfa      	ldrb	r2, [r7, #23]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	701a      	strb	r2, [r3, #0]
    return lwowOK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	371c      	adds	r7, #28
 8006660:	46bd      	mov	sp, r7
 8006662:	bd90      	pop	{r4, r7, pc}

08006664 <lwow_init>:
 * \param[in]       ll_drv: Low-level driver
 * \param[in]       arg: Custom argument
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t
lwow_init(lwow_t* const ow, const lwow_ll_drv_t* const ll_drv, void* arg) {
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
    LWOW_ASSERT("ow != NULL", ow != NULL);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d101      	bne.n	800667a <lwow_init+0x16>
 8006676:	2305      	movs	r3, #5
 8006678:	e02f      	b.n	80066da <lwow_init+0x76>
    LWOW_ASSERT("ll_drv != NULL", ll_drv != NULL);
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d101      	bne.n	8006684 <lwow_init+0x20>
 8006680:	2305      	movs	r3, #5
 8006682:	e02a      	b.n	80066da <lwow_init+0x76>
    LWOW_ASSERT("ll_drv->init != NULL", ll_drv->init != NULL);
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d101      	bne.n	8006690 <lwow_init+0x2c>
 800668c:	2305      	movs	r3, #5
 800668e:	e024      	b.n	80066da <lwow_init+0x76>
    LWOW_ASSERT("ll_drv->deinit != NULL", ll_drv->deinit != NULL);
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d101      	bne.n	800669c <lwow_init+0x38>
 8006698:	2305      	movs	r3, #5
 800669a:	e01e      	b.n	80066da <lwow_init+0x76>
    LWOW_ASSERT("ll_drv->set_baudrate != NULL", ll_drv->set_baudrate != NULL);
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d101      	bne.n	80066a8 <lwow_init+0x44>
 80066a4:	2305      	movs	r3, #5
 80066a6:	e018      	b.n	80066da <lwow_init+0x76>
    LWOW_ASSERT("ll_drv->tx_rx != NULL", ll_drv->tx_rx != NULL);
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d101      	bne.n	80066b4 <lwow_init+0x50>
 80066b0:	2305      	movs	r3, #5
 80066b2:	e012      	b.n	80066da <lwow_init+0x76>

    ow->arg = arg;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	60da      	str	r2, [r3, #12]
    ow->ll_drv = ll_drv;              /* Assign low-level driver */
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	611a      	str	r2, [r3, #16]
    if (!ow->ll_drv->init(ow->arg)) { /* Init low-level directly */
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	68d2      	ldr	r2, [r2, #12]
 80066ca:	4610      	mov	r0, r2
 80066cc:	4798      	blx	r3
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d101      	bne.n	80066d8 <lwow_init+0x74>
        return lwowERR;
 80066d4:	2306      	movs	r3, #6
 80066d6:	e000      	b.n	80066da <lwow_init+0x76>
    if (!lwow_sys_mutex_create(&ow->mutex, arg)) {
        ow->ll_drv->deinit(ow->arg); /* Deinit low-level */
        return lwowERR;
    }
#endif /* LWOW_CFG_OS */
    return lwowOK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <lwow_protect>:
 * \param[in,out]   ow: 1-Wire handle
 * \param[in]       protect: Set to `1` to protect core, `0` otherwise
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t
lwow_protect(lwow_t* const ow, const uint8_t protect) {
 80066e2:	b480      	push	{r7}
 80066e4:	b083      	sub	sp, #12
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
 80066ea:	460b      	mov	r3, r1
 80066ec:	70fb      	strb	r3, [r7, #3]
    LWOW_ASSERT("ow != NULL", ow != NULL);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <lwow_protect+0x16>
 80066f4:	2305      	movs	r3, #5
 80066f6:	e000      	b.n	80066fa <lwow_protect+0x18>
    }
#else
    (void)ow;
    (void)protect;
#endif /* LWOW_CFG_OS */
    return lwowOK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	370c      	adds	r7, #12
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <lwow_unprotect>:
 * \param[in,out]   ow: 1-Wire handle
 * \param[in]       protect: Set to `1` to protect core, `0` otherwise
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t
lwow_unprotect(lwow_t* const ow, const uint8_t protect) {
 8006706:	b480      	push	{r7}
 8006708:	b083      	sub	sp, #12
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
 800670e:	460b      	mov	r3, r1
 8006710:	70fb      	strb	r3, [r7, #3]
    LWOW_ASSERT("ow != NULL", ow != NULL);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d101      	bne.n	800671c <lwow_unprotect+0x16>
 8006718:	2305      	movs	r3, #5
 800671a:	e000      	b.n	800671e <lwow_unprotect+0x18>
    }
#else
    (void)ow;
    (void)protect;
#endif /* LWOW_CFG_OS */
    return lwowOK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <lwow_reset_raw>:
 * \brief           Reset 1-Wire bus and set connected devices to idle state
 * \param[in,out]   ow: 1-Wire handle
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t
lwow_reset_raw(lwow_t* const ow) {
 800672a:	b590      	push	{r4, r7, lr}
 800672c:	b085      	sub	sp, #20
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
    uint8_t b;

    LWOW_ASSERT("ow != NULL", ow != NULL);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <lwow_reset_raw+0x12>
 8006738:	2305      	movs	r3, #5
 800673a:	e036      	b.n	80067aa <lwow_reset_raw+0x80>

    /* First send reset pulse */
    b = OW_RESET_BYTE; /* Set reset sequence byte = 0xF0 */
 800673c:	23f0      	movs	r3, #240	; 0xf0
 800673e:	73fb      	strb	r3, [r7, #15]
    if (!ow->ll_drv->set_baudrate(9600, ow->arg)) {
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	68d2      	ldr	r2, [r2, #12]
 800674a:	4611      	mov	r1, r2
 800674c:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8006750:	4798      	blx	r3
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d101      	bne.n	800675c <lwow_reset_raw+0x32>
        return lwowERRBAUD; /* Error setting baudrate */
 8006758:	2304      	movs	r3, #4
 800675a:	e026      	b.n	80067aa <lwow_reset_raw+0x80>
    }
    if (!ow->ll_drv->tx_rx(&b, &b, 1, ow->arg)) {
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	68dc      	ldr	r4, [r3, #12]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	f107 010f 	add.w	r1, r7, #15
 800676a:	f107 000f 	add.w	r0, r7, #15
 800676e:	2201      	movs	r2, #1
 8006770:	47a0      	blx	r4
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d101      	bne.n	800677c <lwow_reset_raw+0x52>
        return lwowERRTXRX; /* Error with data exchange */
 8006778:	2303      	movs	r3, #3
 800677a:	e016      	b.n	80067aa <lwow_reset_raw+0x80>
    }
    if (!ow->ll_drv->set_baudrate(115200, ow->arg)) {
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	68d2      	ldr	r2, [r2, #12]
 8006786:	4611      	mov	r1, r2
 8006788:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800678c:	4798      	blx	r3
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d101      	bne.n	8006798 <lwow_reset_raw+0x6e>
        return lwowERRBAUD; /* Error setting baudrate */
 8006794:	2304      	movs	r3, #4
 8006796:	e008      	b.n	80067aa <lwow_reset_raw+0x80>
    }

    /* Check if there is reply from any device */
    if (b == 0 || b == OW_RESET_BYTE) {
 8006798:	7bfb      	ldrb	r3, [r7, #15]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d002      	beq.n	80067a4 <lwow_reset_raw+0x7a>
 800679e:	7bfb      	ldrb	r3, [r7, #15]
 80067a0:	2bf0      	cmp	r3, #240	; 0xf0
 80067a2:	d101      	bne.n	80067a8 <lwow_reset_raw+0x7e>
        return lwowERRPRESENCE;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e000      	b.n	80067aa <lwow_reset_raw+0x80>
    }
    return lwowOK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd90      	pop	{r4, r7, pc}

080067b2 <lwow_write_byte_ex_raw>:
 * \param[in]       btw: Byte to write
 * \param[out]      br: Pointer to read value. Set to `NULL` if not used
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t
lwow_write_byte_ex_raw(lwow_t* const ow, const uint8_t btw, uint8_t* const br) {
 80067b2:	b590      	push	{r4, r7, lr}
 80067b4:	b089      	sub	sp, #36	; 0x24
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	60f8      	str	r0, [r7, #12]
 80067ba:	460b      	mov	r3, r1
 80067bc:	607a      	str	r2, [r7, #4]
 80067be:	72fb      	strb	r3, [r7, #11]
    uint8_t tr[8];

    LWOW_ASSERT("ow != NULL", ow != NULL);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <lwow_write_byte_ex_raw+0x18>
 80067c6:	2305      	movs	r3, #5
 80067c8:	e054      	b.n	8006874 <lwow_write_byte_ex_raw+0xc2>
    SET_NOT_NULL(br, 0);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d002      	beq.n	80067d6 <lwow_write_byte_ex_raw+0x24>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	701a      	strb	r2, [r3, #0]

    /* Prepare output data */
    for (uint8_t i = 0; i < 8; ++i) {
 80067d6:	2300      	movs	r3, #0
 80067d8:	77fb      	strb	r3, [r7, #31]
 80067da:	e012      	b.n	8006802 <lwow_write_byte_ex_raw+0x50>
        /*
         * If we have to send high bit, set byte as 0xFF,
         * otherwise set it as low bit, 0x00
         */
        tr[i] = (btw & (1 << i)) ? 0xFF : 0x00;
 80067dc:	7afa      	ldrb	r2, [r7, #11]
 80067de:	7ffb      	ldrb	r3, [r7, #31]
 80067e0:	fa42 f303 	asr.w	r3, r2, r3
 80067e4:	f003 0301 	and.w	r3, r3, #1
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d001      	beq.n	80067f0 <lwow_write_byte_ex_raw+0x3e>
 80067ec:	22ff      	movs	r2, #255	; 0xff
 80067ee:	e000      	b.n	80067f2 <lwow_write_byte_ex_raw+0x40>
 80067f0:	2200      	movs	r2, #0
 80067f2:	7ffb      	ldrb	r3, [r7, #31]
 80067f4:	3320      	adds	r3, #32
 80067f6:	443b      	add	r3, r7
 80067f8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 8; ++i) {
 80067fc:	7ffb      	ldrb	r3, [r7, #31]
 80067fe:	3301      	adds	r3, #1
 8006800:	77fb      	strb	r3, [r7, #31]
 8006802:	7ffb      	ldrb	r3, [r7, #31]
 8006804:	2b07      	cmp	r3, #7
 8006806:	d9e9      	bls.n	80067dc <lwow_write_byte_ex_raw+0x2a>

    /*
     * Exchange data on UART level,
     * send single byte for each bit = 8 bytes
     */
    if (!ow->ll_drv->tx_rx(tr, tr, 8, ow->arg)) {
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	68dc      	ldr	r4, [r3, #12]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	f107 0114 	add.w	r1, r7, #20
 8006816:	f107 0014 	add.w	r0, r7, #20
 800681a:	2208      	movs	r2, #8
 800681c:	47a0      	blx	r4
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <lwow_write_byte_ex_raw+0x76>
        return lwowERRTXRX;
 8006824:	2303      	movs	r3, #3
 8006826:	e025      	b.n	8006874 <lwow_write_byte_ex_raw+0xc2>
    }

    /* Update output value */
    if (br != NULL) {
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d021      	beq.n	8006872 <lwow_write_byte_ex_raw+0xc0>
        uint8_t r = 0;
 800682e:	2300      	movs	r3, #0
 8006830:	77bb      	strb	r3, [r7, #30]
        /*
         * Check received data. If we read 0xFF,
         * our logical write 1 was successful, otherwise it was 0.
         */
        for (uint8_t i = 0; i < 8; ++i) {
 8006832:	2300      	movs	r3, #0
 8006834:	777b      	strb	r3, [r7, #29]
 8006836:	e013      	b.n	8006860 <lwow_write_byte_ex_raw+0xae>
            if (tr[i] == 0xFF) {
 8006838:	7f7b      	ldrb	r3, [r7, #29]
 800683a:	3320      	adds	r3, #32
 800683c:	443b      	add	r3, r7
 800683e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8006842:	2bff      	cmp	r3, #255	; 0xff
 8006844:	d109      	bne.n	800685a <lwow_write_byte_ex_raw+0xa8>
                r |= 0x01 << i;
 8006846:	7f7b      	ldrb	r3, [r7, #29]
 8006848:	2201      	movs	r2, #1
 800684a:	fa02 f303 	lsl.w	r3, r2, r3
 800684e:	b25a      	sxtb	r2, r3
 8006850:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8006854:	4313      	orrs	r3, r2
 8006856:	b25b      	sxtb	r3, r3
 8006858:	77bb      	strb	r3, [r7, #30]
        for (uint8_t i = 0; i < 8; ++i) {
 800685a:	7f7b      	ldrb	r3, [r7, #29]
 800685c:	3301      	adds	r3, #1
 800685e:	777b      	strb	r3, [r7, #29]
 8006860:	7f7b      	ldrb	r3, [r7, #29]
 8006862:	2b07      	cmp	r3, #7
 8006864:	d9e8      	bls.n	8006838 <lwow_write_byte_ex_raw+0x86>
            }
        }
        SET_NOT_NULL(br, r);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d002      	beq.n	8006872 <lwow_write_byte_ex_raw+0xc0>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	7fba      	ldrb	r2, [r7, #30]
 8006870:	701a      	strb	r2, [r3, #0]
    }
    return lwowOK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3724      	adds	r7, #36	; 0x24
 8006878:	46bd      	mov	sp, r7
 800687a:	bd90      	pop	{r4, r7, pc}

0800687c <lwow_read_byte_ex_raw>:
 * \param[in,out]   ow: 1-Wire handle
 * \param[out]      br: Pointer to save read value
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t
lwow_read_byte_ex_raw(lwow_t* const ow, uint8_t* const br) {
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
    LWOW_ASSERT("ow != NULL", ow != NULL);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d101      	bne.n	8006890 <lwow_read_byte_ex_raw+0x14>
 800688c:	2305      	movs	r3, #5
 800688e:	e00a      	b.n	80068a6 <lwow_read_byte_ex_raw+0x2a>
    LWOW_ASSERT("br != NULL", br != NULL);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <lwow_read_byte_ex_raw+0x1e>
 8006896:	2305      	movs	r3, #5
 8006898:	e005      	b.n	80068a6 <lwow_read_byte_ex_raw+0x2a>
     * When we want to read byte over 1-Wire,
     * we have to send all bits as 1 and check if slave pulls line down.
     *
     * According to slave reactions, we can later construct received bytes
     */
    return lwow_write_byte_ex_raw(ow, 0xFF, br);
 800689a:	683a      	ldr	r2, [r7, #0]
 800689c:	21ff      	movs	r1, #255	; 0xff
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f7ff ff87 	bl	80067b2 <lwow_write_byte_ex_raw>
 80068a4:	4603      	mov	r3, r0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3708      	adds	r7, #8
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <lwow_read_bit_ex_raw>:
 * \param[in,out]   ow: 1-Wire handle
 * \param[out]      br: Pointer to save read value, either `1` or `0`
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t
lwow_read_bit_ex_raw(lwow_t* const ow, uint8_t* const br) {
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b082      	sub	sp, #8
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
 80068b6:	6039      	str	r1, [r7, #0]
    LWOW_ASSERT("ow != NULL", ow != NULL);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <lwow_read_bit_ex_raw+0x14>
 80068be:	2305      	movs	r3, #5
 80068c0:	e00a      	b.n	80068d8 <lwow_read_bit_ex_raw+0x2a>
    LWOW_ASSERT("br != NULL", br != NULL);
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d101      	bne.n	80068cc <lwow_read_bit_ex_raw+0x1e>
 80068c8:	2305      	movs	r3, #5
 80068ca:	e005      	b.n	80068d8 <lwow_read_bit_ex_raw+0x2a>

    return prv_send_bit(ow, 1, br); /* Send bit as `1` and read the response */
 80068cc:	683a      	ldr	r2, [r7, #0]
 80068ce:	2101      	movs	r1, #1
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f7ff fe91 	bl	80065f8 <prv_send_bit>
 80068d6:	4603      	mov	r3, r0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <lwow_search_reset_raw>:
 * \brief           Reset search
 * \param[in,out]   ow: 1-Wire handle
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t
lwow_search_reset_raw(lwow_t* const ow) {
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
    LWOW_ASSERT("ow != NULL", ow != NULL);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <lwow_search_reset_raw+0x12>
 80068ee:	2305      	movs	r3, #5
 80068f0:	e003      	b.n	80068fa <lwow_search_reset_raw+0x1a>

    ow->disrepancy = OW_FIRST_DEV; /* Reset disrepancy to default value */
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	22ff      	movs	r2, #255	; 0xff
 80068f6:	721a      	strb	r2, [r3, #8]
    return lwowOK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <lwow_search_with_command_raw>:
 * \param[in]       cmd: command to use for search operation
 * \param[out]      rom_id: Pointer to ROM structure to store address
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t
lwow_search_with_command_raw(lwow_t* const ow, const uint8_t cmd, lwow_rom_t* const rom_id) {
 8006906:	b580      	push	{r7, lr}
 8006908:	b088      	sub	sp, #32
 800690a:	af00      	add	r7, sp, #0
 800690c:	60f8      	str	r0, [r7, #12]
 800690e:	460b      	mov	r3, r1
 8006910:	607a      	str	r2, [r7, #4]
 8006912:	72fb      	strb	r3, [r7, #11]
    lwowr_t res;
    uint8_t id_bit_number, next_disrepancy, *id;

    LWOW_ASSERT("ow != NULL", ow != NULL);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d101      	bne.n	800691e <lwow_search_with_command_raw+0x18>
 800691a:	2305      	movs	r3, #5
 800691c:	e090      	b.n	8006a40 <lwow_search_with_command_raw+0x13a>
    LWOW_ASSERT("rom_id != NULL", rom_id != NULL);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d101      	bne.n	8006928 <lwow_search_with_command_raw+0x22>
 8006924:	2305      	movs	r3, #5
 8006926:	e08b      	b.n	8006a40 <lwow_search_with_command_raw+0x13a>

    id = ow->rom.rom;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	61bb      	str	r3, [r7, #24]

    /* Check for last device */
    if (ow->disrepancy == 0) {
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	7a1b      	ldrb	r3, [r3, #8]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d104      	bne.n	800693e <lwow_search_with_command_raw+0x38>
        lwow_search_reset_raw(ow); /* Reset search for next search */
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f7ff ffd3 	bl	80068e0 <lwow_search_reset_raw>
        return lwowERRNODEV;       /* No devices anymore */
 800693a:	2302      	movs	r3, #2
 800693c:	e080      	b.n	8006a40 <lwow_search_with_command_raw+0x13a>
    }

    /* Step 1: Reset all devices on 1-Wire line to be able to listen for new command */
    if ((res = lwow_reset_raw(ow)) != lwowOK) {
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f7ff fef3 	bl	800672a <lwow_reset_raw>
 8006944:	4603      	mov	r3, r0
 8006946:	75bb      	strb	r3, [r7, #22]
 8006948:	7dbb      	ldrb	r3, [r7, #22]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <lwow_search_with_command_raw+0x4c>
        return res;
 800694e:	7dbb      	ldrb	r3, [r7, #22]
 8006950:	e076      	b.n	8006a40 <lwow_search_with_command_raw+0x13a>
    }

    /* Step 2: Send search rom command for all devices on 1-Wire */
    lwow_write_byte_ex_raw(ow, cmd, NULL); /* Start with search ROM command */
 8006952:	7afb      	ldrb	r3, [r7, #11]
 8006954:	2200      	movs	r2, #0
 8006956:	4619      	mov	r1, r3
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f7ff ff2a 	bl	80067b2 <lwow_write_byte_ex_raw>
    next_disrepancy = OW_LAST_DEV;         /* This is currently last device */
 800695e:	2300      	movs	r3, #0
 8006960:	77bb      	strb	r3, [r7, #30]

    for (id_bit_number = 64; id_bit_number > 0;) {
 8006962:	2340      	movs	r3, #64	; 0x40
 8006964:	77fb      	strb	r3, [r7, #31]
 8006966:	e057      	b.n	8006a18 <lwow_search_with_command_raw+0x112>
        uint8_t b, b_cpl;
        for (uint8_t j = 8; j > 0; --j, --id_bit_number) {
 8006968:	2308      	movs	r3, #8
 800696a:	75fb      	strb	r3, [r7, #23]
 800696c:	e04e      	b.n	8006a0c <lwow_search_with_command_raw+0x106>
            /* Read first bit and its complimentary one */
            if (prv_send_bit(ow, 1, &b) != lwowOK || prv_send_bit(ow, 1, &b_cpl) != lwowOK) {
 800696e:	f107 0315 	add.w	r3, r7, #21
 8006972:	461a      	mov	r2, r3
 8006974:	2101      	movs	r1, #1
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f7ff fe3e 	bl	80065f8 <prv_send_bit>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d109      	bne.n	8006996 <lwow_search_with_command_raw+0x90>
 8006982:	f107 0314 	add.w	r3, r7, #20
 8006986:	461a      	mov	r2, r3
 8006988:	2101      	movs	r1, #1
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f7ff fe34 	bl	80065f8 <prv_send_bit>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d001      	beq.n	800699a <lwow_search_with_command_raw+0x94>
                return lwowERRTXRX;
 8006996:	2303      	movs	r3, #3
 8006998:	e052      	b.n	8006a40 <lwow_search_with_command_raw+0x13a>
             *
             *  - Single device connected on 1-Wire or
             *  - All devices on 1-Wire have the same bit value at current position
             *      - In this case, we move to direction of b value
             */
            if (b && b_cpl) {
 800699a:	7d7b      	ldrb	r3, [r7, #21]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d002      	beq.n	80069a6 <lwow_search_with_command_raw+0xa0>
 80069a0:	7d3b      	ldrb	r3, [r7, #20]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d13c      	bne.n	8006a20 <lwow_search_with_command_raw+0x11a>
                goto out; /* We do not have device connected */
            } else if (!b && !b_cpl) {
 80069a6:	7d7b      	ldrb	r3, [r7, #21]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d116      	bne.n	80069da <lwow_search_with_command_raw+0xd4>
 80069ac:	7d3b      	ldrb	r3, [r7, #20]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d113      	bne.n	80069da <lwow_search_with_command_raw+0xd4>
                 *  - Previous ROM address bit 0 was 1 and known diff is different than reading
                 *
                 * Because we shift *id variable down by 1 bit every iteration,
                 * *id & 0x01 always returns 1 if bit on previous ROM is the same as current bit
                 */
                if (id_bit_number < ow->disrepancy || ((*id & 0x01) && ow->disrepancy != id_bit_number)) {
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	7a1b      	ldrb	r3, [r3, #8]
 80069b6:	7ffa      	ldrb	r2, [r7, #31]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d30a      	bcc.n	80069d2 <lwow_search_with_command_raw+0xcc>
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	f003 0301 	and.w	r3, r3, #1
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d008      	beq.n	80069da <lwow_search_with_command_raw+0xd4>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	7a1b      	ldrb	r3, [r3, #8]
 80069cc:	7ffa      	ldrb	r2, [r7, #31]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d003      	beq.n	80069da <lwow_search_with_command_raw+0xd4>
                    b = 1;
 80069d2:	2301      	movs	r3, #1
 80069d4:	757b      	strb	r3, [r7, #21]
                    next_disrepancy = id_bit_number;
 80069d6:	7ffb      	ldrb	r3, [r7, #31]
 80069d8:	77bb      	strb	r3, [r7, #30]
             * will go to blocked state and will wait for next reset sequence
             *
             * In case of "collision", we decide here which devices we will
             * continue to scan (binary tree)
             */
            prv_send_bit(ow, b, NULL);
 80069da:	7d7b      	ldrb	r3, [r7, #21]
 80069dc:	2200      	movs	r2, #0
 80069de:	4619      	mov	r1, r3
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f7ff fe09 	bl	80065f8 <prv_send_bit>

            /*
             * Because we shift down *id each iteration, we have to position bit value to the MSB position
             * and it will be automatically positioned correct way.
             */
            *id = (*id >> 0x01) | (b << 0x07); /* Shift ROM byte down and add next, protocol is LSB first */
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	085b      	lsrs	r3, r3, #1
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	b25a      	sxtb	r2, r3
 80069f0:	7d7b      	ldrb	r3, [r7, #21]
 80069f2:	01db      	lsls	r3, r3, #7
 80069f4:	b25b      	sxtb	r3, r3
 80069f6:	4313      	orrs	r3, r2
 80069f8:	b25b      	sxtb	r3, r3
 80069fa:	b2da      	uxtb	r2, r3
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 8; j > 0; --j, --id_bit_number) {
 8006a00:	7dfb      	ldrb	r3, [r7, #23]
 8006a02:	3b01      	subs	r3, #1
 8006a04:	75fb      	strb	r3, [r7, #23]
 8006a06:	7ffb      	ldrb	r3, [r7, #31]
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	77fb      	strb	r3, [r7, #31]
 8006a0c:	7dfb      	ldrb	r3, [r7, #23]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1ad      	bne.n	800696e <lwow_search_with_command_raw+0x68>
        }
        ++id; /* Go to next byte */
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	3301      	adds	r3, #1
 8006a16:	61bb      	str	r3, [r7, #24]
    for (id_bit_number = 64; id_bit_number > 0;) {
 8006a18:	7ffb      	ldrb	r3, [r7, #31]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1a4      	bne.n	8006968 <lwow_search_with_command_raw+0x62>
    }
out:
 8006a1e:	e000      	b.n	8006a22 <lwow_search_with_command_raw+0x11c>
                goto out; /* We do not have device connected */
 8006a20:	bf00      	nop
    ow->disrepancy = next_disrepancy;                      /* Save disrepancy value */
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	7fba      	ldrb	r2, [r7, #30]
 8006a26:	721a      	strb	r2, [r3, #8]
    memcpy(rom_id->rom, ow->rom.rom, sizeof(ow->rom.rom)); /* Copy ROM to user memory */
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	68f9      	ldr	r1, [r7, #12]
 8006a2c:	2208      	movs	r2, #8
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 fc8e 	bl	8007350 <memcpy>
    return id_bit_number == 0 ? lwowOK : lwowERRNODEV;     /* Return search result status */
 8006a34:	7ffb      	ldrb	r3, [r7, #31]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <lwow_search_with_command_raw+0x138>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	e000      	b.n	8006a40 <lwow_search_with_command_raw+0x13a>
 8006a3e:	2302      	movs	r3, #2
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3720      	adds	r7, #32
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <lwow_match_rom_raw>:
 * \param[in]       ow: 1-Wire handle
 * \param[in]       rom_id: 1-Wire device address to match device
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t
lwow_match_rom_raw(lwow_t* const ow, const lwow_rom_t* const rom_id) {
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
    LWOW_ASSERT("ow != NULL", ow != NULL);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <lwow_match_rom_raw+0x14>
 8006a58:	2305      	movs	r3, #5
 8006a5a:	e025      	b.n	8006aa8 <lwow_match_rom_raw+0x60>
    LWOW_ASSERT("rom_id != NULL", rom_id != NULL);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d101      	bne.n	8006a66 <lwow_match_rom_raw+0x1e>
 8006a62:	2305      	movs	r3, #5
 8006a64:	e020      	b.n	8006aa8 <lwow_match_rom_raw+0x60>

    /* Write byte to match rom exactly */
    if (lwow_write_byte_ex_raw(ow, LWOW_CMD_MATCHROM, NULL) != lwowOK) {
 8006a66:	2200      	movs	r2, #0
 8006a68:	2155      	movs	r1, #85	; 0x55
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7ff fea1 	bl	80067b2 <lwow_write_byte_ex_raw>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d001      	beq.n	8006a7a <lwow_match_rom_raw+0x32>
        return lwowERR;
 8006a76:	2306      	movs	r3, #6
 8006a78:	e016      	b.n	8006aa8 <lwow_match_rom_raw+0x60>
    }
    for (uint8_t i = 0; i < 8; ++i) {                                     /* Send 8 bytes representing ROM address */
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	73fb      	strb	r3, [r7, #15]
 8006a7e:	e00f      	b.n	8006aa0 <lwow_match_rom_raw+0x58>
        if (lwow_write_byte_ex_raw(ow, rom_id->rom[i], NULL) != lwowOK) { /* Send ROM bytes */
 8006a80:	7bfb      	ldrb	r3, [r7, #15]
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	5cd3      	ldrb	r3, [r2, r3]
 8006a86:	2200      	movs	r2, #0
 8006a88:	4619      	mov	r1, r3
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f7ff fe91 	bl	80067b2 <lwow_write_byte_ex_raw>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d001      	beq.n	8006a9a <lwow_match_rom_raw+0x52>
            return lwowERR;
 8006a96:	2306      	movs	r3, #6
 8006a98:	e006      	b.n	8006aa8 <lwow_match_rom_raw+0x60>
    for (uint8_t i = 0; i < 8; ++i) {                                     /* Send 8 bytes representing ROM address */
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	73fb      	strb	r3, [r7, #15]
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
 8006aa2:	2b07      	cmp	r3, #7
 8006aa4:	d9ec      	bls.n	8006a80 <lwow_match_rom_raw+0x38>
        }
    }

    return lwowOK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <lwow_skip_rom_raw>:
 * \brief           Skip ROM address and select all devices on the network
 * \param[in]       ow: 1-Wire handle
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t
lwow_skip_rom_raw(lwow_t* const ow) {
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
    LWOW_ASSERT("ow != NULL", ow != NULL);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <lwow_skip_rom_raw+0x12>
 8006abe:	2305      	movs	r3, #5
 8006ac0:	e005      	b.n	8006ace <lwow_skip_rom_raw+0x1e>

    return lwow_write_byte_ex_raw(ow, LWOW_CMD_SKIPROM, NULL);
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	21cc      	movs	r1, #204	; 0xcc
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7ff fe73 	bl	80067b2 <lwow_write_byte_ex_raw>
 8006acc:	4603      	mov	r3, r0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <lwow_crc>:
 * \param[in]       len: Number of bytes
 * \return          Calculated CRC
 * \note            This function is reentrant
 */
uint8_t
lwow_crc(const void* in, const size_t len) {
 8006ad6:	b480      	push	{r7}
 8006ad8:	b087      	sub	sp, #28
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
 8006ade:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	75fb      	strb	r3, [r7, #23]
    const uint8_t* d = in;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	613b      	str	r3, [r7, #16]

    if (in == NULL || len == 0) {
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d002      	beq.n	8006af4 <lwow_crc+0x1e>
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d101      	bne.n	8006af8 <lwow_crc+0x22>
        return 0;
 8006af4:	2300      	movs	r3, #0
 8006af6:	e02e      	b.n	8006b56 <lwow_crc+0x80>
    }

    for (size_t i = 0; i < len; ++i, ++d) {
 8006af8:	2300      	movs	r3, #0
 8006afa:	60fb      	str	r3, [r7, #12]
 8006afc:	e026      	b.n	8006b4c <lwow_crc+0x76>
        uint8_t inbyte = *d;
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	72fb      	strb	r3, [r7, #11]
        for (uint8_t j = 8; j > 0; --j) {
 8006b04:	2308      	movs	r3, #8
 8006b06:	72bb      	strb	r3, [r7, #10]
 8006b08:	e017      	b.n	8006b3a <lwow_crc+0x64>
            uint8_t mix = (crc ^ inbyte) & 0x01;
 8006b0a:	7dfa      	ldrb	r2, [r7, #23]
 8006b0c:	7afb      	ldrb	r3, [r7, #11]
 8006b0e:	4053      	eors	r3, r2
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	727b      	strb	r3, [r7, #9]
            crc >>= 1;
 8006b18:	7dfb      	ldrb	r3, [r7, #23]
 8006b1a:	085b      	lsrs	r3, r3, #1
 8006b1c:	75fb      	strb	r3, [r7, #23]
            if (mix > 0) {
 8006b1e:	7a7b      	ldrb	r3, [r7, #9]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d004      	beq.n	8006b2e <lwow_crc+0x58>
                crc ^= 0x8C;
 8006b24:	7dfb      	ldrb	r3, [r7, #23]
 8006b26:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8006b2a:	43db      	mvns	r3, r3
 8006b2c:	75fb      	strb	r3, [r7, #23]
            }
            inbyte >>= 0x01;
 8006b2e:	7afb      	ldrb	r3, [r7, #11]
 8006b30:	085b      	lsrs	r3, r3, #1
 8006b32:	72fb      	strb	r3, [r7, #11]
        for (uint8_t j = 8; j > 0; --j) {
 8006b34:	7abb      	ldrb	r3, [r7, #10]
 8006b36:	3b01      	subs	r3, #1
 8006b38:	72bb      	strb	r3, [r7, #10]
 8006b3a:	7abb      	ldrb	r3, [r7, #10]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1e4      	bne.n	8006b0a <lwow_crc+0x34>
    for (size_t i = 0; i < len; ++i, ++d) {
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	3301      	adds	r3, #1
 8006b44:	60fb      	str	r3, [r7, #12]
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	613b      	str	r3, [r7, #16]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d3d4      	bcc.n	8006afe <lwow_crc+0x28>
        }
    }
    return crc;
 8006b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	371c      	adds	r7, #28
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <lwow_search_devices_with_command_raw>:
 * \param[out]      roms_found: Output variable to save number of found devices. Set to `NULL` if not used
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t
lwow_search_devices_with_command_raw(lwow_t* const ow, const uint8_t cmd, lwow_rom_t* const rom_id_arr,
                                     const size_t rom_len, size_t* const roms_found) {
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b086      	sub	sp, #24
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	60f8      	str	r0, [r7, #12]
 8006b6a:	607a      	str	r2, [r7, #4]
 8006b6c:	603b      	str	r3, [r7, #0]
 8006b6e:	460b      	mov	r3, r1
 8006b70:	72fb      	strb	r3, [r7, #11]
    lwowr_t res;
    size_t cnt = 0;
 8006b72:	2300      	movs	r3, #0
 8006b74:	613b      	str	r3, [r7, #16]

    LWOW_ASSERT("ow != NULL", ow != NULL);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d101      	bne.n	8006b80 <lwow_search_devices_with_command_raw+0x1e>
 8006b7c:	2305      	movs	r3, #5
 8006b7e:	e037      	b.n	8006bf0 <lwow_search_devices_with_command_raw+0x8e>
    LWOW_ASSERT("rom_id_arr != NULL", rom_id_arr != NULL);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d101      	bne.n	8006b8a <lwow_search_devices_with_command_raw+0x28>
 8006b86:	2305      	movs	r3, #5
 8006b88:	e032      	b.n	8006bf0 <lwow_search_devices_with_command_raw+0x8e>
    LWOW_ASSERT("rom_len > 0", rom_len > 0);
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d101      	bne.n	8006b94 <lwow_search_devices_with_command_raw+0x32>
 8006b90:	2305      	movs	r3, #5
 8006b92:	e02d      	b.n	8006bf0 <lwow_search_devices_with_command_raw+0x8e>

    for (cnt = 0, res = lwow_search_reset_raw(ow); cnt < rom_len; ++cnt) {
 8006b94:	2300      	movs	r3, #0
 8006b96:	613b      	str	r3, [r7, #16]
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f7ff fea1 	bl	80068e0 <lwow_search_reset_raw>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	75fb      	strb	r3, [r7, #23]
 8006ba2:	e010      	b.n	8006bc6 <lwow_search_devices_with_command_raw+0x64>
        if ((res = lwow_search_with_command_raw(ow, cmd, &rom_id_arr[cnt])) != lwowOK) {
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	00db      	lsls	r3, r3, #3
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	441a      	add	r2, r3
 8006bac:	7afb      	ldrb	r3, [r7, #11]
 8006bae:	4619      	mov	r1, r3
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f7ff fea8 	bl	8006906 <lwow_search_with_command_raw>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	75fb      	strb	r3, [r7, #23]
 8006bba:	7dfb      	ldrb	r3, [r7, #23]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d107      	bne.n	8006bd0 <lwow_search_devices_with_command_raw+0x6e>
    for (cnt = 0, res = lwow_search_reset_raw(ow); cnt < rom_len; ++cnt) {
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	613b      	str	r3, [r7, #16]
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d3ea      	bcc.n	8006ba4 <lwow_search_devices_with_command_raw+0x42>
 8006bce:	e000      	b.n	8006bd2 <lwow_search_devices_with_command_raw+0x70>
            break;
 8006bd0:	bf00      	nop
        }
    }
    SET_NOT_NULL(roms_found, cnt); /* Set number of roms found */
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d002      	beq.n	8006bde <lwow_search_devices_with_command_raw+0x7c>
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	601a      	str	r2, [r3, #0]
    if (res == lwowERRNODEV && cnt > 0) {
 8006bde:	7dfb      	ldrb	r3, [r7, #23]
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d104      	bne.n	8006bee <lwow_search_devices_with_command_raw+0x8c>
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d001      	beq.n	8006bee <lwow_search_devices_with_command_raw+0x8c>
        res = lwowOK;
 8006bea:	2300      	movs	r3, #0
 8006bec:	75fb      	strb	r3, [r7, #23]
    }
    return res;
 8006bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3718      	adds	r7, #24
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <lwow_search_devices_raw>:
 * \param[out]      roms_found: Output variable to save number of found devices. Set to `NULL` if not used
 * \return          \ref lwowOK on success, member of \ref lwowr_t otherwise
 */
lwowr_t
lwow_search_devices_raw(lwow_t* const ow, lwow_rom_t* const rom_id_arr, const size_t rom_len,
                        size_t* const roms_found) {
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af02      	add	r7, sp, #8
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
 8006c04:	603b      	str	r3, [r7, #0]
    LWOW_ASSERT("ow != NULL", ow != NULL);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d101      	bne.n	8006c10 <lwow_search_devices_raw+0x18>
 8006c0c:	2305      	movs	r3, #5
 8006c0e:	e012      	b.n	8006c36 <lwow_search_devices_raw+0x3e>
    LWOW_ASSERT("rom_id_arr != NULL", rom_id_arr != NULL);
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <lwow_search_devices_raw+0x22>
 8006c16:	2305      	movs	r3, #5
 8006c18:	e00d      	b.n	8006c36 <lwow_search_devices_raw+0x3e>
    LWOW_ASSERT("rom_len > 0", rom_len > 0);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <lwow_search_devices_raw+0x2c>
 8006c20:	2305      	movs	r3, #5
 8006c22:	e008      	b.n	8006c36 <lwow_search_devices_raw+0x3e>

    return lwow_search_devices_with_command_raw(ow, LWOW_CMD_SEARCHROM, rom_id_arr, rom_len, roms_found);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	9300      	str	r3, [sp, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68ba      	ldr	r2, [r7, #8]
 8006c2c:	21f0      	movs	r1, #240	; 0xf0
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f7ff ff97 	bl	8006b62 <lwow_search_devices_with_command_raw>
 8006c34:	4603      	mov	r3, r0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <lwow_search_devices>:
/**
 * \copydoc         lwow_search_devices_raw
 * \note            This function is thread-safe
 */
lwowr_t
lwow_search_devices(lwow_t* const ow, lwow_rom_t* const rom_id_arr, const size_t rom_len, size_t* const roms_found) {
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b086      	sub	sp, #24
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	60f8      	str	r0, [r7, #12]
 8006c46:	60b9      	str	r1, [r7, #8]
 8006c48:	607a      	str	r2, [r7, #4]
 8006c4a:	603b      	str	r3, [r7, #0]
    lwowr_t res;

    LWOW_ASSERT("ow != NULL", ow != NULL);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <lwow_search_devices+0x18>
 8006c52:	2305      	movs	r3, #5
 8006c54:	e01a      	b.n	8006c8c <lwow_search_devices+0x4e>
    LWOW_ASSERT("rom_id_arr != NULL", rom_id_arr != NULL);
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <lwow_search_devices+0x22>
 8006c5c:	2305      	movs	r3, #5
 8006c5e:	e015      	b.n	8006c8c <lwow_search_devices+0x4e>
    LWOW_ASSERT("rom_len > 0", rom_len > 0);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <lwow_search_devices+0x2c>
 8006c66:	2305      	movs	r3, #5
 8006c68:	e010      	b.n	8006c8c <lwow_search_devices+0x4e>

    lwow_protect(ow, 1);
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f7ff fd38 	bl	80066e2 <lwow_protect>
    res = lwow_search_devices_raw(ow, rom_id_arr, rom_len, roms_found);
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	68b9      	ldr	r1, [r7, #8]
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f7ff ffbd 	bl	8006bf8 <lwow_search_devices_raw>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	75fb      	strb	r3, [r7, #23]
    lwow_unprotect(ow, 1);
 8006c82:	2101      	movs	r1, #1
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f7ff fd3e 	bl	8006706 <lwow_unprotect>
    return res;
 8006c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3718      	adds	r7, #24
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8006c94:	b480      	push	{r7}
 8006c96:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8006c98:	bf00      	nop
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
	...

08006ca4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af04      	add	r7, sp, #16
 8006caa:	4603      	mov	r3, r0
 8006cac:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8006cae:	f04f 33ff 	mov.w	r3, #4294967295
 8006cb2:	9302      	str	r3, [sp, #8]
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	9301      	str	r3, [sp, #4]
 8006cb8:	1dfb      	adds	r3, r7, #7
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	2178      	movs	r1, #120	; 0x78
 8006cc2:	4803      	ldr	r0, [pc, #12]	; (8006cd0 <ssd1306_WriteCommand+0x2c>)
 8006cc4:	f7fc fa00 	bl	80030c8 <HAL_I2C_Mem_Write>
}
 8006cc8:	bf00      	nop
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	2000063c 	.word	0x2000063c

08006cd4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af04      	add	r7, sp, #16
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ce6:	9202      	str	r2, [sp, #8]
 8006ce8:	9301      	str	r3, [sp, #4]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	9300      	str	r3, [sp, #0]
 8006cee:	2301      	movs	r3, #1
 8006cf0:	2240      	movs	r2, #64	; 0x40
 8006cf2:	2178      	movs	r1, #120	; 0x78
 8006cf4:	4803      	ldr	r0, [pc, #12]	; (8006d04 <ssd1306_WriteData+0x30>)
 8006cf6:	f7fc f9e7 	bl	80030c8 <HAL_I2C_Mem_Write>
}
 8006cfa:	bf00      	nop
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	2000063c 	.word	0x2000063c

08006d08 <ssd1306_FillBuffer>:
static uint8_t SSD1306_CurrentlyDisplayingBuffer[SSD1306_BUFFER_SIZE];
// Screen object
static SSD1306_t SSD1306;

/* Fills the Screenbuffer with values from a given buffer of a fixed length */
SSD1306_Error_t ssd1306_FillBuffer(uint8_t* buf, uint32_t len) {
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
    SSD1306_Error_t ret = SSD1306_ERR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	73fb      	strb	r3, [r7, #15]
    if (len <= SSD1306_BUFFER_SIZE) {
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d1c:	d806      	bhi.n	8006d2c <ssd1306_FillBuffer+0x24>
        memcpy(SSD1306_Buffer,buf,len);
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	6879      	ldr	r1, [r7, #4]
 8006d22:	4805      	ldr	r0, [pc, #20]	; (8006d38 <ssd1306_FillBuffer+0x30>)
 8006d24:	f000 fb14 	bl	8007350 <memcpy>
        ret = SSD1306_OK;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	73fb      	strb	r3, [r7, #15]
    }
    return ret;
 8006d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	2000079c 	.word	0x2000079c

08006d3c <ssd1306_Init>:

// Initialize the oled screen
void ssd1306_Init(void) {
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8006d42:	f7ff ffa7 	bl	8006c94 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8006d46:	2064      	movs	r0, #100	; 0x64
 8006d48:	f7fb fbce 	bl	80024e8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8006d4c:	2000      	movs	r0, #0
 8006d4e:	f000 fab7 	bl	80072c0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8006d52:	2020      	movs	r0, #32
 8006d54:	f7ff ffa6 	bl	8006ca4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8006d58:	2000      	movs	r0, #0
 8006d5a:	f7ff ffa3 	bl	8006ca4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8006d5e:	20b0      	movs	r0, #176	; 0xb0
 8006d60:	f7ff ffa0 	bl	8006ca4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8006d64:	20c8      	movs	r0, #200	; 0xc8
 8006d66:	f7ff ff9d 	bl	8006ca4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	f7ff ff9a 	bl	8006ca4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8006d70:	2010      	movs	r0, #16
 8006d72:	f7ff ff97 	bl	8006ca4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8006d76:	2040      	movs	r0, #64	; 0x40
 8006d78:	f7ff ff94 	bl	8006ca4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8006d7c:	20ff      	movs	r0, #255	; 0xff
 8006d7e:	f000 fa8c 	bl	800729a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8006d82:	20a1      	movs	r0, #161	; 0xa1
 8006d84:	f7ff ff8e 	bl	8006ca4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8006d88:	20a6      	movs	r0, #166	; 0xa6
 8006d8a:	f7ff ff8b 	bl	8006ca4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8006d8e:	20a8      	movs	r0, #168	; 0xa8
 8006d90:	f7ff ff88 	bl	8006ca4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8006d94:	203f      	movs	r0, #63	; 0x3f
 8006d96:	f7ff ff85 	bl	8006ca4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8006d9a:	20a4      	movs	r0, #164	; 0xa4
 8006d9c:	f7ff ff82 	bl	8006ca4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8006da0:	20d3      	movs	r0, #211	; 0xd3
 8006da2:	f7ff ff7f 	bl	8006ca4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8006da6:	2000      	movs	r0, #0
 8006da8:	f7ff ff7c 	bl	8006ca4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8006dac:	20d5      	movs	r0, #213	; 0xd5
 8006dae:	f7ff ff79 	bl	8006ca4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8006db2:	20f0      	movs	r0, #240	; 0xf0
 8006db4:	f7ff ff76 	bl	8006ca4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8006db8:	20d9      	movs	r0, #217	; 0xd9
 8006dba:	f7ff ff73 	bl	8006ca4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8006dbe:	2022      	movs	r0, #34	; 0x22
 8006dc0:	f7ff ff70 	bl	8006ca4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8006dc4:	20da      	movs	r0, #218	; 0xda
 8006dc6:	f7ff ff6d 	bl	8006ca4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8006dca:	2012      	movs	r0, #18
 8006dcc:	f7ff ff6a 	bl	8006ca4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8006dd0:	20db      	movs	r0, #219	; 0xdb
 8006dd2:	f7ff ff67 	bl	8006ca4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8006dd6:	2020      	movs	r0, #32
 8006dd8:	f7ff ff64 	bl	8006ca4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8006ddc:	208d      	movs	r0, #141	; 0x8d
 8006dde:	f7ff ff61 	bl	8006ca4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8006de2:	2014      	movs	r0, #20
 8006de4:	f7ff ff5e 	bl	8006ca4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8006de8:	2001      	movs	r0, #1
 8006dea:	f000 fa69 	bl	80072c0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8006dee:	2000      	movs	r0, #0
 8006df0:	f000 f822 	bl	8006e38 <ssd1306_Fill>

    for(int i = 0; i < SSD1306_BUFFER_SIZE; i++){
 8006df4:	2300      	movs	r3, #0
 8006df6:	607b      	str	r3, [r7, #4]
 8006df8:	e007      	b.n	8006e0a <ssd1306_Init+0xce>
    	SSD1306_CurrentlyDisplayingBuffer[i] = 0;
 8006dfa:	4a0d      	ldr	r2, [pc, #52]	; (8006e30 <ssd1306_Init+0xf4>)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4413      	add	r3, r2
 8006e00:	2200      	movs	r2, #0
 8006e02:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < SSD1306_BUFFER_SIZE; i++){
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	3301      	adds	r3, #1
 8006e08:	607b      	str	r3, [r7, #4]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e10:	dbf3      	blt.n	8006dfa <ssd1306_Init+0xbe>
    }

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8006e12:	f000 f835 	bl	8006e80 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8006e16:	4b07      	ldr	r3, [pc, #28]	; (8006e34 <ssd1306_Init+0xf8>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8006e1c:	4b05      	ldr	r3, [pc, #20]	; (8006e34 <ssd1306_Init+0xf8>)
 8006e1e:	2200      	movs	r2, #0
 8006e20:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8006e22:	4b04      	ldr	r3, [pc, #16]	; (8006e34 <ssd1306_Init+0xf8>)
 8006e24:	2201      	movs	r2, #1
 8006e26:	711a      	strb	r2, [r3, #4]
}
 8006e28:	bf00      	nop
 8006e2a:	3708      	adds	r7, #8
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	20000b9c 	.word	0x20000b9c
 8006e34:	20000f9c 	.word	0x20000f9c

08006e38 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	4603      	mov	r3, r0
 8006e40:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8006e42:	2300      	movs	r3, #0
 8006e44:	60fb      	str	r3, [r7, #12]
 8006e46:	e00d      	b.n	8006e64 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8006e48:	79fb      	ldrb	r3, [r7, #7]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d101      	bne.n	8006e52 <ssd1306_Fill+0x1a>
 8006e4e:	2100      	movs	r1, #0
 8006e50:	e000      	b.n	8006e54 <ssd1306_Fill+0x1c>
 8006e52:	21ff      	movs	r1, #255	; 0xff
 8006e54:	4a09      	ldr	r2, [pc, #36]	; (8006e7c <ssd1306_Fill+0x44>)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	4413      	add	r3, r2
 8006e5a:	460a      	mov	r2, r1
 8006e5c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	3301      	adds	r3, #1
 8006e62:	60fb      	str	r3, [r7, #12]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e6a:	d3ed      	bcc.n	8006e48 <ssd1306_Fill+0x10>
    }
}
 8006e6c:	bf00      	nop
 8006e6e:	bf00      	nop
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	2000079c 	.word	0x2000079c

08006e80 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
	uint8_t performWrite = 0;
 8006e86:	2300      	movs	r3, #0
 8006e88:	71fb      	strb	r3, [r7, #7]
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	71bb      	strb	r3, [r7, #6]
 8006e8e:	e03a      	b.n	8006f06 <ssd1306_UpdateScreen+0x86>

    	for(int e = 0; e < SSD1306_WIDTH; e++){
 8006e90:	2300      	movs	r3, #0
 8006e92:	603b      	str	r3, [r7, #0]
 8006e94:	e01e      	b.n	8006ed4 <ssd1306_UpdateScreen+0x54>
    		if(SSD1306_CurrentlyDisplayingBuffer[SSD1306_WIDTH*i+e] != SSD1306_Buffer[SSD1306_WIDTH*i+e]){
 8006e96:	79bb      	ldrb	r3, [r7, #6]
 8006e98:	01da      	lsls	r2, r3, #7
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	4a1e      	ldr	r2, [pc, #120]	; (8006f18 <ssd1306_UpdateScreen+0x98>)
 8006ea0:	5cd2      	ldrb	r2, [r2, r3]
 8006ea2:	79bb      	ldrb	r3, [r7, #6]
 8006ea4:	01d9      	lsls	r1, r3, #7
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	440b      	add	r3, r1
 8006eaa:	491c      	ldr	r1, [pc, #112]	; (8006f1c <ssd1306_UpdateScreen+0x9c>)
 8006eac:	5ccb      	ldrb	r3, [r1, r3]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d00d      	beq.n	8006ece <ssd1306_UpdateScreen+0x4e>
    			performWrite = 1;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	71fb      	strb	r3, [r7, #7]
    			SSD1306_CurrentlyDisplayingBuffer[SSD1306_WIDTH*i+e] = SSD1306_Buffer[SSD1306_WIDTH*i+e];
 8006eb6:	79bb      	ldrb	r3, [r7, #6]
 8006eb8:	01da      	lsls	r2, r3, #7
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	441a      	add	r2, r3
 8006ebe:	79bb      	ldrb	r3, [r7, #6]
 8006ec0:	01d9      	lsls	r1, r3, #7
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	440b      	add	r3, r1
 8006ec6:	4915      	ldr	r1, [pc, #84]	; (8006f1c <ssd1306_UpdateScreen+0x9c>)
 8006ec8:	5c89      	ldrb	r1, [r1, r2]
 8006eca:	4a13      	ldr	r2, [pc, #76]	; (8006f18 <ssd1306_UpdateScreen+0x98>)
 8006ecc:	54d1      	strb	r1, [r2, r3]
    	for(int e = 0; e < SSD1306_WIDTH; e++){
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	603b      	str	r3, [r7, #0]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ed8:	dddd      	ble.n	8006e96 <ssd1306_UpdateScreen+0x16>
    		}
    	}
    	if(performWrite){
 8006eda:	79fb      	ldrb	r3, [r7, #7]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00d      	beq.n	8006efc <ssd1306_UpdateScreen+0x7c>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8006ee0:	79bb      	ldrb	r3, [r7, #6]
 8006ee2:	3b50      	subs	r3, #80	; 0x50
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7ff fedc 	bl	8006ca4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8006eec:	79bb      	ldrb	r3, [r7, #6]
 8006eee:	01db      	lsls	r3, r3, #7
 8006ef0:	4a0a      	ldr	r2, [pc, #40]	; (8006f1c <ssd1306_UpdateScreen+0x9c>)
 8006ef2:	4413      	add	r3, r2
 8006ef4:	2180      	movs	r1, #128	; 0x80
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7ff feec 	bl	8006cd4 <ssd1306_WriteData>
    	}
        performWrite = 0;
 8006efc:	2300      	movs	r3, #0
 8006efe:	71fb      	strb	r3, [r7, #7]
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8006f00:	79bb      	ldrb	r3, [r7, #6]
 8006f02:	3301      	adds	r3, #1
 8006f04:	71bb      	strb	r3, [r7, #6]
 8006f06:	79bb      	ldrb	r3, [r7, #6]
 8006f08:	2b07      	cmp	r3, #7
 8006f0a:	d9c1      	bls.n	8006e90 <ssd1306_UpdateScreen+0x10>
    }
}
 8006f0c:	bf00      	nop
 8006f0e:	bf00      	nop
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	20000b9c 	.word	0x20000b9c
 8006f1c:	2000079c 	.word	0x2000079c

08006f20 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	4603      	mov	r3, r0
 8006f28:	71fb      	strb	r3, [r7, #7]
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	71bb      	strb	r3, [r7, #6]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8006f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	db3d      	blt.n	8006fb6 <ssd1306_DrawPixel+0x96>
 8006f3a:	79bb      	ldrb	r3, [r7, #6]
 8006f3c:	2b3f      	cmp	r3, #63	; 0x3f
 8006f3e:	d83a      	bhi.n	8006fb6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8006f40:	797b      	ldrb	r3, [r7, #5]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d11a      	bne.n	8006f7c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8006f46:	79fa      	ldrb	r2, [r7, #7]
 8006f48:	79bb      	ldrb	r3, [r7, #6]
 8006f4a:	08db      	lsrs	r3, r3, #3
 8006f4c:	b2d8      	uxtb	r0, r3
 8006f4e:	4603      	mov	r3, r0
 8006f50:	01db      	lsls	r3, r3, #7
 8006f52:	4413      	add	r3, r2
 8006f54:	4a1b      	ldr	r2, [pc, #108]	; (8006fc4 <ssd1306_DrawPixel+0xa4>)
 8006f56:	5cd3      	ldrb	r3, [r2, r3]
 8006f58:	b25a      	sxtb	r2, r3
 8006f5a:	79bb      	ldrb	r3, [r7, #6]
 8006f5c:	f003 0307 	and.w	r3, r3, #7
 8006f60:	2101      	movs	r1, #1
 8006f62:	fa01 f303 	lsl.w	r3, r1, r3
 8006f66:	b25b      	sxtb	r3, r3
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	b259      	sxtb	r1, r3
 8006f6c:	79fa      	ldrb	r2, [r7, #7]
 8006f6e:	4603      	mov	r3, r0
 8006f70:	01db      	lsls	r3, r3, #7
 8006f72:	4413      	add	r3, r2
 8006f74:	b2c9      	uxtb	r1, r1
 8006f76:	4a13      	ldr	r2, [pc, #76]	; (8006fc4 <ssd1306_DrawPixel+0xa4>)
 8006f78:	54d1      	strb	r1, [r2, r3]
 8006f7a:	e01d      	b.n	8006fb8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8006f7c:	79fa      	ldrb	r2, [r7, #7]
 8006f7e:	79bb      	ldrb	r3, [r7, #6]
 8006f80:	08db      	lsrs	r3, r3, #3
 8006f82:	b2d8      	uxtb	r0, r3
 8006f84:	4603      	mov	r3, r0
 8006f86:	01db      	lsls	r3, r3, #7
 8006f88:	4413      	add	r3, r2
 8006f8a:	4a0e      	ldr	r2, [pc, #56]	; (8006fc4 <ssd1306_DrawPixel+0xa4>)
 8006f8c:	5cd3      	ldrb	r3, [r2, r3]
 8006f8e:	b25a      	sxtb	r2, r3
 8006f90:	79bb      	ldrb	r3, [r7, #6]
 8006f92:	f003 0307 	and.w	r3, r3, #7
 8006f96:	2101      	movs	r1, #1
 8006f98:	fa01 f303 	lsl.w	r3, r1, r3
 8006f9c:	b25b      	sxtb	r3, r3
 8006f9e:	43db      	mvns	r3, r3
 8006fa0:	b25b      	sxtb	r3, r3
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	b259      	sxtb	r1, r3
 8006fa6:	79fa      	ldrb	r2, [r7, #7]
 8006fa8:	4603      	mov	r3, r0
 8006faa:	01db      	lsls	r3, r3, #7
 8006fac:	4413      	add	r3, r2
 8006fae:	b2c9      	uxtb	r1, r1
 8006fb0:	4a04      	ldr	r2, [pc, #16]	; (8006fc4 <ssd1306_DrawPixel+0xa4>)
 8006fb2:	54d1      	strb	r1, [r2, r3]
 8006fb4:	e000      	b.n	8006fb8 <ssd1306_DrawPixel+0x98>
        return;
 8006fb6:	bf00      	nop
    }
}
 8006fb8:	370c      	adds	r7, #12
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	2000079c 	.word	0x2000079c

08006fc8 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8006fc8:	b590      	push	{r4, r7, lr}
 8006fca:	b089      	sub	sp, #36	; 0x24
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	4604      	mov	r4, r0
 8006fd0:	1d38      	adds	r0, r7, #4
 8006fd2:	e880 0006 	stmia.w	r0, {r1, r2}
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	4623      	mov	r3, r4
 8006fda:	73fb      	strb	r3, [r7, #15]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8006fe0:	7bfb      	ldrb	r3, [r7, #15]
 8006fe2:	2b1f      	cmp	r3, #31
 8006fe4:	d902      	bls.n	8006fec <ssd1306_WriteChar+0x24>
 8006fe6:	7bfb      	ldrb	r3, [r7, #15]
 8006fe8:	2b7e      	cmp	r3, #126	; 0x7e
 8006fea:	d901      	bls.n	8006ff0 <ssd1306_WriteChar+0x28>
        return 0;
 8006fec:	2300      	movs	r3, #0
 8006fee:	e06d      	b.n	80070cc <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8006ff0:	4b38      	ldr	r3, [pc, #224]	; (80070d4 <ssd1306_WriteChar+0x10c>)
 8006ff2:	881b      	ldrh	r3, [r3, #0]
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	793b      	ldrb	r3, [r7, #4]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	2b80      	cmp	r3, #128	; 0x80
 8006ffc:	dc06      	bgt.n	800700c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8006ffe:	4b35      	ldr	r3, [pc, #212]	; (80070d4 <ssd1306_WriteChar+0x10c>)
 8007000:	885b      	ldrh	r3, [r3, #2]
 8007002:	461a      	mov	r2, r3
 8007004:	797b      	ldrb	r3, [r7, #5]
 8007006:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8007008:	2b40      	cmp	r3, #64	; 0x40
 800700a:	dd01      	ble.n	8007010 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800700c:	2300      	movs	r3, #0
 800700e:	e05d      	b.n	80070cc <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8007010:	2300      	movs	r3, #0
 8007012:	61fb      	str	r3, [r7, #28]
 8007014:	e04c      	b.n	80070b0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	7bfb      	ldrb	r3, [r7, #15]
 800701a:	3b20      	subs	r3, #32
 800701c:	7979      	ldrb	r1, [r7, #5]
 800701e:	fb01 f303 	mul.w	r3, r1, r3
 8007022:	4619      	mov	r1, r3
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	440b      	add	r3, r1
 8007028:	005b      	lsls	r3, r3, #1
 800702a:	4413      	add	r3, r2
 800702c:	881b      	ldrh	r3, [r3, #0]
 800702e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8007030:	2300      	movs	r3, #0
 8007032:	61bb      	str	r3, [r7, #24]
 8007034:	e034      	b.n	80070a0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	fa02 f303 	lsl.w	r3, r2, r3
 800703e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d012      	beq.n	800706c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8007046:	4b23      	ldr	r3, [pc, #140]	; (80070d4 <ssd1306_WriteChar+0x10c>)
 8007048:	881b      	ldrh	r3, [r3, #0]
 800704a:	b2da      	uxtb	r2, r3
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	b2db      	uxtb	r3, r3
 8007050:	4413      	add	r3, r2
 8007052:	b2d8      	uxtb	r0, r3
 8007054:	4b1f      	ldr	r3, [pc, #124]	; (80070d4 <ssd1306_WriteChar+0x10c>)
 8007056:	885b      	ldrh	r3, [r3, #2]
 8007058:	b2da      	uxtb	r2, r3
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	b2db      	uxtb	r3, r3
 800705e:	4413      	add	r3, r2
 8007060:	b2db      	uxtb	r3, r3
 8007062:	7bba      	ldrb	r2, [r7, #14]
 8007064:	4619      	mov	r1, r3
 8007066:	f7ff ff5b 	bl	8006f20 <ssd1306_DrawPixel>
 800706a:	e016      	b.n	800709a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800706c:	4b19      	ldr	r3, [pc, #100]	; (80070d4 <ssd1306_WriteChar+0x10c>)
 800706e:	881b      	ldrh	r3, [r3, #0]
 8007070:	b2da      	uxtb	r2, r3
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	b2db      	uxtb	r3, r3
 8007076:	4413      	add	r3, r2
 8007078:	b2d8      	uxtb	r0, r3
 800707a:	4b16      	ldr	r3, [pc, #88]	; (80070d4 <ssd1306_WriteChar+0x10c>)
 800707c:	885b      	ldrh	r3, [r3, #2]
 800707e:	b2da      	uxtb	r2, r3
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	b2db      	uxtb	r3, r3
 8007084:	4413      	add	r3, r2
 8007086:	b2d9      	uxtb	r1, r3
 8007088:	7bbb      	ldrb	r3, [r7, #14]
 800708a:	2b00      	cmp	r3, #0
 800708c:	bf0c      	ite	eq
 800708e:	2301      	moveq	r3, #1
 8007090:	2300      	movne	r3, #0
 8007092:	b2db      	uxtb	r3, r3
 8007094:	461a      	mov	r2, r3
 8007096:	f7ff ff43 	bl	8006f20 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	3301      	adds	r3, #1
 800709e:	61bb      	str	r3, [r7, #24]
 80070a0:	793b      	ldrb	r3, [r7, #4]
 80070a2:	461a      	mov	r2, r3
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d3c5      	bcc.n	8007036 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	3301      	adds	r3, #1
 80070ae:	61fb      	str	r3, [r7, #28]
 80070b0:	797b      	ldrb	r3, [r7, #5]
 80070b2:	461a      	mov	r2, r3
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d3ad      	bcc.n	8007016 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80070ba:	4b06      	ldr	r3, [pc, #24]	; (80070d4 <ssd1306_WriteChar+0x10c>)
 80070bc:	881a      	ldrh	r2, [r3, #0]
 80070be:	793b      	ldrb	r3, [r7, #4]
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	4413      	add	r3, r2
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	4b03      	ldr	r3, [pc, #12]	; (80070d4 <ssd1306_WriteChar+0x10c>)
 80070c8:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80070ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3724      	adds	r7, #36	; 0x24
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd90      	pop	{r4, r7, pc}
 80070d4:	20000f9c 	.word	0x20000f9c

080070d8 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	1d38      	adds	r0, r7, #4
 80070e2:	e880 0006 	stmia.w	r0, {r1, r2}
 80070e6:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80070e8:	e012      	b.n	8007110 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	7818      	ldrb	r0, [r3, #0]
 80070ee:	78fb      	ldrb	r3, [r7, #3]
 80070f0:	1d3a      	adds	r2, r7, #4
 80070f2:	ca06      	ldmia	r2, {r1, r2}
 80070f4:	f7ff ff68 	bl	8006fc8 <ssd1306_WriteChar>
 80070f8:	4603      	mov	r3, r0
 80070fa:	461a      	mov	r2, r3
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	429a      	cmp	r2, r3
 8007102:	d002      	beq.n	800710a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	e008      	b.n	800711c <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	3301      	adds	r3, #1
 800710e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1e8      	bne.n	80070ea <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	781b      	ldrb	r3, [r3, #0]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3710      	adds	r7, #16
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	4603      	mov	r3, r0
 800712c:	460a      	mov	r2, r1
 800712e:	71fb      	strb	r3, [r7, #7]
 8007130:	4613      	mov	r3, r2
 8007132:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8007134:	79fb      	ldrb	r3, [r7, #7]
 8007136:	b29a      	uxth	r2, r3
 8007138:	4b05      	ldr	r3, [pc, #20]	; (8007150 <ssd1306_SetCursor+0x2c>)
 800713a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800713c:	79bb      	ldrb	r3, [r7, #6]
 800713e:	b29a      	uxth	r2, r3
 8007140:	4b03      	ldr	r3, [pc, #12]	; (8007150 <ssd1306_SetCursor+0x2c>)
 8007142:	805a      	strh	r2, [r3, #2]
}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr
 8007150:	20000f9c 	.word	0x20000f9c

08007154 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8007154:	b590      	push	{r4, r7, lr}
 8007156:	b089      	sub	sp, #36	; 0x24
 8007158:	af00      	add	r7, sp, #0
 800715a:	4604      	mov	r4, r0
 800715c:	4608      	mov	r0, r1
 800715e:	4611      	mov	r1, r2
 8007160:	461a      	mov	r2, r3
 8007162:	4623      	mov	r3, r4
 8007164:	71fb      	strb	r3, [r7, #7]
 8007166:	4603      	mov	r3, r0
 8007168:	71bb      	strb	r3, [r7, #6]
 800716a:	460b      	mov	r3, r1
 800716c:	717b      	strb	r3, [r7, #5]
 800716e:	4613      	mov	r3, r2
 8007170:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 8007172:	797a      	ldrb	r2, [r7, #5]
 8007174:	79fb      	ldrb	r3, [r7, #7]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	2b00      	cmp	r3, #0
 800717a:	bfb8      	it	lt
 800717c:	425b      	neglt	r3, r3
 800717e:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8007180:	793a      	ldrb	r2, [r7, #4]
 8007182:	79bb      	ldrb	r3, [r7, #6]
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	2b00      	cmp	r3, #0
 8007188:	bfb8      	it	lt
 800718a:	425b      	neglt	r3, r3
 800718c:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 800718e:	79fa      	ldrb	r2, [r7, #7]
 8007190:	797b      	ldrb	r3, [r7, #5]
 8007192:	429a      	cmp	r2, r3
 8007194:	d201      	bcs.n	800719a <ssd1306_Line+0x46>
 8007196:	2301      	movs	r3, #1
 8007198:	e001      	b.n	800719e <ssd1306_Line+0x4a>
 800719a:	f04f 33ff 	mov.w	r3, #4294967295
 800719e:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 80071a0:	79ba      	ldrb	r2, [r7, #6]
 80071a2:	793b      	ldrb	r3, [r7, #4]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d201      	bcs.n	80071ac <ssd1306_Line+0x58>
 80071a8:	2301      	movs	r3, #1
 80071aa:	e001      	b.n	80071b0 <ssd1306_Line+0x5c>
 80071ac:	f04f 33ff 	mov.w	r3, #4294967295
 80071b0:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 80071b2:	69ba      	ldr	r2, [r7, #24]
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 80071ba:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80071be:	7939      	ldrb	r1, [r7, #4]
 80071c0:	797b      	ldrb	r3, [r7, #5]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7ff feac 	bl	8006f20 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 80071c8:	e024      	b.n	8007214 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 80071ca:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80071ce:	79b9      	ldrb	r1, [r7, #6]
 80071d0:	79fb      	ldrb	r3, [r7, #7]
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7ff fea4 	bl	8006f20 <ssd1306_DrawPixel>
    error2 = error * 2;
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	005b      	lsls	r3, r3, #1
 80071dc:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	425b      	negs	r3, r3
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	dd08      	ble.n	80071fa <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 80071e8:	69fa      	ldr	r2, [r7, #28]
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	b2da      	uxtb	r2, r3
 80071f4:	79fb      	ldrb	r3, [r7, #7]
 80071f6:	4413      	add	r3, r2
 80071f8:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 80071fa:	68ba      	ldr	r2, [r7, #8]
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	429a      	cmp	r2, r3
 8007200:	da08      	bge.n	8007214 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 8007202:	69fa      	ldr	r2, [r7, #28]
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	4413      	add	r3, r2
 8007208:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	b2da      	uxtb	r2, r3
 800720e:	79bb      	ldrb	r3, [r7, #6]
 8007210:	4413      	add	r3, r2
 8007212:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8007214:	79fa      	ldrb	r2, [r7, #7]
 8007216:	797b      	ldrb	r3, [r7, #5]
 8007218:	429a      	cmp	r2, r3
 800721a:	d1d6      	bne.n	80071ca <ssd1306_Line+0x76>
 800721c:	79ba      	ldrb	r2, [r7, #6]
 800721e:	793b      	ldrb	r3, [r7, #4]
 8007220:	429a      	cmp	r2, r3
 8007222:	d1d2      	bne.n	80071ca <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8007224:	bf00      	nop
}
 8007226:	3724      	adds	r7, #36	; 0x24
 8007228:	46bd      	mov	sp, r7
 800722a:	bd90      	pop	{r4, r7, pc}

0800722c <ssd1306_DrawRectangle>:

    return;
}

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800722c:	b590      	push	{r4, r7, lr}
 800722e:	b085      	sub	sp, #20
 8007230:	af02      	add	r7, sp, #8
 8007232:	4604      	mov	r4, r0
 8007234:	4608      	mov	r0, r1
 8007236:	4611      	mov	r1, r2
 8007238:	461a      	mov	r2, r3
 800723a:	4623      	mov	r3, r4
 800723c:	71fb      	strb	r3, [r7, #7]
 800723e:	4603      	mov	r3, r0
 8007240:	71bb      	strb	r3, [r7, #6]
 8007242:	460b      	mov	r3, r1
 8007244:	717b      	strb	r3, [r7, #5]
 8007246:	4613      	mov	r3, r2
 8007248:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 800724a:	79bc      	ldrb	r4, [r7, #6]
 800724c:	797a      	ldrb	r2, [r7, #5]
 800724e:	79b9      	ldrb	r1, [r7, #6]
 8007250:	79f8      	ldrb	r0, [r7, #7]
 8007252:	7e3b      	ldrb	r3, [r7, #24]
 8007254:	9300      	str	r3, [sp, #0]
 8007256:	4623      	mov	r3, r4
 8007258:	f7ff ff7c 	bl	8007154 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 800725c:	793c      	ldrb	r4, [r7, #4]
 800725e:	797a      	ldrb	r2, [r7, #5]
 8007260:	79b9      	ldrb	r1, [r7, #6]
 8007262:	7978      	ldrb	r0, [r7, #5]
 8007264:	7e3b      	ldrb	r3, [r7, #24]
 8007266:	9300      	str	r3, [sp, #0]
 8007268:	4623      	mov	r3, r4
 800726a:	f7ff ff73 	bl	8007154 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 800726e:	793c      	ldrb	r4, [r7, #4]
 8007270:	79fa      	ldrb	r2, [r7, #7]
 8007272:	7939      	ldrb	r1, [r7, #4]
 8007274:	7978      	ldrb	r0, [r7, #5]
 8007276:	7e3b      	ldrb	r3, [r7, #24]
 8007278:	9300      	str	r3, [sp, #0]
 800727a:	4623      	mov	r3, r4
 800727c:	f7ff ff6a 	bl	8007154 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8007280:	79bc      	ldrb	r4, [r7, #6]
 8007282:	79fa      	ldrb	r2, [r7, #7]
 8007284:	7939      	ldrb	r1, [r7, #4]
 8007286:	79f8      	ldrb	r0, [r7, #7]
 8007288:	7e3b      	ldrb	r3, [r7, #24]
 800728a:	9300      	str	r3, [sp, #0]
 800728c:	4623      	mov	r3, r4
 800728e:	f7ff ff61 	bl	8007154 <ssd1306_Line>

    return;
 8007292:	bf00      	nop
}
 8007294:	370c      	adds	r7, #12
 8007296:	46bd      	mov	sp, r7
 8007298:	bd90      	pop	{r4, r7, pc}

0800729a <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800729a:	b580      	push	{r7, lr}
 800729c:	b084      	sub	sp, #16
 800729e:	af00      	add	r7, sp, #0
 80072a0:	4603      	mov	r3, r0
 80072a2:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80072a4:	2381      	movs	r3, #129	; 0x81
 80072a6:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80072a8:	7bfb      	ldrb	r3, [r7, #15]
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7ff fcfa 	bl	8006ca4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80072b0:	79fb      	ldrb	r3, [r7, #7]
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7ff fcf6 	bl	8006ca4 <ssd1306_WriteCommand>
}
 80072b8:	bf00      	nop
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	4603      	mov	r3, r0
 80072c8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80072ca:	79fb      	ldrb	r3, [r7, #7]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d005      	beq.n	80072dc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80072d0:	23af      	movs	r3, #175	; 0xaf
 80072d2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80072d4:	4b08      	ldr	r3, [pc, #32]	; (80072f8 <ssd1306_SetDisplayOn+0x38>)
 80072d6:	2201      	movs	r2, #1
 80072d8:	715a      	strb	r2, [r3, #5]
 80072da:	e004      	b.n	80072e6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80072dc:	23ae      	movs	r3, #174	; 0xae
 80072de:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80072e0:	4b05      	ldr	r3, [pc, #20]	; (80072f8 <ssd1306_SetDisplayOn+0x38>)
 80072e2:	2200      	movs	r2, #0
 80072e4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7ff fcdb 	bl	8006ca4 <ssd1306_WriteCommand>
}
 80072ee:	bf00      	nop
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	20000f9c 	.word	0x20000f9c

080072fc <__errno>:
 80072fc:	4b01      	ldr	r3, [pc, #4]	; (8007304 <__errno+0x8>)
 80072fe:	6818      	ldr	r0, [r3, #0]
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	20000450 	.word	0x20000450

08007308 <__libc_init_array>:
 8007308:	b570      	push	{r4, r5, r6, lr}
 800730a:	4d0d      	ldr	r5, [pc, #52]	; (8007340 <__libc_init_array+0x38>)
 800730c:	4c0d      	ldr	r4, [pc, #52]	; (8007344 <__libc_init_array+0x3c>)
 800730e:	1b64      	subs	r4, r4, r5
 8007310:	10a4      	asrs	r4, r4, #2
 8007312:	2600      	movs	r6, #0
 8007314:	42a6      	cmp	r6, r4
 8007316:	d109      	bne.n	800732c <__libc_init_array+0x24>
 8007318:	4d0b      	ldr	r5, [pc, #44]	; (8007348 <__libc_init_array+0x40>)
 800731a:	4c0c      	ldr	r4, [pc, #48]	; (800734c <__libc_init_array+0x44>)
 800731c:	f003 f824 	bl	800a368 <_init>
 8007320:	1b64      	subs	r4, r4, r5
 8007322:	10a4      	asrs	r4, r4, #2
 8007324:	2600      	movs	r6, #0
 8007326:	42a6      	cmp	r6, r4
 8007328:	d105      	bne.n	8007336 <__libc_init_array+0x2e>
 800732a:	bd70      	pop	{r4, r5, r6, pc}
 800732c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007330:	4798      	blx	r3
 8007332:	3601      	adds	r6, #1
 8007334:	e7ee      	b.n	8007314 <__libc_init_array+0xc>
 8007336:	f855 3b04 	ldr.w	r3, [r5], #4
 800733a:	4798      	blx	r3
 800733c:	3601      	adds	r6, #1
 800733e:	e7f2      	b.n	8007326 <__libc_init_array+0x1e>
 8007340:	0800d614 	.word	0x0800d614
 8007344:	0800d614 	.word	0x0800d614
 8007348:	0800d614 	.word	0x0800d614
 800734c:	0800d618 	.word	0x0800d618

08007350 <memcpy>:
 8007350:	440a      	add	r2, r1
 8007352:	4291      	cmp	r1, r2
 8007354:	f100 33ff 	add.w	r3, r0, #4294967295
 8007358:	d100      	bne.n	800735c <memcpy+0xc>
 800735a:	4770      	bx	lr
 800735c:	b510      	push	{r4, lr}
 800735e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007362:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007366:	4291      	cmp	r1, r2
 8007368:	d1f9      	bne.n	800735e <memcpy+0xe>
 800736a:	bd10      	pop	{r4, pc}

0800736c <memmove>:
 800736c:	4288      	cmp	r0, r1
 800736e:	b510      	push	{r4, lr}
 8007370:	eb01 0402 	add.w	r4, r1, r2
 8007374:	d902      	bls.n	800737c <memmove+0x10>
 8007376:	4284      	cmp	r4, r0
 8007378:	4623      	mov	r3, r4
 800737a:	d807      	bhi.n	800738c <memmove+0x20>
 800737c:	1e43      	subs	r3, r0, #1
 800737e:	42a1      	cmp	r1, r4
 8007380:	d008      	beq.n	8007394 <memmove+0x28>
 8007382:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007386:	f803 2f01 	strb.w	r2, [r3, #1]!
 800738a:	e7f8      	b.n	800737e <memmove+0x12>
 800738c:	4402      	add	r2, r0
 800738e:	4601      	mov	r1, r0
 8007390:	428a      	cmp	r2, r1
 8007392:	d100      	bne.n	8007396 <memmove+0x2a>
 8007394:	bd10      	pop	{r4, pc}
 8007396:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800739a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800739e:	e7f7      	b.n	8007390 <memmove+0x24>

080073a0 <memset>:
 80073a0:	4402      	add	r2, r0
 80073a2:	4603      	mov	r3, r0
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d100      	bne.n	80073aa <memset+0xa>
 80073a8:	4770      	bx	lr
 80073aa:	f803 1b01 	strb.w	r1, [r3], #1
 80073ae:	e7f9      	b.n	80073a4 <memset+0x4>

080073b0 <__cvt>:
 80073b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073b4:	ec55 4b10 	vmov	r4, r5, d0
 80073b8:	2d00      	cmp	r5, #0
 80073ba:	460e      	mov	r6, r1
 80073bc:	4619      	mov	r1, r3
 80073be:	462b      	mov	r3, r5
 80073c0:	bfbb      	ittet	lt
 80073c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80073c6:	461d      	movlt	r5, r3
 80073c8:	2300      	movge	r3, #0
 80073ca:	232d      	movlt	r3, #45	; 0x2d
 80073cc:	700b      	strb	r3, [r1, #0]
 80073ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80073d4:	4691      	mov	r9, r2
 80073d6:	f023 0820 	bic.w	r8, r3, #32
 80073da:	bfbc      	itt	lt
 80073dc:	4622      	movlt	r2, r4
 80073de:	4614      	movlt	r4, r2
 80073e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80073e4:	d005      	beq.n	80073f2 <__cvt+0x42>
 80073e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80073ea:	d100      	bne.n	80073ee <__cvt+0x3e>
 80073ec:	3601      	adds	r6, #1
 80073ee:	2102      	movs	r1, #2
 80073f0:	e000      	b.n	80073f4 <__cvt+0x44>
 80073f2:	2103      	movs	r1, #3
 80073f4:	ab03      	add	r3, sp, #12
 80073f6:	9301      	str	r3, [sp, #4]
 80073f8:	ab02      	add	r3, sp, #8
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	ec45 4b10 	vmov	d0, r4, r5
 8007400:	4653      	mov	r3, sl
 8007402:	4632      	mov	r2, r6
 8007404:	f000 fd04 	bl	8007e10 <_dtoa_r>
 8007408:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800740c:	4607      	mov	r7, r0
 800740e:	d102      	bne.n	8007416 <__cvt+0x66>
 8007410:	f019 0f01 	tst.w	r9, #1
 8007414:	d022      	beq.n	800745c <__cvt+0xac>
 8007416:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800741a:	eb07 0906 	add.w	r9, r7, r6
 800741e:	d110      	bne.n	8007442 <__cvt+0x92>
 8007420:	783b      	ldrb	r3, [r7, #0]
 8007422:	2b30      	cmp	r3, #48	; 0x30
 8007424:	d10a      	bne.n	800743c <__cvt+0x8c>
 8007426:	2200      	movs	r2, #0
 8007428:	2300      	movs	r3, #0
 800742a:	4620      	mov	r0, r4
 800742c:	4629      	mov	r1, r5
 800742e:	f7f9 fb53 	bl	8000ad8 <__aeabi_dcmpeq>
 8007432:	b918      	cbnz	r0, 800743c <__cvt+0x8c>
 8007434:	f1c6 0601 	rsb	r6, r6, #1
 8007438:	f8ca 6000 	str.w	r6, [sl]
 800743c:	f8da 3000 	ldr.w	r3, [sl]
 8007440:	4499      	add	r9, r3
 8007442:	2200      	movs	r2, #0
 8007444:	2300      	movs	r3, #0
 8007446:	4620      	mov	r0, r4
 8007448:	4629      	mov	r1, r5
 800744a:	f7f9 fb45 	bl	8000ad8 <__aeabi_dcmpeq>
 800744e:	b108      	cbz	r0, 8007454 <__cvt+0xa4>
 8007450:	f8cd 900c 	str.w	r9, [sp, #12]
 8007454:	2230      	movs	r2, #48	; 0x30
 8007456:	9b03      	ldr	r3, [sp, #12]
 8007458:	454b      	cmp	r3, r9
 800745a:	d307      	bcc.n	800746c <__cvt+0xbc>
 800745c:	9b03      	ldr	r3, [sp, #12]
 800745e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007460:	1bdb      	subs	r3, r3, r7
 8007462:	4638      	mov	r0, r7
 8007464:	6013      	str	r3, [r2, #0]
 8007466:	b004      	add	sp, #16
 8007468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800746c:	1c59      	adds	r1, r3, #1
 800746e:	9103      	str	r1, [sp, #12]
 8007470:	701a      	strb	r2, [r3, #0]
 8007472:	e7f0      	b.n	8007456 <__cvt+0xa6>

08007474 <__exponent>:
 8007474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007476:	4603      	mov	r3, r0
 8007478:	2900      	cmp	r1, #0
 800747a:	bfb8      	it	lt
 800747c:	4249      	neglt	r1, r1
 800747e:	f803 2b02 	strb.w	r2, [r3], #2
 8007482:	bfb4      	ite	lt
 8007484:	222d      	movlt	r2, #45	; 0x2d
 8007486:	222b      	movge	r2, #43	; 0x2b
 8007488:	2909      	cmp	r1, #9
 800748a:	7042      	strb	r2, [r0, #1]
 800748c:	dd2a      	ble.n	80074e4 <__exponent+0x70>
 800748e:	f10d 0407 	add.w	r4, sp, #7
 8007492:	46a4      	mov	ip, r4
 8007494:	270a      	movs	r7, #10
 8007496:	46a6      	mov	lr, r4
 8007498:	460a      	mov	r2, r1
 800749a:	fb91 f6f7 	sdiv	r6, r1, r7
 800749e:	fb07 1516 	mls	r5, r7, r6, r1
 80074a2:	3530      	adds	r5, #48	; 0x30
 80074a4:	2a63      	cmp	r2, #99	; 0x63
 80074a6:	f104 34ff 	add.w	r4, r4, #4294967295
 80074aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80074ae:	4631      	mov	r1, r6
 80074b0:	dcf1      	bgt.n	8007496 <__exponent+0x22>
 80074b2:	3130      	adds	r1, #48	; 0x30
 80074b4:	f1ae 0502 	sub.w	r5, lr, #2
 80074b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80074bc:	1c44      	adds	r4, r0, #1
 80074be:	4629      	mov	r1, r5
 80074c0:	4561      	cmp	r1, ip
 80074c2:	d30a      	bcc.n	80074da <__exponent+0x66>
 80074c4:	f10d 0209 	add.w	r2, sp, #9
 80074c8:	eba2 020e 	sub.w	r2, r2, lr
 80074cc:	4565      	cmp	r5, ip
 80074ce:	bf88      	it	hi
 80074d0:	2200      	movhi	r2, #0
 80074d2:	4413      	add	r3, r2
 80074d4:	1a18      	subs	r0, r3, r0
 80074d6:	b003      	add	sp, #12
 80074d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074de:	f804 2f01 	strb.w	r2, [r4, #1]!
 80074e2:	e7ed      	b.n	80074c0 <__exponent+0x4c>
 80074e4:	2330      	movs	r3, #48	; 0x30
 80074e6:	3130      	adds	r1, #48	; 0x30
 80074e8:	7083      	strb	r3, [r0, #2]
 80074ea:	70c1      	strb	r1, [r0, #3]
 80074ec:	1d03      	adds	r3, r0, #4
 80074ee:	e7f1      	b.n	80074d4 <__exponent+0x60>

080074f0 <_printf_float>:
 80074f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f4:	ed2d 8b02 	vpush	{d8}
 80074f8:	b08d      	sub	sp, #52	; 0x34
 80074fa:	460c      	mov	r4, r1
 80074fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007500:	4616      	mov	r6, r2
 8007502:	461f      	mov	r7, r3
 8007504:	4605      	mov	r5, r0
 8007506:	f001 fb67 	bl	8008bd8 <_localeconv_r>
 800750a:	f8d0 a000 	ldr.w	sl, [r0]
 800750e:	4650      	mov	r0, sl
 8007510:	f7f8 fe66 	bl	80001e0 <strlen>
 8007514:	2300      	movs	r3, #0
 8007516:	930a      	str	r3, [sp, #40]	; 0x28
 8007518:	6823      	ldr	r3, [r4, #0]
 800751a:	9305      	str	r3, [sp, #20]
 800751c:	f8d8 3000 	ldr.w	r3, [r8]
 8007520:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007524:	3307      	adds	r3, #7
 8007526:	f023 0307 	bic.w	r3, r3, #7
 800752a:	f103 0208 	add.w	r2, r3, #8
 800752e:	f8c8 2000 	str.w	r2, [r8]
 8007532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007536:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800753a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800753e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007542:	9307      	str	r3, [sp, #28]
 8007544:	f8cd 8018 	str.w	r8, [sp, #24]
 8007548:	ee08 0a10 	vmov	s16, r0
 800754c:	4b9f      	ldr	r3, [pc, #636]	; (80077cc <_printf_float+0x2dc>)
 800754e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007552:	f04f 32ff 	mov.w	r2, #4294967295
 8007556:	f7f9 faf1 	bl	8000b3c <__aeabi_dcmpun>
 800755a:	bb88      	cbnz	r0, 80075c0 <_printf_float+0xd0>
 800755c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007560:	4b9a      	ldr	r3, [pc, #616]	; (80077cc <_printf_float+0x2dc>)
 8007562:	f04f 32ff 	mov.w	r2, #4294967295
 8007566:	f7f9 facb 	bl	8000b00 <__aeabi_dcmple>
 800756a:	bb48      	cbnz	r0, 80075c0 <_printf_float+0xd0>
 800756c:	2200      	movs	r2, #0
 800756e:	2300      	movs	r3, #0
 8007570:	4640      	mov	r0, r8
 8007572:	4649      	mov	r1, r9
 8007574:	f7f9 faba 	bl	8000aec <__aeabi_dcmplt>
 8007578:	b110      	cbz	r0, 8007580 <_printf_float+0x90>
 800757a:	232d      	movs	r3, #45	; 0x2d
 800757c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007580:	4b93      	ldr	r3, [pc, #588]	; (80077d0 <_printf_float+0x2e0>)
 8007582:	4894      	ldr	r0, [pc, #592]	; (80077d4 <_printf_float+0x2e4>)
 8007584:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007588:	bf94      	ite	ls
 800758a:	4698      	movls	r8, r3
 800758c:	4680      	movhi	r8, r0
 800758e:	2303      	movs	r3, #3
 8007590:	6123      	str	r3, [r4, #16]
 8007592:	9b05      	ldr	r3, [sp, #20]
 8007594:	f023 0204 	bic.w	r2, r3, #4
 8007598:	6022      	str	r2, [r4, #0]
 800759a:	f04f 0900 	mov.w	r9, #0
 800759e:	9700      	str	r7, [sp, #0]
 80075a0:	4633      	mov	r3, r6
 80075a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80075a4:	4621      	mov	r1, r4
 80075a6:	4628      	mov	r0, r5
 80075a8:	f000 f9d8 	bl	800795c <_printf_common>
 80075ac:	3001      	adds	r0, #1
 80075ae:	f040 8090 	bne.w	80076d2 <_printf_float+0x1e2>
 80075b2:	f04f 30ff 	mov.w	r0, #4294967295
 80075b6:	b00d      	add	sp, #52	; 0x34
 80075b8:	ecbd 8b02 	vpop	{d8}
 80075bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075c0:	4642      	mov	r2, r8
 80075c2:	464b      	mov	r3, r9
 80075c4:	4640      	mov	r0, r8
 80075c6:	4649      	mov	r1, r9
 80075c8:	f7f9 fab8 	bl	8000b3c <__aeabi_dcmpun>
 80075cc:	b140      	cbz	r0, 80075e0 <_printf_float+0xf0>
 80075ce:	464b      	mov	r3, r9
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	bfbc      	itt	lt
 80075d4:	232d      	movlt	r3, #45	; 0x2d
 80075d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80075da:	487f      	ldr	r0, [pc, #508]	; (80077d8 <_printf_float+0x2e8>)
 80075dc:	4b7f      	ldr	r3, [pc, #508]	; (80077dc <_printf_float+0x2ec>)
 80075de:	e7d1      	b.n	8007584 <_printf_float+0x94>
 80075e0:	6863      	ldr	r3, [r4, #4]
 80075e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80075e6:	9206      	str	r2, [sp, #24]
 80075e8:	1c5a      	adds	r2, r3, #1
 80075ea:	d13f      	bne.n	800766c <_printf_float+0x17c>
 80075ec:	2306      	movs	r3, #6
 80075ee:	6063      	str	r3, [r4, #4]
 80075f0:	9b05      	ldr	r3, [sp, #20]
 80075f2:	6861      	ldr	r1, [r4, #4]
 80075f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80075f8:	2300      	movs	r3, #0
 80075fa:	9303      	str	r3, [sp, #12]
 80075fc:	ab0a      	add	r3, sp, #40	; 0x28
 80075fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007602:	ab09      	add	r3, sp, #36	; 0x24
 8007604:	ec49 8b10 	vmov	d0, r8, r9
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	6022      	str	r2, [r4, #0]
 800760c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007610:	4628      	mov	r0, r5
 8007612:	f7ff fecd 	bl	80073b0 <__cvt>
 8007616:	9b06      	ldr	r3, [sp, #24]
 8007618:	9909      	ldr	r1, [sp, #36]	; 0x24
 800761a:	2b47      	cmp	r3, #71	; 0x47
 800761c:	4680      	mov	r8, r0
 800761e:	d108      	bne.n	8007632 <_printf_float+0x142>
 8007620:	1cc8      	adds	r0, r1, #3
 8007622:	db02      	blt.n	800762a <_printf_float+0x13a>
 8007624:	6863      	ldr	r3, [r4, #4]
 8007626:	4299      	cmp	r1, r3
 8007628:	dd41      	ble.n	80076ae <_printf_float+0x1be>
 800762a:	f1ab 0b02 	sub.w	fp, fp, #2
 800762e:	fa5f fb8b 	uxtb.w	fp, fp
 8007632:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007636:	d820      	bhi.n	800767a <_printf_float+0x18a>
 8007638:	3901      	subs	r1, #1
 800763a:	465a      	mov	r2, fp
 800763c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007640:	9109      	str	r1, [sp, #36]	; 0x24
 8007642:	f7ff ff17 	bl	8007474 <__exponent>
 8007646:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007648:	1813      	adds	r3, r2, r0
 800764a:	2a01      	cmp	r2, #1
 800764c:	4681      	mov	r9, r0
 800764e:	6123      	str	r3, [r4, #16]
 8007650:	dc02      	bgt.n	8007658 <_printf_float+0x168>
 8007652:	6822      	ldr	r2, [r4, #0]
 8007654:	07d2      	lsls	r2, r2, #31
 8007656:	d501      	bpl.n	800765c <_printf_float+0x16c>
 8007658:	3301      	adds	r3, #1
 800765a:	6123      	str	r3, [r4, #16]
 800765c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007660:	2b00      	cmp	r3, #0
 8007662:	d09c      	beq.n	800759e <_printf_float+0xae>
 8007664:	232d      	movs	r3, #45	; 0x2d
 8007666:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800766a:	e798      	b.n	800759e <_printf_float+0xae>
 800766c:	9a06      	ldr	r2, [sp, #24]
 800766e:	2a47      	cmp	r2, #71	; 0x47
 8007670:	d1be      	bne.n	80075f0 <_printf_float+0x100>
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1bc      	bne.n	80075f0 <_printf_float+0x100>
 8007676:	2301      	movs	r3, #1
 8007678:	e7b9      	b.n	80075ee <_printf_float+0xfe>
 800767a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800767e:	d118      	bne.n	80076b2 <_printf_float+0x1c2>
 8007680:	2900      	cmp	r1, #0
 8007682:	6863      	ldr	r3, [r4, #4]
 8007684:	dd0b      	ble.n	800769e <_printf_float+0x1ae>
 8007686:	6121      	str	r1, [r4, #16]
 8007688:	b913      	cbnz	r3, 8007690 <_printf_float+0x1a0>
 800768a:	6822      	ldr	r2, [r4, #0]
 800768c:	07d0      	lsls	r0, r2, #31
 800768e:	d502      	bpl.n	8007696 <_printf_float+0x1a6>
 8007690:	3301      	adds	r3, #1
 8007692:	440b      	add	r3, r1
 8007694:	6123      	str	r3, [r4, #16]
 8007696:	65a1      	str	r1, [r4, #88]	; 0x58
 8007698:	f04f 0900 	mov.w	r9, #0
 800769c:	e7de      	b.n	800765c <_printf_float+0x16c>
 800769e:	b913      	cbnz	r3, 80076a6 <_printf_float+0x1b6>
 80076a0:	6822      	ldr	r2, [r4, #0]
 80076a2:	07d2      	lsls	r2, r2, #31
 80076a4:	d501      	bpl.n	80076aa <_printf_float+0x1ba>
 80076a6:	3302      	adds	r3, #2
 80076a8:	e7f4      	b.n	8007694 <_printf_float+0x1a4>
 80076aa:	2301      	movs	r3, #1
 80076ac:	e7f2      	b.n	8007694 <_printf_float+0x1a4>
 80076ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80076b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076b4:	4299      	cmp	r1, r3
 80076b6:	db05      	blt.n	80076c4 <_printf_float+0x1d4>
 80076b8:	6823      	ldr	r3, [r4, #0]
 80076ba:	6121      	str	r1, [r4, #16]
 80076bc:	07d8      	lsls	r0, r3, #31
 80076be:	d5ea      	bpl.n	8007696 <_printf_float+0x1a6>
 80076c0:	1c4b      	adds	r3, r1, #1
 80076c2:	e7e7      	b.n	8007694 <_printf_float+0x1a4>
 80076c4:	2900      	cmp	r1, #0
 80076c6:	bfd4      	ite	le
 80076c8:	f1c1 0202 	rsble	r2, r1, #2
 80076cc:	2201      	movgt	r2, #1
 80076ce:	4413      	add	r3, r2
 80076d0:	e7e0      	b.n	8007694 <_printf_float+0x1a4>
 80076d2:	6823      	ldr	r3, [r4, #0]
 80076d4:	055a      	lsls	r2, r3, #21
 80076d6:	d407      	bmi.n	80076e8 <_printf_float+0x1f8>
 80076d8:	6923      	ldr	r3, [r4, #16]
 80076da:	4642      	mov	r2, r8
 80076dc:	4631      	mov	r1, r6
 80076de:	4628      	mov	r0, r5
 80076e0:	47b8      	blx	r7
 80076e2:	3001      	adds	r0, #1
 80076e4:	d12c      	bne.n	8007740 <_printf_float+0x250>
 80076e6:	e764      	b.n	80075b2 <_printf_float+0xc2>
 80076e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80076ec:	f240 80e0 	bls.w	80078b0 <_printf_float+0x3c0>
 80076f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076f4:	2200      	movs	r2, #0
 80076f6:	2300      	movs	r3, #0
 80076f8:	f7f9 f9ee 	bl	8000ad8 <__aeabi_dcmpeq>
 80076fc:	2800      	cmp	r0, #0
 80076fe:	d034      	beq.n	800776a <_printf_float+0x27a>
 8007700:	4a37      	ldr	r2, [pc, #220]	; (80077e0 <_printf_float+0x2f0>)
 8007702:	2301      	movs	r3, #1
 8007704:	4631      	mov	r1, r6
 8007706:	4628      	mov	r0, r5
 8007708:	47b8      	blx	r7
 800770a:	3001      	adds	r0, #1
 800770c:	f43f af51 	beq.w	80075b2 <_printf_float+0xc2>
 8007710:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007714:	429a      	cmp	r2, r3
 8007716:	db02      	blt.n	800771e <_printf_float+0x22e>
 8007718:	6823      	ldr	r3, [r4, #0]
 800771a:	07d8      	lsls	r0, r3, #31
 800771c:	d510      	bpl.n	8007740 <_printf_float+0x250>
 800771e:	ee18 3a10 	vmov	r3, s16
 8007722:	4652      	mov	r2, sl
 8007724:	4631      	mov	r1, r6
 8007726:	4628      	mov	r0, r5
 8007728:	47b8      	blx	r7
 800772a:	3001      	adds	r0, #1
 800772c:	f43f af41 	beq.w	80075b2 <_printf_float+0xc2>
 8007730:	f04f 0800 	mov.w	r8, #0
 8007734:	f104 091a 	add.w	r9, r4, #26
 8007738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800773a:	3b01      	subs	r3, #1
 800773c:	4543      	cmp	r3, r8
 800773e:	dc09      	bgt.n	8007754 <_printf_float+0x264>
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	079b      	lsls	r3, r3, #30
 8007744:	f100 8105 	bmi.w	8007952 <_printf_float+0x462>
 8007748:	68e0      	ldr	r0, [r4, #12]
 800774a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800774c:	4298      	cmp	r0, r3
 800774e:	bfb8      	it	lt
 8007750:	4618      	movlt	r0, r3
 8007752:	e730      	b.n	80075b6 <_printf_float+0xc6>
 8007754:	2301      	movs	r3, #1
 8007756:	464a      	mov	r2, r9
 8007758:	4631      	mov	r1, r6
 800775a:	4628      	mov	r0, r5
 800775c:	47b8      	blx	r7
 800775e:	3001      	adds	r0, #1
 8007760:	f43f af27 	beq.w	80075b2 <_printf_float+0xc2>
 8007764:	f108 0801 	add.w	r8, r8, #1
 8007768:	e7e6      	b.n	8007738 <_printf_float+0x248>
 800776a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800776c:	2b00      	cmp	r3, #0
 800776e:	dc39      	bgt.n	80077e4 <_printf_float+0x2f4>
 8007770:	4a1b      	ldr	r2, [pc, #108]	; (80077e0 <_printf_float+0x2f0>)
 8007772:	2301      	movs	r3, #1
 8007774:	4631      	mov	r1, r6
 8007776:	4628      	mov	r0, r5
 8007778:	47b8      	blx	r7
 800777a:	3001      	adds	r0, #1
 800777c:	f43f af19 	beq.w	80075b2 <_printf_float+0xc2>
 8007780:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007784:	4313      	orrs	r3, r2
 8007786:	d102      	bne.n	800778e <_printf_float+0x29e>
 8007788:	6823      	ldr	r3, [r4, #0]
 800778a:	07d9      	lsls	r1, r3, #31
 800778c:	d5d8      	bpl.n	8007740 <_printf_float+0x250>
 800778e:	ee18 3a10 	vmov	r3, s16
 8007792:	4652      	mov	r2, sl
 8007794:	4631      	mov	r1, r6
 8007796:	4628      	mov	r0, r5
 8007798:	47b8      	blx	r7
 800779a:	3001      	adds	r0, #1
 800779c:	f43f af09 	beq.w	80075b2 <_printf_float+0xc2>
 80077a0:	f04f 0900 	mov.w	r9, #0
 80077a4:	f104 0a1a 	add.w	sl, r4, #26
 80077a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077aa:	425b      	negs	r3, r3
 80077ac:	454b      	cmp	r3, r9
 80077ae:	dc01      	bgt.n	80077b4 <_printf_float+0x2c4>
 80077b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077b2:	e792      	b.n	80076da <_printf_float+0x1ea>
 80077b4:	2301      	movs	r3, #1
 80077b6:	4652      	mov	r2, sl
 80077b8:	4631      	mov	r1, r6
 80077ba:	4628      	mov	r0, r5
 80077bc:	47b8      	blx	r7
 80077be:	3001      	adds	r0, #1
 80077c0:	f43f aef7 	beq.w	80075b2 <_printf_float+0xc2>
 80077c4:	f109 0901 	add.w	r9, r9, #1
 80077c8:	e7ee      	b.n	80077a8 <_printf_float+0x2b8>
 80077ca:	bf00      	nop
 80077cc:	7fefffff 	.word	0x7fefffff
 80077d0:	0800d238 	.word	0x0800d238
 80077d4:	0800d23c 	.word	0x0800d23c
 80077d8:	0800d244 	.word	0x0800d244
 80077dc:	0800d240 	.word	0x0800d240
 80077e0:	0800d248 	.word	0x0800d248
 80077e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80077e8:	429a      	cmp	r2, r3
 80077ea:	bfa8      	it	ge
 80077ec:	461a      	movge	r2, r3
 80077ee:	2a00      	cmp	r2, #0
 80077f0:	4691      	mov	r9, r2
 80077f2:	dc37      	bgt.n	8007864 <_printf_float+0x374>
 80077f4:	f04f 0b00 	mov.w	fp, #0
 80077f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077fc:	f104 021a 	add.w	r2, r4, #26
 8007800:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007802:	9305      	str	r3, [sp, #20]
 8007804:	eba3 0309 	sub.w	r3, r3, r9
 8007808:	455b      	cmp	r3, fp
 800780a:	dc33      	bgt.n	8007874 <_printf_float+0x384>
 800780c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007810:	429a      	cmp	r2, r3
 8007812:	db3b      	blt.n	800788c <_printf_float+0x39c>
 8007814:	6823      	ldr	r3, [r4, #0]
 8007816:	07da      	lsls	r2, r3, #31
 8007818:	d438      	bmi.n	800788c <_printf_float+0x39c>
 800781a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800781c:	9a05      	ldr	r2, [sp, #20]
 800781e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007820:	1a9a      	subs	r2, r3, r2
 8007822:	eba3 0901 	sub.w	r9, r3, r1
 8007826:	4591      	cmp	r9, r2
 8007828:	bfa8      	it	ge
 800782a:	4691      	movge	r9, r2
 800782c:	f1b9 0f00 	cmp.w	r9, #0
 8007830:	dc35      	bgt.n	800789e <_printf_float+0x3ae>
 8007832:	f04f 0800 	mov.w	r8, #0
 8007836:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800783a:	f104 0a1a 	add.w	sl, r4, #26
 800783e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007842:	1a9b      	subs	r3, r3, r2
 8007844:	eba3 0309 	sub.w	r3, r3, r9
 8007848:	4543      	cmp	r3, r8
 800784a:	f77f af79 	ble.w	8007740 <_printf_float+0x250>
 800784e:	2301      	movs	r3, #1
 8007850:	4652      	mov	r2, sl
 8007852:	4631      	mov	r1, r6
 8007854:	4628      	mov	r0, r5
 8007856:	47b8      	blx	r7
 8007858:	3001      	adds	r0, #1
 800785a:	f43f aeaa 	beq.w	80075b2 <_printf_float+0xc2>
 800785e:	f108 0801 	add.w	r8, r8, #1
 8007862:	e7ec      	b.n	800783e <_printf_float+0x34e>
 8007864:	4613      	mov	r3, r2
 8007866:	4631      	mov	r1, r6
 8007868:	4642      	mov	r2, r8
 800786a:	4628      	mov	r0, r5
 800786c:	47b8      	blx	r7
 800786e:	3001      	adds	r0, #1
 8007870:	d1c0      	bne.n	80077f4 <_printf_float+0x304>
 8007872:	e69e      	b.n	80075b2 <_printf_float+0xc2>
 8007874:	2301      	movs	r3, #1
 8007876:	4631      	mov	r1, r6
 8007878:	4628      	mov	r0, r5
 800787a:	9205      	str	r2, [sp, #20]
 800787c:	47b8      	blx	r7
 800787e:	3001      	adds	r0, #1
 8007880:	f43f ae97 	beq.w	80075b2 <_printf_float+0xc2>
 8007884:	9a05      	ldr	r2, [sp, #20]
 8007886:	f10b 0b01 	add.w	fp, fp, #1
 800788a:	e7b9      	b.n	8007800 <_printf_float+0x310>
 800788c:	ee18 3a10 	vmov	r3, s16
 8007890:	4652      	mov	r2, sl
 8007892:	4631      	mov	r1, r6
 8007894:	4628      	mov	r0, r5
 8007896:	47b8      	blx	r7
 8007898:	3001      	adds	r0, #1
 800789a:	d1be      	bne.n	800781a <_printf_float+0x32a>
 800789c:	e689      	b.n	80075b2 <_printf_float+0xc2>
 800789e:	9a05      	ldr	r2, [sp, #20]
 80078a0:	464b      	mov	r3, r9
 80078a2:	4442      	add	r2, r8
 80078a4:	4631      	mov	r1, r6
 80078a6:	4628      	mov	r0, r5
 80078a8:	47b8      	blx	r7
 80078aa:	3001      	adds	r0, #1
 80078ac:	d1c1      	bne.n	8007832 <_printf_float+0x342>
 80078ae:	e680      	b.n	80075b2 <_printf_float+0xc2>
 80078b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078b2:	2a01      	cmp	r2, #1
 80078b4:	dc01      	bgt.n	80078ba <_printf_float+0x3ca>
 80078b6:	07db      	lsls	r3, r3, #31
 80078b8:	d538      	bpl.n	800792c <_printf_float+0x43c>
 80078ba:	2301      	movs	r3, #1
 80078bc:	4642      	mov	r2, r8
 80078be:	4631      	mov	r1, r6
 80078c0:	4628      	mov	r0, r5
 80078c2:	47b8      	blx	r7
 80078c4:	3001      	adds	r0, #1
 80078c6:	f43f ae74 	beq.w	80075b2 <_printf_float+0xc2>
 80078ca:	ee18 3a10 	vmov	r3, s16
 80078ce:	4652      	mov	r2, sl
 80078d0:	4631      	mov	r1, r6
 80078d2:	4628      	mov	r0, r5
 80078d4:	47b8      	blx	r7
 80078d6:	3001      	adds	r0, #1
 80078d8:	f43f ae6b 	beq.w	80075b2 <_printf_float+0xc2>
 80078dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80078e0:	2200      	movs	r2, #0
 80078e2:	2300      	movs	r3, #0
 80078e4:	f7f9 f8f8 	bl	8000ad8 <__aeabi_dcmpeq>
 80078e8:	b9d8      	cbnz	r0, 8007922 <_printf_float+0x432>
 80078ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078ec:	f108 0201 	add.w	r2, r8, #1
 80078f0:	3b01      	subs	r3, #1
 80078f2:	4631      	mov	r1, r6
 80078f4:	4628      	mov	r0, r5
 80078f6:	47b8      	blx	r7
 80078f8:	3001      	adds	r0, #1
 80078fa:	d10e      	bne.n	800791a <_printf_float+0x42a>
 80078fc:	e659      	b.n	80075b2 <_printf_float+0xc2>
 80078fe:	2301      	movs	r3, #1
 8007900:	4652      	mov	r2, sl
 8007902:	4631      	mov	r1, r6
 8007904:	4628      	mov	r0, r5
 8007906:	47b8      	blx	r7
 8007908:	3001      	adds	r0, #1
 800790a:	f43f ae52 	beq.w	80075b2 <_printf_float+0xc2>
 800790e:	f108 0801 	add.w	r8, r8, #1
 8007912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007914:	3b01      	subs	r3, #1
 8007916:	4543      	cmp	r3, r8
 8007918:	dcf1      	bgt.n	80078fe <_printf_float+0x40e>
 800791a:	464b      	mov	r3, r9
 800791c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007920:	e6dc      	b.n	80076dc <_printf_float+0x1ec>
 8007922:	f04f 0800 	mov.w	r8, #0
 8007926:	f104 0a1a 	add.w	sl, r4, #26
 800792a:	e7f2      	b.n	8007912 <_printf_float+0x422>
 800792c:	2301      	movs	r3, #1
 800792e:	4642      	mov	r2, r8
 8007930:	e7df      	b.n	80078f2 <_printf_float+0x402>
 8007932:	2301      	movs	r3, #1
 8007934:	464a      	mov	r2, r9
 8007936:	4631      	mov	r1, r6
 8007938:	4628      	mov	r0, r5
 800793a:	47b8      	blx	r7
 800793c:	3001      	adds	r0, #1
 800793e:	f43f ae38 	beq.w	80075b2 <_printf_float+0xc2>
 8007942:	f108 0801 	add.w	r8, r8, #1
 8007946:	68e3      	ldr	r3, [r4, #12]
 8007948:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800794a:	1a5b      	subs	r3, r3, r1
 800794c:	4543      	cmp	r3, r8
 800794e:	dcf0      	bgt.n	8007932 <_printf_float+0x442>
 8007950:	e6fa      	b.n	8007748 <_printf_float+0x258>
 8007952:	f04f 0800 	mov.w	r8, #0
 8007956:	f104 0919 	add.w	r9, r4, #25
 800795a:	e7f4      	b.n	8007946 <_printf_float+0x456>

0800795c <_printf_common>:
 800795c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007960:	4616      	mov	r6, r2
 8007962:	4699      	mov	r9, r3
 8007964:	688a      	ldr	r2, [r1, #8]
 8007966:	690b      	ldr	r3, [r1, #16]
 8007968:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800796c:	4293      	cmp	r3, r2
 800796e:	bfb8      	it	lt
 8007970:	4613      	movlt	r3, r2
 8007972:	6033      	str	r3, [r6, #0]
 8007974:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007978:	4607      	mov	r7, r0
 800797a:	460c      	mov	r4, r1
 800797c:	b10a      	cbz	r2, 8007982 <_printf_common+0x26>
 800797e:	3301      	adds	r3, #1
 8007980:	6033      	str	r3, [r6, #0]
 8007982:	6823      	ldr	r3, [r4, #0]
 8007984:	0699      	lsls	r1, r3, #26
 8007986:	bf42      	ittt	mi
 8007988:	6833      	ldrmi	r3, [r6, #0]
 800798a:	3302      	addmi	r3, #2
 800798c:	6033      	strmi	r3, [r6, #0]
 800798e:	6825      	ldr	r5, [r4, #0]
 8007990:	f015 0506 	ands.w	r5, r5, #6
 8007994:	d106      	bne.n	80079a4 <_printf_common+0x48>
 8007996:	f104 0a19 	add.w	sl, r4, #25
 800799a:	68e3      	ldr	r3, [r4, #12]
 800799c:	6832      	ldr	r2, [r6, #0]
 800799e:	1a9b      	subs	r3, r3, r2
 80079a0:	42ab      	cmp	r3, r5
 80079a2:	dc26      	bgt.n	80079f2 <_printf_common+0x96>
 80079a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079a8:	1e13      	subs	r3, r2, #0
 80079aa:	6822      	ldr	r2, [r4, #0]
 80079ac:	bf18      	it	ne
 80079ae:	2301      	movne	r3, #1
 80079b0:	0692      	lsls	r2, r2, #26
 80079b2:	d42b      	bmi.n	8007a0c <_printf_common+0xb0>
 80079b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079b8:	4649      	mov	r1, r9
 80079ba:	4638      	mov	r0, r7
 80079bc:	47c0      	blx	r8
 80079be:	3001      	adds	r0, #1
 80079c0:	d01e      	beq.n	8007a00 <_printf_common+0xa4>
 80079c2:	6823      	ldr	r3, [r4, #0]
 80079c4:	68e5      	ldr	r5, [r4, #12]
 80079c6:	6832      	ldr	r2, [r6, #0]
 80079c8:	f003 0306 	and.w	r3, r3, #6
 80079cc:	2b04      	cmp	r3, #4
 80079ce:	bf08      	it	eq
 80079d0:	1aad      	subeq	r5, r5, r2
 80079d2:	68a3      	ldr	r3, [r4, #8]
 80079d4:	6922      	ldr	r2, [r4, #16]
 80079d6:	bf0c      	ite	eq
 80079d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079dc:	2500      	movne	r5, #0
 80079de:	4293      	cmp	r3, r2
 80079e0:	bfc4      	itt	gt
 80079e2:	1a9b      	subgt	r3, r3, r2
 80079e4:	18ed      	addgt	r5, r5, r3
 80079e6:	2600      	movs	r6, #0
 80079e8:	341a      	adds	r4, #26
 80079ea:	42b5      	cmp	r5, r6
 80079ec:	d11a      	bne.n	8007a24 <_printf_common+0xc8>
 80079ee:	2000      	movs	r0, #0
 80079f0:	e008      	b.n	8007a04 <_printf_common+0xa8>
 80079f2:	2301      	movs	r3, #1
 80079f4:	4652      	mov	r2, sl
 80079f6:	4649      	mov	r1, r9
 80079f8:	4638      	mov	r0, r7
 80079fa:	47c0      	blx	r8
 80079fc:	3001      	adds	r0, #1
 80079fe:	d103      	bne.n	8007a08 <_printf_common+0xac>
 8007a00:	f04f 30ff 	mov.w	r0, #4294967295
 8007a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a08:	3501      	adds	r5, #1
 8007a0a:	e7c6      	b.n	800799a <_printf_common+0x3e>
 8007a0c:	18e1      	adds	r1, r4, r3
 8007a0e:	1c5a      	adds	r2, r3, #1
 8007a10:	2030      	movs	r0, #48	; 0x30
 8007a12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a16:	4422      	add	r2, r4
 8007a18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a20:	3302      	adds	r3, #2
 8007a22:	e7c7      	b.n	80079b4 <_printf_common+0x58>
 8007a24:	2301      	movs	r3, #1
 8007a26:	4622      	mov	r2, r4
 8007a28:	4649      	mov	r1, r9
 8007a2a:	4638      	mov	r0, r7
 8007a2c:	47c0      	blx	r8
 8007a2e:	3001      	adds	r0, #1
 8007a30:	d0e6      	beq.n	8007a00 <_printf_common+0xa4>
 8007a32:	3601      	adds	r6, #1
 8007a34:	e7d9      	b.n	80079ea <_printf_common+0x8e>
	...

08007a38 <_printf_i>:
 8007a38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a3c:	7e0f      	ldrb	r7, [r1, #24]
 8007a3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a40:	2f78      	cmp	r7, #120	; 0x78
 8007a42:	4691      	mov	r9, r2
 8007a44:	4680      	mov	r8, r0
 8007a46:	460c      	mov	r4, r1
 8007a48:	469a      	mov	sl, r3
 8007a4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a4e:	d807      	bhi.n	8007a60 <_printf_i+0x28>
 8007a50:	2f62      	cmp	r7, #98	; 0x62
 8007a52:	d80a      	bhi.n	8007a6a <_printf_i+0x32>
 8007a54:	2f00      	cmp	r7, #0
 8007a56:	f000 80d8 	beq.w	8007c0a <_printf_i+0x1d2>
 8007a5a:	2f58      	cmp	r7, #88	; 0x58
 8007a5c:	f000 80a3 	beq.w	8007ba6 <_printf_i+0x16e>
 8007a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a68:	e03a      	b.n	8007ae0 <_printf_i+0xa8>
 8007a6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a6e:	2b15      	cmp	r3, #21
 8007a70:	d8f6      	bhi.n	8007a60 <_printf_i+0x28>
 8007a72:	a101      	add	r1, pc, #4	; (adr r1, 8007a78 <_printf_i+0x40>)
 8007a74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a78:	08007ad1 	.word	0x08007ad1
 8007a7c:	08007ae5 	.word	0x08007ae5
 8007a80:	08007a61 	.word	0x08007a61
 8007a84:	08007a61 	.word	0x08007a61
 8007a88:	08007a61 	.word	0x08007a61
 8007a8c:	08007a61 	.word	0x08007a61
 8007a90:	08007ae5 	.word	0x08007ae5
 8007a94:	08007a61 	.word	0x08007a61
 8007a98:	08007a61 	.word	0x08007a61
 8007a9c:	08007a61 	.word	0x08007a61
 8007aa0:	08007a61 	.word	0x08007a61
 8007aa4:	08007bf1 	.word	0x08007bf1
 8007aa8:	08007b15 	.word	0x08007b15
 8007aac:	08007bd3 	.word	0x08007bd3
 8007ab0:	08007a61 	.word	0x08007a61
 8007ab4:	08007a61 	.word	0x08007a61
 8007ab8:	08007c13 	.word	0x08007c13
 8007abc:	08007a61 	.word	0x08007a61
 8007ac0:	08007b15 	.word	0x08007b15
 8007ac4:	08007a61 	.word	0x08007a61
 8007ac8:	08007a61 	.word	0x08007a61
 8007acc:	08007bdb 	.word	0x08007bdb
 8007ad0:	682b      	ldr	r3, [r5, #0]
 8007ad2:	1d1a      	adds	r2, r3, #4
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	602a      	str	r2, [r5, #0]
 8007ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007adc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e0a3      	b.n	8007c2c <_printf_i+0x1f4>
 8007ae4:	6820      	ldr	r0, [r4, #0]
 8007ae6:	6829      	ldr	r1, [r5, #0]
 8007ae8:	0606      	lsls	r6, r0, #24
 8007aea:	f101 0304 	add.w	r3, r1, #4
 8007aee:	d50a      	bpl.n	8007b06 <_printf_i+0xce>
 8007af0:	680e      	ldr	r6, [r1, #0]
 8007af2:	602b      	str	r3, [r5, #0]
 8007af4:	2e00      	cmp	r6, #0
 8007af6:	da03      	bge.n	8007b00 <_printf_i+0xc8>
 8007af8:	232d      	movs	r3, #45	; 0x2d
 8007afa:	4276      	negs	r6, r6
 8007afc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b00:	485e      	ldr	r0, [pc, #376]	; (8007c7c <_printf_i+0x244>)
 8007b02:	230a      	movs	r3, #10
 8007b04:	e019      	b.n	8007b3a <_printf_i+0x102>
 8007b06:	680e      	ldr	r6, [r1, #0]
 8007b08:	602b      	str	r3, [r5, #0]
 8007b0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b0e:	bf18      	it	ne
 8007b10:	b236      	sxthne	r6, r6
 8007b12:	e7ef      	b.n	8007af4 <_printf_i+0xbc>
 8007b14:	682b      	ldr	r3, [r5, #0]
 8007b16:	6820      	ldr	r0, [r4, #0]
 8007b18:	1d19      	adds	r1, r3, #4
 8007b1a:	6029      	str	r1, [r5, #0]
 8007b1c:	0601      	lsls	r1, r0, #24
 8007b1e:	d501      	bpl.n	8007b24 <_printf_i+0xec>
 8007b20:	681e      	ldr	r6, [r3, #0]
 8007b22:	e002      	b.n	8007b2a <_printf_i+0xf2>
 8007b24:	0646      	lsls	r6, r0, #25
 8007b26:	d5fb      	bpl.n	8007b20 <_printf_i+0xe8>
 8007b28:	881e      	ldrh	r6, [r3, #0]
 8007b2a:	4854      	ldr	r0, [pc, #336]	; (8007c7c <_printf_i+0x244>)
 8007b2c:	2f6f      	cmp	r7, #111	; 0x6f
 8007b2e:	bf0c      	ite	eq
 8007b30:	2308      	moveq	r3, #8
 8007b32:	230a      	movne	r3, #10
 8007b34:	2100      	movs	r1, #0
 8007b36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b3a:	6865      	ldr	r5, [r4, #4]
 8007b3c:	60a5      	str	r5, [r4, #8]
 8007b3e:	2d00      	cmp	r5, #0
 8007b40:	bfa2      	ittt	ge
 8007b42:	6821      	ldrge	r1, [r4, #0]
 8007b44:	f021 0104 	bicge.w	r1, r1, #4
 8007b48:	6021      	strge	r1, [r4, #0]
 8007b4a:	b90e      	cbnz	r6, 8007b50 <_printf_i+0x118>
 8007b4c:	2d00      	cmp	r5, #0
 8007b4e:	d04d      	beq.n	8007bec <_printf_i+0x1b4>
 8007b50:	4615      	mov	r5, r2
 8007b52:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b56:	fb03 6711 	mls	r7, r3, r1, r6
 8007b5a:	5dc7      	ldrb	r7, [r0, r7]
 8007b5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b60:	4637      	mov	r7, r6
 8007b62:	42bb      	cmp	r3, r7
 8007b64:	460e      	mov	r6, r1
 8007b66:	d9f4      	bls.n	8007b52 <_printf_i+0x11a>
 8007b68:	2b08      	cmp	r3, #8
 8007b6a:	d10b      	bne.n	8007b84 <_printf_i+0x14c>
 8007b6c:	6823      	ldr	r3, [r4, #0]
 8007b6e:	07de      	lsls	r6, r3, #31
 8007b70:	d508      	bpl.n	8007b84 <_printf_i+0x14c>
 8007b72:	6923      	ldr	r3, [r4, #16]
 8007b74:	6861      	ldr	r1, [r4, #4]
 8007b76:	4299      	cmp	r1, r3
 8007b78:	bfde      	ittt	le
 8007b7a:	2330      	movle	r3, #48	; 0x30
 8007b7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b84:	1b52      	subs	r2, r2, r5
 8007b86:	6122      	str	r2, [r4, #16]
 8007b88:	f8cd a000 	str.w	sl, [sp]
 8007b8c:	464b      	mov	r3, r9
 8007b8e:	aa03      	add	r2, sp, #12
 8007b90:	4621      	mov	r1, r4
 8007b92:	4640      	mov	r0, r8
 8007b94:	f7ff fee2 	bl	800795c <_printf_common>
 8007b98:	3001      	adds	r0, #1
 8007b9a:	d14c      	bne.n	8007c36 <_printf_i+0x1fe>
 8007b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba0:	b004      	add	sp, #16
 8007ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ba6:	4835      	ldr	r0, [pc, #212]	; (8007c7c <_printf_i+0x244>)
 8007ba8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007bac:	6829      	ldr	r1, [r5, #0]
 8007bae:	6823      	ldr	r3, [r4, #0]
 8007bb0:	f851 6b04 	ldr.w	r6, [r1], #4
 8007bb4:	6029      	str	r1, [r5, #0]
 8007bb6:	061d      	lsls	r5, r3, #24
 8007bb8:	d514      	bpl.n	8007be4 <_printf_i+0x1ac>
 8007bba:	07df      	lsls	r7, r3, #31
 8007bbc:	bf44      	itt	mi
 8007bbe:	f043 0320 	orrmi.w	r3, r3, #32
 8007bc2:	6023      	strmi	r3, [r4, #0]
 8007bc4:	b91e      	cbnz	r6, 8007bce <_printf_i+0x196>
 8007bc6:	6823      	ldr	r3, [r4, #0]
 8007bc8:	f023 0320 	bic.w	r3, r3, #32
 8007bcc:	6023      	str	r3, [r4, #0]
 8007bce:	2310      	movs	r3, #16
 8007bd0:	e7b0      	b.n	8007b34 <_printf_i+0xfc>
 8007bd2:	6823      	ldr	r3, [r4, #0]
 8007bd4:	f043 0320 	orr.w	r3, r3, #32
 8007bd8:	6023      	str	r3, [r4, #0]
 8007bda:	2378      	movs	r3, #120	; 0x78
 8007bdc:	4828      	ldr	r0, [pc, #160]	; (8007c80 <_printf_i+0x248>)
 8007bde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007be2:	e7e3      	b.n	8007bac <_printf_i+0x174>
 8007be4:	0659      	lsls	r1, r3, #25
 8007be6:	bf48      	it	mi
 8007be8:	b2b6      	uxthmi	r6, r6
 8007bea:	e7e6      	b.n	8007bba <_printf_i+0x182>
 8007bec:	4615      	mov	r5, r2
 8007bee:	e7bb      	b.n	8007b68 <_printf_i+0x130>
 8007bf0:	682b      	ldr	r3, [r5, #0]
 8007bf2:	6826      	ldr	r6, [r4, #0]
 8007bf4:	6961      	ldr	r1, [r4, #20]
 8007bf6:	1d18      	adds	r0, r3, #4
 8007bf8:	6028      	str	r0, [r5, #0]
 8007bfa:	0635      	lsls	r5, r6, #24
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	d501      	bpl.n	8007c04 <_printf_i+0x1cc>
 8007c00:	6019      	str	r1, [r3, #0]
 8007c02:	e002      	b.n	8007c0a <_printf_i+0x1d2>
 8007c04:	0670      	lsls	r0, r6, #25
 8007c06:	d5fb      	bpl.n	8007c00 <_printf_i+0x1c8>
 8007c08:	8019      	strh	r1, [r3, #0]
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	6123      	str	r3, [r4, #16]
 8007c0e:	4615      	mov	r5, r2
 8007c10:	e7ba      	b.n	8007b88 <_printf_i+0x150>
 8007c12:	682b      	ldr	r3, [r5, #0]
 8007c14:	1d1a      	adds	r2, r3, #4
 8007c16:	602a      	str	r2, [r5, #0]
 8007c18:	681d      	ldr	r5, [r3, #0]
 8007c1a:	6862      	ldr	r2, [r4, #4]
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	4628      	mov	r0, r5
 8007c20:	f7f8 fae6 	bl	80001f0 <memchr>
 8007c24:	b108      	cbz	r0, 8007c2a <_printf_i+0x1f2>
 8007c26:	1b40      	subs	r0, r0, r5
 8007c28:	6060      	str	r0, [r4, #4]
 8007c2a:	6863      	ldr	r3, [r4, #4]
 8007c2c:	6123      	str	r3, [r4, #16]
 8007c2e:	2300      	movs	r3, #0
 8007c30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c34:	e7a8      	b.n	8007b88 <_printf_i+0x150>
 8007c36:	6923      	ldr	r3, [r4, #16]
 8007c38:	462a      	mov	r2, r5
 8007c3a:	4649      	mov	r1, r9
 8007c3c:	4640      	mov	r0, r8
 8007c3e:	47d0      	blx	sl
 8007c40:	3001      	adds	r0, #1
 8007c42:	d0ab      	beq.n	8007b9c <_printf_i+0x164>
 8007c44:	6823      	ldr	r3, [r4, #0]
 8007c46:	079b      	lsls	r3, r3, #30
 8007c48:	d413      	bmi.n	8007c72 <_printf_i+0x23a>
 8007c4a:	68e0      	ldr	r0, [r4, #12]
 8007c4c:	9b03      	ldr	r3, [sp, #12]
 8007c4e:	4298      	cmp	r0, r3
 8007c50:	bfb8      	it	lt
 8007c52:	4618      	movlt	r0, r3
 8007c54:	e7a4      	b.n	8007ba0 <_printf_i+0x168>
 8007c56:	2301      	movs	r3, #1
 8007c58:	4632      	mov	r2, r6
 8007c5a:	4649      	mov	r1, r9
 8007c5c:	4640      	mov	r0, r8
 8007c5e:	47d0      	blx	sl
 8007c60:	3001      	adds	r0, #1
 8007c62:	d09b      	beq.n	8007b9c <_printf_i+0x164>
 8007c64:	3501      	adds	r5, #1
 8007c66:	68e3      	ldr	r3, [r4, #12]
 8007c68:	9903      	ldr	r1, [sp, #12]
 8007c6a:	1a5b      	subs	r3, r3, r1
 8007c6c:	42ab      	cmp	r3, r5
 8007c6e:	dcf2      	bgt.n	8007c56 <_printf_i+0x21e>
 8007c70:	e7eb      	b.n	8007c4a <_printf_i+0x212>
 8007c72:	2500      	movs	r5, #0
 8007c74:	f104 0619 	add.w	r6, r4, #25
 8007c78:	e7f5      	b.n	8007c66 <_printf_i+0x22e>
 8007c7a:	bf00      	nop
 8007c7c:	0800d24a 	.word	0x0800d24a
 8007c80:	0800d25b 	.word	0x0800d25b

08007c84 <iprintf>:
 8007c84:	b40f      	push	{r0, r1, r2, r3}
 8007c86:	4b0a      	ldr	r3, [pc, #40]	; (8007cb0 <iprintf+0x2c>)
 8007c88:	b513      	push	{r0, r1, r4, lr}
 8007c8a:	681c      	ldr	r4, [r3, #0]
 8007c8c:	b124      	cbz	r4, 8007c98 <iprintf+0x14>
 8007c8e:	69a3      	ldr	r3, [r4, #24]
 8007c90:	b913      	cbnz	r3, 8007c98 <iprintf+0x14>
 8007c92:	4620      	mov	r0, r4
 8007c94:	f000 ff02 	bl	8008a9c <__sinit>
 8007c98:	ab05      	add	r3, sp, #20
 8007c9a:	9a04      	ldr	r2, [sp, #16]
 8007c9c:	68a1      	ldr	r1, [r4, #8]
 8007c9e:	9301      	str	r3, [sp, #4]
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	f001 fda9 	bl	80097f8 <_vfiprintf_r>
 8007ca6:	b002      	add	sp, #8
 8007ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cac:	b004      	add	sp, #16
 8007cae:	4770      	bx	lr
 8007cb0:	20000450 	.word	0x20000450

08007cb4 <siprintf>:
 8007cb4:	b40e      	push	{r1, r2, r3}
 8007cb6:	b500      	push	{lr}
 8007cb8:	b09c      	sub	sp, #112	; 0x70
 8007cba:	ab1d      	add	r3, sp, #116	; 0x74
 8007cbc:	9002      	str	r0, [sp, #8]
 8007cbe:	9006      	str	r0, [sp, #24]
 8007cc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007cc4:	4809      	ldr	r0, [pc, #36]	; (8007cec <siprintf+0x38>)
 8007cc6:	9107      	str	r1, [sp, #28]
 8007cc8:	9104      	str	r1, [sp, #16]
 8007cca:	4909      	ldr	r1, [pc, #36]	; (8007cf0 <siprintf+0x3c>)
 8007ccc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cd0:	9105      	str	r1, [sp, #20]
 8007cd2:	6800      	ldr	r0, [r0, #0]
 8007cd4:	9301      	str	r3, [sp, #4]
 8007cd6:	a902      	add	r1, sp, #8
 8007cd8:	f001 fc64 	bl	80095a4 <_svfiprintf_r>
 8007cdc:	9b02      	ldr	r3, [sp, #8]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	701a      	strb	r2, [r3, #0]
 8007ce2:	b01c      	add	sp, #112	; 0x70
 8007ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ce8:	b003      	add	sp, #12
 8007cea:	4770      	bx	lr
 8007cec:	20000450 	.word	0x20000450
 8007cf0:	ffff0208 	.word	0xffff0208

08007cf4 <quorem>:
 8007cf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf8:	6903      	ldr	r3, [r0, #16]
 8007cfa:	690c      	ldr	r4, [r1, #16]
 8007cfc:	42a3      	cmp	r3, r4
 8007cfe:	4607      	mov	r7, r0
 8007d00:	f2c0 8081 	blt.w	8007e06 <quorem+0x112>
 8007d04:	3c01      	subs	r4, #1
 8007d06:	f101 0814 	add.w	r8, r1, #20
 8007d0a:	f100 0514 	add.w	r5, r0, #20
 8007d0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d12:	9301      	str	r3, [sp, #4]
 8007d14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d28:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d2c:	d331      	bcc.n	8007d92 <quorem+0x9e>
 8007d2e:	f04f 0e00 	mov.w	lr, #0
 8007d32:	4640      	mov	r0, r8
 8007d34:	46ac      	mov	ip, r5
 8007d36:	46f2      	mov	sl, lr
 8007d38:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d3c:	b293      	uxth	r3, r2
 8007d3e:	fb06 e303 	mla	r3, r6, r3, lr
 8007d42:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	ebaa 0303 	sub.w	r3, sl, r3
 8007d4c:	f8dc a000 	ldr.w	sl, [ip]
 8007d50:	0c12      	lsrs	r2, r2, #16
 8007d52:	fa13 f38a 	uxtah	r3, r3, sl
 8007d56:	fb06 e202 	mla	r2, r6, r2, lr
 8007d5a:	9300      	str	r3, [sp, #0]
 8007d5c:	9b00      	ldr	r3, [sp, #0]
 8007d5e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d62:	b292      	uxth	r2, r2
 8007d64:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007d68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d6c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007d70:	4581      	cmp	r9, r0
 8007d72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d76:	f84c 3b04 	str.w	r3, [ip], #4
 8007d7a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007d7e:	d2db      	bcs.n	8007d38 <quorem+0x44>
 8007d80:	f855 300b 	ldr.w	r3, [r5, fp]
 8007d84:	b92b      	cbnz	r3, 8007d92 <quorem+0x9e>
 8007d86:	9b01      	ldr	r3, [sp, #4]
 8007d88:	3b04      	subs	r3, #4
 8007d8a:	429d      	cmp	r5, r3
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	d32e      	bcc.n	8007dee <quorem+0xfa>
 8007d90:	613c      	str	r4, [r7, #16]
 8007d92:	4638      	mov	r0, r7
 8007d94:	f001 f9b2 	bl	80090fc <__mcmp>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	db24      	blt.n	8007de6 <quorem+0xf2>
 8007d9c:	3601      	adds	r6, #1
 8007d9e:	4628      	mov	r0, r5
 8007da0:	f04f 0c00 	mov.w	ip, #0
 8007da4:	f858 2b04 	ldr.w	r2, [r8], #4
 8007da8:	f8d0 e000 	ldr.w	lr, [r0]
 8007dac:	b293      	uxth	r3, r2
 8007dae:	ebac 0303 	sub.w	r3, ip, r3
 8007db2:	0c12      	lsrs	r2, r2, #16
 8007db4:	fa13 f38e 	uxtah	r3, r3, lr
 8007db8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007dbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dc6:	45c1      	cmp	r9, r8
 8007dc8:	f840 3b04 	str.w	r3, [r0], #4
 8007dcc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007dd0:	d2e8      	bcs.n	8007da4 <quorem+0xb0>
 8007dd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007dd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007dda:	b922      	cbnz	r2, 8007de6 <quorem+0xf2>
 8007ddc:	3b04      	subs	r3, #4
 8007dde:	429d      	cmp	r5, r3
 8007de0:	461a      	mov	r2, r3
 8007de2:	d30a      	bcc.n	8007dfa <quorem+0x106>
 8007de4:	613c      	str	r4, [r7, #16]
 8007de6:	4630      	mov	r0, r6
 8007de8:	b003      	add	sp, #12
 8007dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dee:	6812      	ldr	r2, [r2, #0]
 8007df0:	3b04      	subs	r3, #4
 8007df2:	2a00      	cmp	r2, #0
 8007df4:	d1cc      	bne.n	8007d90 <quorem+0x9c>
 8007df6:	3c01      	subs	r4, #1
 8007df8:	e7c7      	b.n	8007d8a <quorem+0x96>
 8007dfa:	6812      	ldr	r2, [r2, #0]
 8007dfc:	3b04      	subs	r3, #4
 8007dfe:	2a00      	cmp	r2, #0
 8007e00:	d1f0      	bne.n	8007de4 <quorem+0xf0>
 8007e02:	3c01      	subs	r4, #1
 8007e04:	e7eb      	b.n	8007dde <quorem+0xea>
 8007e06:	2000      	movs	r0, #0
 8007e08:	e7ee      	b.n	8007de8 <quorem+0xf4>
 8007e0a:	0000      	movs	r0, r0
 8007e0c:	0000      	movs	r0, r0
	...

08007e10 <_dtoa_r>:
 8007e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e14:	ed2d 8b04 	vpush	{d8-d9}
 8007e18:	ec57 6b10 	vmov	r6, r7, d0
 8007e1c:	b093      	sub	sp, #76	; 0x4c
 8007e1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007e24:	9106      	str	r1, [sp, #24]
 8007e26:	ee10 aa10 	vmov	sl, s0
 8007e2a:	4604      	mov	r4, r0
 8007e2c:	9209      	str	r2, [sp, #36]	; 0x24
 8007e2e:	930c      	str	r3, [sp, #48]	; 0x30
 8007e30:	46bb      	mov	fp, r7
 8007e32:	b975      	cbnz	r5, 8007e52 <_dtoa_r+0x42>
 8007e34:	2010      	movs	r0, #16
 8007e36:	f000 fed7 	bl	8008be8 <malloc>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	6260      	str	r0, [r4, #36]	; 0x24
 8007e3e:	b920      	cbnz	r0, 8007e4a <_dtoa_r+0x3a>
 8007e40:	4ba7      	ldr	r3, [pc, #668]	; (80080e0 <_dtoa_r+0x2d0>)
 8007e42:	21ea      	movs	r1, #234	; 0xea
 8007e44:	48a7      	ldr	r0, [pc, #668]	; (80080e4 <_dtoa_r+0x2d4>)
 8007e46:	f001 ff2d 	bl	8009ca4 <__assert_func>
 8007e4a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e4e:	6005      	str	r5, [r0, #0]
 8007e50:	60c5      	str	r5, [r0, #12]
 8007e52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e54:	6819      	ldr	r1, [r3, #0]
 8007e56:	b151      	cbz	r1, 8007e6e <_dtoa_r+0x5e>
 8007e58:	685a      	ldr	r2, [r3, #4]
 8007e5a:	604a      	str	r2, [r1, #4]
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	4093      	lsls	r3, r2
 8007e60:	608b      	str	r3, [r1, #8]
 8007e62:	4620      	mov	r0, r4
 8007e64:	f000 ff08 	bl	8008c78 <_Bfree>
 8007e68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	601a      	str	r2, [r3, #0]
 8007e6e:	1e3b      	subs	r3, r7, #0
 8007e70:	bfaa      	itet	ge
 8007e72:	2300      	movge	r3, #0
 8007e74:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007e78:	f8c8 3000 	strge.w	r3, [r8]
 8007e7c:	4b9a      	ldr	r3, [pc, #616]	; (80080e8 <_dtoa_r+0x2d8>)
 8007e7e:	bfbc      	itt	lt
 8007e80:	2201      	movlt	r2, #1
 8007e82:	f8c8 2000 	strlt.w	r2, [r8]
 8007e86:	ea33 030b 	bics.w	r3, r3, fp
 8007e8a:	d11b      	bne.n	8007ec4 <_dtoa_r+0xb4>
 8007e8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e8e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e92:	6013      	str	r3, [r2, #0]
 8007e94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e98:	4333      	orrs	r3, r6
 8007e9a:	f000 8592 	beq.w	80089c2 <_dtoa_r+0xbb2>
 8007e9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ea0:	b963      	cbnz	r3, 8007ebc <_dtoa_r+0xac>
 8007ea2:	4b92      	ldr	r3, [pc, #584]	; (80080ec <_dtoa_r+0x2dc>)
 8007ea4:	e022      	b.n	8007eec <_dtoa_r+0xdc>
 8007ea6:	4b92      	ldr	r3, [pc, #584]	; (80080f0 <_dtoa_r+0x2e0>)
 8007ea8:	9301      	str	r3, [sp, #4]
 8007eaa:	3308      	adds	r3, #8
 8007eac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007eae:	6013      	str	r3, [r2, #0]
 8007eb0:	9801      	ldr	r0, [sp, #4]
 8007eb2:	b013      	add	sp, #76	; 0x4c
 8007eb4:	ecbd 8b04 	vpop	{d8-d9}
 8007eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ebc:	4b8b      	ldr	r3, [pc, #556]	; (80080ec <_dtoa_r+0x2dc>)
 8007ebe:	9301      	str	r3, [sp, #4]
 8007ec0:	3303      	adds	r3, #3
 8007ec2:	e7f3      	b.n	8007eac <_dtoa_r+0x9c>
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	4650      	mov	r0, sl
 8007eca:	4659      	mov	r1, fp
 8007ecc:	f7f8 fe04 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ed0:	ec4b ab19 	vmov	d9, sl, fp
 8007ed4:	4680      	mov	r8, r0
 8007ed6:	b158      	cbz	r0, 8007ef0 <_dtoa_r+0xe0>
 8007ed8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007eda:	2301      	movs	r3, #1
 8007edc:	6013      	str	r3, [r2, #0]
 8007ede:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f000 856b 	beq.w	80089bc <_dtoa_r+0xbac>
 8007ee6:	4883      	ldr	r0, [pc, #524]	; (80080f4 <_dtoa_r+0x2e4>)
 8007ee8:	6018      	str	r0, [r3, #0]
 8007eea:	1e43      	subs	r3, r0, #1
 8007eec:	9301      	str	r3, [sp, #4]
 8007eee:	e7df      	b.n	8007eb0 <_dtoa_r+0xa0>
 8007ef0:	ec4b ab10 	vmov	d0, sl, fp
 8007ef4:	aa10      	add	r2, sp, #64	; 0x40
 8007ef6:	a911      	add	r1, sp, #68	; 0x44
 8007ef8:	4620      	mov	r0, r4
 8007efa:	f001 f9a5 	bl	8009248 <__d2b>
 8007efe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007f02:	ee08 0a10 	vmov	s16, r0
 8007f06:	2d00      	cmp	r5, #0
 8007f08:	f000 8084 	beq.w	8008014 <_dtoa_r+0x204>
 8007f0c:	ee19 3a90 	vmov	r3, s19
 8007f10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f14:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007f18:	4656      	mov	r6, sl
 8007f1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007f1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007f22:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007f26:	4b74      	ldr	r3, [pc, #464]	; (80080f8 <_dtoa_r+0x2e8>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	4639      	mov	r1, r7
 8007f2e:	f7f8 f9b3 	bl	8000298 <__aeabi_dsub>
 8007f32:	a365      	add	r3, pc, #404	; (adr r3, 80080c8 <_dtoa_r+0x2b8>)
 8007f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f38:	f7f8 fb66 	bl	8000608 <__aeabi_dmul>
 8007f3c:	a364      	add	r3, pc, #400	; (adr r3, 80080d0 <_dtoa_r+0x2c0>)
 8007f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f42:	f7f8 f9ab 	bl	800029c <__adddf3>
 8007f46:	4606      	mov	r6, r0
 8007f48:	4628      	mov	r0, r5
 8007f4a:	460f      	mov	r7, r1
 8007f4c:	f7f8 faf2 	bl	8000534 <__aeabi_i2d>
 8007f50:	a361      	add	r3, pc, #388	; (adr r3, 80080d8 <_dtoa_r+0x2c8>)
 8007f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f56:	f7f8 fb57 	bl	8000608 <__aeabi_dmul>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	4630      	mov	r0, r6
 8007f60:	4639      	mov	r1, r7
 8007f62:	f7f8 f99b 	bl	800029c <__adddf3>
 8007f66:	4606      	mov	r6, r0
 8007f68:	460f      	mov	r7, r1
 8007f6a:	f7f8 fdfd 	bl	8000b68 <__aeabi_d2iz>
 8007f6e:	2200      	movs	r2, #0
 8007f70:	9000      	str	r0, [sp, #0]
 8007f72:	2300      	movs	r3, #0
 8007f74:	4630      	mov	r0, r6
 8007f76:	4639      	mov	r1, r7
 8007f78:	f7f8 fdb8 	bl	8000aec <__aeabi_dcmplt>
 8007f7c:	b150      	cbz	r0, 8007f94 <_dtoa_r+0x184>
 8007f7e:	9800      	ldr	r0, [sp, #0]
 8007f80:	f7f8 fad8 	bl	8000534 <__aeabi_i2d>
 8007f84:	4632      	mov	r2, r6
 8007f86:	463b      	mov	r3, r7
 8007f88:	f7f8 fda6 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f8c:	b910      	cbnz	r0, 8007f94 <_dtoa_r+0x184>
 8007f8e:	9b00      	ldr	r3, [sp, #0]
 8007f90:	3b01      	subs	r3, #1
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	9b00      	ldr	r3, [sp, #0]
 8007f96:	2b16      	cmp	r3, #22
 8007f98:	d85a      	bhi.n	8008050 <_dtoa_r+0x240>
 8007f9a:	9a00      	ldr	r2, [sp, #0]
 8007f9c:	4b57      	ldr	r3, [pc, #348]	; (80080fc <_dtoa_r+0x2ec>)
 8007f9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa6:	ec51 0b19 	vmov	r0, r1, d9
 8007faa:	f7f8 fd9f 	bl	8000aec <__aeabi_dcmplt>
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	d050      	beq.n	8008054 <_dtoa_r+0x244>
 8007fb2:	9b00      	ldr	r3, [sp, #0]
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	2300      	movs	r3, #0
 8007fba:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fbe:	1b5d      	subs	r5, r3, r5
 8007fc0:	1e6b      	subs	r3, r5, #1
 8007fc2:	9305      	str	r3, [sp, #20]
 8007fc4:	bf45      	ittet	mi
 8007fc6:	f1c5 0301 	rsbmi	r3, r5, #1
 8007fca:	9304      	strmi	r3, [sp, #16]
 8007fcc:	2300      	movpl	r3, #0
 8007fce:	2300      	movmi	r3, #0
 8007fd0:	bf4c      	ite	mi
 8007fd2:	9305      	strmi	r3, [sp, #20]
 8007fd4:	9304      	strpl	r3, [sp, #16]
 8007fd6:	9b00      	ldr	r3, [sp, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	db3d      	blt.n	8008058 <_dtoa_r+0x248>
 8007fdc:	9b05      	ldr	r3, [sp, #20]
 8007fde:	9a00      	ldr	r2, [sp, #0]
 8007fe0:	920a      	str	r2, [sp, #40]	; 0x28
 8007fe2:	4413      	add	r3, r2
 8007fe4:	9305      	str	r3, [sp, #20]
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	9307      	str	r3, [sp, #28]
 8007fea:	9b06      	ldr	r3, [sp, #24]
 8007fec:	2b09      	cmp	r3, #9
 8007fee:	f200 8089 	bhi.w	8008104 <_dtoa_r+0x2f4>
 8007ff2:	2b05      	cmp	r3, #5
 8007ff4:	bfc4      	itt	gt
 8007ff6:	3b04      	subgt	r3, #4
 8007ff8:	9306      	strgt	r3, [sp, #24]
 8007ffa:	9b06      	ldr	r3, [sp, #24]
 8007ffc:	f1a3 0302 	sub.w	r3, r3, #2
 8008000:	bfcc      	ite	gt
 8008002:	2500      	movgt	r5, #0
 8008004:	2501      	movle	r5, #1
 8008006:	2b03      	cmp	r3, #3
 8008008:	f200 8087 	bhi.w	800811a <_dtoa_r+0x30a>
 800800c:	e8df f003 	tbb	[pc, r3]
 8008010:	59383a2d 	.word	0x59383a2d
 8008014:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008018:	441d      	add	r5, r3
 800801a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800801e:	2b20      	cmp	r3, #32
 8008020:	bfc1      	itttt	gt
 8008022:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008026:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800802a:	fa0b f303 	lslgt.w	r3, fp, r3
 800802e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008032:	bfda      	itte	le
 8008034:	f1c3 0320 	rsble	r3, r3, #32
 8008038:	fa06 f003 	lslle.w	r0, r6, r3
 800803c:	4318      	orrgt	r0, r3
 800803e:	f7f8 fa69 	bl	8000514 <__aeabi_ui2d>
 8008042:	2301      	movs	r3, #1
 8008044:	4606      	mov	r6, r0
 8008046:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800804a:	3d01      	subs	r5, #1
 800804c:	930e      	str	r3, [sp, #56]	; 0x38
 800804e:	e76a      	b.n	8007f26 <_dtoa_r+0x116>
 8008050:	2301      	movs	r3, #1
 8008052:	e7b2      	b.n	8007fba <_dtoa_r+0x1aa>
 8008054:	900b      	str	r0, [sp, #44]	; 0x2c
 8008056:	e7b1      	b.n	8007fbc <_dtoa_r+0x1ac>
 8008058:	9b04      	ldr	r3, [sp, #16]
 800805a:	9a00      	ldr	r2, [sp, #0]
 800805c:	1a9b      	subs	r3, r3, r2
 800805e:	9304      	str	r3, [sp, #16]
 8008060:	4253      	negs	r3, r2
 8008062:	9307      	str	r3, [sp, #28]
 8008064:	2300      	movs	r3, #0
 8008066:	930a      	str	r3, [sp, #40]	; 0x28
 8008068:	e7bf      	b.n	8007fea <_dtoa_r+0x1da>
 800806a:	2300      	movs	r3, #0
 800806c:	9308      	str	r3, [sp, #32]
 800806e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008070:	2b00      	cmp	r3, #0
 8008072:	dc55      	bgt.n	8008120 <_dtoa_r+0x310>
 8008074:	2301      	movs	r3, #1
 8008076:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800807a:	461a      	mov	r2, r3
 800807c:	9209      	str	r2, [sp, #36]	; 0x24
 800807e:	e00c      	b.n	800809a <_dtoa_r+0x28a>
 8008080:	2301      	movs	r3, #1
 8008082:	e7f3      	b.n	800806c <_dtoa_r+0x25c>
 8008084:	2300      	movs	r3, #0
 8008086:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008088:	9308      	str	r3, [sp, #32]
 800808a:	9b00      	ldr	r3, [sp, #0]
 800808c:	4413      	add	r3, r2
 800808e:	9302      	str	r3, [sp, #8]
 8008090:	3301      	adds	r3, #1
 8008092:	2b01      	cmp	r3, #1
 8008094:	9303      	str	r3, [sp, #12]
 8008096:	bfb8      	it	lt
 8008098:	2301      	movlt	r3, #1
 800809a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800809c:	2200      	movs	r2, #0
 800809e:	6042      	str	r2, [r0, #4]
 80080a0:	2204      	movs	r2, #4
 80080a2:	f102 0614 	add.w	r6, r2, #20
 80080a6:	429e      	cmp	r6, r3
 80080a8:	6841      	ldr	r1, [r0, #4]
 80080aa:	d93d      	bls.n	8008128 <_dtoa_r+0x318>
 80080ac:	4620      	mov	r0, r4
 80080ae:	f000 fda3 	bl	8008bf8 <_Balloc>
 80080b2:	9001      	str	r0, [sp, #4]
 80080b4:	2800      	cmp	r0, #0
 80080b6:	d13b      	bne.n	8008130 <_dtoa_r+0x320>
 80080b8:	4b11      	ldr	r3, [pc, #68]	; (8008100 <_dtoa_r+0x2f0>)
 80080ba:	4602      	mov	r2, r0
 80080bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80080c0:	e6c0      	b.n	8007e44 <_dtoa_r+0x34>
 80080c2:	2301      	movs	r3, #1
 80080c4:	e7df      	b.n	8008086 <_dtoa_r+0x276>
 80080c6:	bf00      	nop
 80080c8:	636f4361 	.word	0x636f4361
 80080cc:	3fd287a7 	.word	0x3fd287a7
 80080d0:	8b60c8b3 	.word	0x8b60c8b3
 80080d4:	3fc68a28 	.word	0x3fc68a28
 80080d8:	509f79fb 	.word	0x509f79fb
 80080dc:	3fd34413 	.word	0x3fd34413
 80080e0:	0800d279 	.word	0x0800d279
 80080e4:	0800d290 	.word	0x0800d290
 80080e8:	7ff00000 	.word	0x7ff00000
 80080ec:	0800d275 	.word	0x0800d275
 80080f0:	0800d26c 	.word	0x0800d26c
 80080f4:	0800d249 	.word	0x0800d249
 80080f8:	3ff80000 	.word	0x3ff80000
 80080fc:	0800d3e0 	.word	0x0800d3e0
 8008100:	0800d2eb 	.word	0x0800d2eb
 8008104:	2501      	movs	r5, #1
 8008106:	2300      	movs	r3, #0
 8008108:	9306      	str	r3, [sp, #24]
 800810a:	9508      	str	r5, [sp, #32]
 800810c:	f04f 33ff 	mov.w	r3, #4294967295
 8008110:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008114:	2200      	movs	r2, #0
 8008116:	2312      	movs	r3, #18
 8008118:	e7b0      	b.n	800807c <_dtoa_r+0x26c>
 800811a:	2301      	movs	r3, #1
 800811c:	9308      	str	r3, [sp, #32]
 800811e:	e7f5      	b.n	800810c <_dtoa_r+0x2fc>
 8008120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008122:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008126:	e7b8      	b.n	800809a <_dtoa_r+0x28a>
 8008128:	3101      	adds	r1, #1
 800812a:	6041      	str	r1, [r0, #4]
 800812c:	0052      	lsls	r2, r2, #1
 800812e:	e7b8      	b.n	80080a2 <_dtoa_r+0x292>
 8008130:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008132:	9a01      	ldr	r2, [sp, #4]
 8008134:	601a      	str	r2, [r3, #0]
 8008136:	9b03      	ldr	r3, [sp, #12]
 8008138:	2b0e      	cmp	r3, #14
 800813a:	f200 809d 	bhi.w	8008278 <_dtoa_r+0x468>
 800813e:	2d00      	cmp	r5, #0
 8008140:	f000 809a 	beq.w	8008278 <_dtoa_r+0x468>
 8008144:	9b00      	ldr	r3, [sp, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	dd32      	ble.n	80081b0 <_dtoa_r+0x3a0>
 800814a:	4ab7      	ldr	r2, [pc, #732]	; (8008428 <_dtoa_r+0x618>)
 800814c:	f003 030f 	and.w	r3, r3, #15
 8008150:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008154:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008158:	9b00      	ldr	r3, [sp, #0]
 800815a:	05d8      	lsls	r0, r3, #23
 800815c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008160:	d516      	bpl.n	8008190 <_dtoa_r+0x380>
 8008162:	4bb2      	ldr	r3, [pc, #712]	; (800842c <_dtoa_r+0x61c>)
 8008164:	ec51 0b19 	vmov	r0, r1, d9
 8008168:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800816c:	f7f8 fb76 	bl	800085c <__aeabi_ddiv>
 8008170:	f007 070f 	and.w	r7, r7, #15
 8008174:	4682      	mov	sl, r0
 8008176:	468b      	mov	fp, r1
 8008178:	2503      	movs	r5, #3
 800817a:	4eac      	ldr	r6, [pc, #688]	; (800842c <_dtoa_r+0x61c>)
 800817c:	b957      	cbnz	r7, 8008194 <_dtoa_r+0x384>
 800817e:	4642      	mov	r2, r8
 8008180:	464b      	mov	r3, r9
 8008182:	4650      	mov	r0, sl
 8008184:	4659      	mov	r1, fp
 8008186:	f7f8 fb69 	bl	800085c <__aeabi_ddiv>
 800818a:	4682      	mov	sl, r0
 800818c:	468b      	mov	fp, r1
 800818e:	e028      	b.n	80081e2 <_dtoa_r+0x3d2>
 8008190:	2502      	movs	r5, #2
 8008192:	e7f2      	b.n	800817a <_dtoa_r+0x36a>
 8008194:	07f9      	lsls	r1, r7, #31
 8008196:	d508      	bpl.n	80081aa <_dtoa_r+0x39a>
 8008198:	4640      	mov	r0, r8
 800819a:	4649      	mov	r1, r9
 800819c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80081a0:	f7f8 fa32 	bl	8000608 <__aeabi_dmul>
 80081a4:	3501      	adds	r5, #1
 80081a6:	4680      	mov	r8, r0
 80081a8:	4689      	mov	r9, r1
 80081aa:	107f      	asrs	r7, r7, #1
 80081ac:	3608      	adds	r6, #8
 80081ae:	e7e5      	b.n	800817c <_dtoa_r+0x36c>
 80081b0:	f000 809b 	beq.w	80082ea <_dtoa_r+0x4da>
 80081b4:	9b00      	ldr	r3, [sp, #0]
 80081b6:	4f9d      	ldr	r7, [pc, #628]	; (800842c <_dtoa_r+0x61c>)
 80081b8:	425e      	negs	r6, r3
 80081ba:	4b9b      	ldr	r3, [pc, #620]	; (8008428 <_dtoa_r+0x618>)
 80081bc:	f006 020f 	and.w	r2, r6, #15
 80081c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c8:	ec51 0b19 	vmov	r0, r1, d9
 80081cc:	f7f8 fa1c 	bl	8000608 <__aeabi_dmul>
 80081d0:	1136      	asrs	r6, r6, #4
 80081d2:	4682      	mov	sl, r0
 80081d4:	468b      	mov	fp, r1
 80081d6:	2300      	movs	r3, #0
 80081d8:	2502      	movs	r5, #2
 80081da:	2e00      	cmp	r6, #0
 80081dc:	d17a      	bne.n	80082d4 <_dtoa_r+0x4c4>
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1d3      	bne.n	800818a <_dtoa_r+0x37a>
 80081e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 8082 	beq.w	80082ee <_dtoa_r+0x4de>
 80081ea:	4b91      	ldr	r3, [pc, #580]	; (8008430 <_dtoa_r+0x620>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	4650      	mov	r0, sl
 80081f0:	4659      	mov	r1, fp
 80081f2:	f7f8 fc7b 	bl	8000aec <__aeabi_dcmplt>
 80081f6:	2800      	cmp	r0, #0
 80081f8:	d079      	beq.n	80082ee <_dtoa_r+0x4de>
 80081fa:	9b03      	ldr	r3, [sp, #12]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d076      	beq.n	80082ee <_dtoa_r+0x4de>
 8008200:	9b02      	ldr	r3, [sp, #8]
 8008202:	2b00      	cmp	r3, #0
 8008204:	dd36      	ble.n	8008274 <_dtoa_r+0x464>
 8008206:	9b00      	ldr	r3, [sp, #0]
 8008208:	4650      	mov	r0, sl
 800820a:	4659      	mov	r1, fp
 800820c:	1e5f      	subs	r7, r3, #1
 800820e:	2200      	movs	r2, #0
 8008210:	4b88      	ldr	r3, [pc, #544]	; (8008434 <_dtoa_r+0x624>)
 8008212:	f7f8 f9f9 	bl	8000608 <__aeabi_dmul>
 8008216:	9e02      	ldr	r6, [sp, #8]
 8008218:	4682      	mov	sl, r0
 800821a:	468b      	mov	fp, r1
 800821c:	3501      	adds	r5, #1
 800821e:	4628      	mov	r0, r5
 8008220:	f7f8 f988 	bl	8000534 <__aeabi_i2d>
 8008224:	4652      	mov	r2, sl
 8008226:	465b      	mov	r3, fp
 8008228:	f7f8 f9ee 	bl	8000608 <__aeabi_dmul>
 800822c:	4b82      	ldr	r3, [pc, #520]	; (8008438 <_dtoa_r+0x628>)
 800822e:	2200      	movs	r2, #0
 8008230:	f7f8 f834 	bl	800029c <__adddf3>
 8008234:	46d0      	mov	r8, sl
 8008236:	46d9      	mov	r9, fp
 8008238:	4682      	mov	sl, r0
 800823a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800823e:	2e00      	cmp	r6, #0
 8008240:	d158      	bne.n	80082f4 <_dtoa_r+0x4e4>
 8008242:	4b7e      	ldr	r3, [pc, #504]	; (800843c <_dtoa_r+0x62c>)
 8008244:	2200      	movs	r2, #0
 8008246:	4640      	mov	r0, r8
 8008248:	4649      	mov	r1, r9
 800824a:	f7f8 f825 	bl	8000298 <__aeabi_dsub>
 800824e:	4652      	mov	r2, sl
 8008250:	465b      	mov	r3, fp
 8008252:	4680      	mov	r8, r0
 8008254:	4689      	mov	r9, r1
 8008256:	f7f8 fc67 	bl	8000b28 <__aeabi_dcmpgt>
 800825a:	2800      	cmp	r0, #0
 800825c:	f040 8295 	bne.w	800878a <_dtoa_r+0x97a>
 8008260:	4652      	mov	r2, sl
 8008262:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008266:	4640      	mov	r0, r8
 8008268:	4649      	mov	r1, r9
 800826a:	f7f8 fc3f 	bl	8000aec <__aeabi_dcmplt>
 800826e:	2800      	cmp	r0, #0
 8008270:	f040 8289 	bne.w	8008786 <_dtoa_r+0x976>
 8008274:	ec5b ab19 	vmov	sl, fp, d9
 8008278:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800827a:	2b00      	cmp	r3, #0
 800827c:	f2c0 8148 	blt.w	8008510 <_dtoa_r+0x700>
 8008280:	9a00      	ldr	r2, [sp, #0]
 8008282:	2a0e      	cmp	r2, #14
 8008284:	f300 8144 	bgt.w	8008510 <_dtoa_r+0x700>
 8008288:	4b67      	ldr	r3, [pc, #412]	; (8008428 <_dtoa_r+0x618>)
 800828a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800828e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008294:	2b00      	cmp	r3, #0
 8008296:	f280 80d5 	bge.w	8008444 <_dtoa_r+0x634>
 800829a:	9b03      	ldr	r3, [sp, #12]
 800829c:	2b00      	cmp	r3, #0
 800829e:	f300 80d1 	bgt.w	8008444 <_dtoa_r+0x634>
 80082a2:	f040 826f 	bne.w	8008784 <_dtoa_r+0x974>
 80082a6:	4b65      	ldr	r3, [pc, #404]	; (800843c <_dtoa_r+0x62c>)
 80082a8:	2200      	movs	r2, #0
 80082aa:	4640      	mov	r0, r8
 80082ac:	4649      	mov	r1, r9
 80082ae:	f7f8 f9ab 	bl	8000608 <__aeabi_dmul>
 80082b2:	4652      	mov	r2, sl
 80082b4:	465b      	mov	r3, fp
 80082b6:	f7f8 fc2d 	bl	8000b14 <__aeabi_dcmpge>
 80082ba:	9e03      	ldr	r6, [sp, #12]
 80082bc:	4637      	mov	r7, r6
 80082be:	2800      	cmp	r0, #0
 80082c0:	f040 8245 	bne.w	800874e <_dtoa_r+0x93e>
 80082c4:	9d01      	ldr	r5, [sp, #4]
 80082c6:	2331      	movs	r3, #49	; 0x31
 80082c8:	f805 3b01 	strb.w	r3, [r5], #1
 80082cc:	9b00      	ldr	r3, [sp, #0]
 80082ce:	3301      	adds	r3, #1
 80082d0:	9300      	str	r3, [sp, #0]
 80082d2:	e240      	b.n	8008756 <_dtoa_r+0x946>
 80082d4:	07f2      	lsls	r2, r6, #31
 80082d6:	d505      	bpl.n	80082e4 <_dtoa_r+0x4d4>
 80082d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082dc:	f7f8 f994 	bl	8000608 <__aeabi_dmul>
 80082e0:	3501      	adds	r5, #1
 80082e2:	2301      	movs	r3, #1
 80082e4:	1076      	asrs	r6, r6, #1
 80082e6:	3708      	adds	r7, #8
 80082e8:	e777      	b.n	80081da <_dtoa_r+0x3ca>
 80082ea:	2502      	movs	r5, #2
 80082ec:	e779      	b.n	80081e2 <_dtoa_r+0x3d2>
 80082ee:	9f00      	ldr	r7, [sp, #0]
 80082f0:	9e03      	ldr	r6, [sp, #12]
 80082f2:	e794      	b.n	800821e <_dtoa_r+0x40e>
 80082f4:	9901      	ldr	r1, [sp, #4]
 80082f6:	4b4c      	ldr	r3, [pc, #304]	; (8008428 <_dtoa_r+0x618>)
 80082f8:	4431      	add	r1, r6
 80082fa:	910d      	str	r1, [sp, #52]	; 0x34
 80082fc:	9908      	ldr	r1, [sp, #32]
 80082fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008302:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008306:	2900      	cmp	r1, #0
 8008308:	d043      	beq.n	8008392 <_dtoa_r+0x582>
 800830a:	494d      	ldr	r1, [pc, #308]	; (8008440 <_dtoa_r+0x630>)
 800830c:	2000      	movs	r0, #0
 800830e:	f7f8 faa5 	bl	800085c <__aeabi_ddiv>
 8008312:	4652      	mov	r2, sl
 8008314:	465b      	mov	r3, fp
 8008316:	f7f7 ffbf 	bl	8000298 <__aeabi_dsub>
 800831a:	9d01      	ldr	r5, [sp, #4]
 800831c:	4682      	mov	sl, r0
 800831e:	468b      	mov	fp, r1
 8008320:	4649      	mov	r1, r9
 8008322:	4640      	mov	r0, r8
 8008324:	f7f8 fc20 	bl	8000b68 <__aeabi_d2iz>
 8008328:	4606      	mov	r6, r0
 800832a:	f7f8 f903 	bl	8000534 <__aeabi_i2d>
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	4640      	mov	r0, r8
 8008334:	4649      	mov	r1, r9
 8008336:	f7f7 ffaf 	bl	8000298 <__aeabi_dsub>
 800833a:	3630      	adds	r6, #48	; 0x30
 800833c:	f805 6b01 	strb.w	r6, [r5], #1
 8008340:	4652      	mov	r2, sl
 8008342:	465b      	mov	r3, fp
 8008344:	4680      	mov	r8, r0
 8008346:	4689      	mov	r9, r1
 8008348:	f7f8 fbd0 	bl	8000aec <__aeabi_dcmplt>
 800834c:	2800      	cmp	r0, #0
 800834e:	d163      	bne.n	8008418 <_dtoa_r+0x608>
 8008350:	4642      	mov	r2, r8
 8008352:	464b      	mov	r3, r9
 8008354:	4936      	ldr	r1, [pc, #216]	; (8008430 <_dtoa_r+0x620>)
 8008356:	2000      	movs	r0, #0
 8008358:	f7f7 ff9e 	bl	8000298 <__aeabi_dsub>
 800835c:	4652      	mov	r2, sl
 800835e:	465b      	mov	r3, fp
 8008360:	f7f8 fbc4 	bl	8000aec <__aeabi_dcmplt>
 8008364:	2800      	cmp	r0, #0
 8008366:	f040 80b5 	bne.w	80084d4 <_dtoa_r+0x6c4>
 800836a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800836c:	429d      	cmp	r5, r3
 800836e:	d081      	beq.n	8008274 <_dtoa_r+0x464>
 8008370:	4b30      	ldr	r3, [pc, #192]	; (8008434 <_dtoa_r+0x624>)
 8008372:	2200      	movs	r2, #0
 8008374:	4650      	mov	r0, sl
 8008376:	4659      	mov	r1, fp
 8008378:	f7f8 f946 	bl	8000608 <__aeabi_dmul>
 800837c:	4b2d      	ldr	r3, [pc, #180]	; (8008434 <_dtoa_r+0x624>)
 800837e:	4682      	mov	sl, r0
 8008380:	468b      	mov	fp, r1
 8008382:	4640      	mov	r0, r8
 8008384:	4649      	mov	r1, r9
 8008386:	2200      	movs	r2, #0
 8008388:	f7f8 f93e 	bl	8000608 <__aeabi_dmul>
 800838c:	4680      	mov	r8, r0
 800838e:	4689      	mov	r9, r1
 8008390:	e7c6      	b.n	8008320 <_dtoa_r+0x510>
 8008392:	4650      	mov	r0, sl
 8008394:	4659      	mov	r1, fp
 8008396:	f7f8 f937 	bl	8000608 <__aeabi_dmul>
 800839a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800839c:	9d01      	ldr	r5, [sp, #4]
 800839e:	930f      	str	r3, [sp, #60]	; 0x3c
 80083a0:	4682      	mov	sl, r0
 80083a2:	468b      	mov	fp, r1
 80083a4:	4649      	mov	r1, r9
 80083a6:	4640      	mov	r0, r8
 80083a8:	f7f8 fbde 	bl	8000b68 <__aeabi_d2iz>
 80083ac:	4606      	mov	r6, r0
 80083ae:	f7f8 f8c1 	bl	8000534 <__aeabi_i2d>
 80083b2:	3630      	adds	r6, #48	; 0x30
 80083b4:	4602      	mov	r2, r0
 80083b6:	460b      	mov	r3, r1
 80083b8:	4640      	mov	r0, r8
 80083ba:	4649      	mov	r1, r9
 80083bc:	f7f7 ff6c 	bl	8000298 <__aeabi_dsub>
 80083c0:	f805 6b01 	strb.w	r6, [r5], #1
 80083c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083c6:	429d      	cmp	r5, r3
 80083c8:	4680      	mov	r8, r0
 80083ca:	4689      	mov	r9, r1
 80083cc:	f04f 0200 	mov.w	r2, #0
 80083d0:	d124      	bne.n	800841c <_dtoa_r+0x60c>
 80083d2:	4b1b      	ldr	r3, [pc, #108]	; (8008440 <_dtoa_r+0x630>)
 80083d4:	4650      	mov	r0, sl
 80083d6:	4659      	mov	r1, fp
 80083d8:	f7f7 ff60 	bl	800029c <__adddf3>
 80083dc:	4602      	mov	r2, r0
 80083de:	460b      	mov	r3, r1
 80083e0:	4640      	mov	r0, r8
 80083e2:	4649      	mov	r1, r9
 80083e4:	f7f8 fba0 	bl	8000b28 <__aeabi_dcmpgt>
 80083e8:	2800      	cmp	r0, #0
 80083ea:	d173      	bne.n	80084d4 <_dtoa_r+0x6c4>
 80083ec:	4652      	mov	r2, sl
 80083ee:	465b      	mov	r3, fp
 80083f0:	4913      	ldr	r1, [pc, #76]	; (8008440 <_dtoa_r+0x630>)
 80083f2:	2000      	movs	r0, #0
 80083f4:	f7f7 ff50 	bl	8000298 <__aeabi_dsub>
 80083f8:	4602      	mov	r2, r0
 80083fa:	460b      	mov	r3, r1
 80083fc:	4640      	mov	r0, r8
 80083fe:	4649      	mov	r1, r9
 8008400:	f7f8 fb74 	bl	8000aec <__aeabi_dcmplt>
 8008404:	2800      	cmp	r0, #0
 8008406:	f43f af35 	beq.w	8008274 <_dtoa_r+0x464>
 800840a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800840c:	1e6b      	subs	r3, r5, #1
 800840e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008410:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008414:	2b30      	cmp	r3, #48	; 0x30
 8008416:	d0f8      	beq.n	800840a <_dtoa_r+0x5fa>
 8008418:	9700      	str	r7, [sp, #0]
 800841a:	e049      	b.n	80084b0 <_dtoa_r+0x6a0>
 800841c:	4b05      	ldr	r3, [pc, #20]	; (8008434 <_dtoa_r+0x624>)
 800841e:	f7f8 f8f3 	bl	8000608 <__aeabi_dmul>
 8008422:	4680      	mov	r8, r0
 8008424:	4689      	mov	r9, r1
 8008426:	e7bd      	b.n	80083a4 <_dtoa_r+0x594>
 8008428:	0800d3e0 	.word	0x0800d3e0
 800842c:	0800d3b8 	.word	0x0800d3b8
 8008430:	3ff00000 	.word	0x3ff00000
 8008434:	40240000 	.word	0x40240000
 8008438:	401c0000 	.word	0x401c0000
 800843c:	40140000 	.word	0x40140000
 8008440:	3fe00000 	.word	0x3fe00000
 8008444:	9d01      	ldr	r5, [sp, #4]
 8008446:	4656      	mov	r6, sl
 8008448:	465f      	mov	r7, fp
 800844a:	4642      	mov	r2, r8
 800844c:	464b      	mov	r3, r9
 800844e:	4630      	mov	r0, r6
 8008450:	4639      	mov	r1, r7
 8008452:	f7f8 fa03 	bl	800085c <__aeabi_ddiv>
 8008456:	f7f8 fb87 	bl	8000b68 <__aeabi_d2iz>
 800845a:	4682      	mov	sl, r0
 800845c:	f7f8 f86a 	bl	8000534 <__aeabi_i2d>
 8008460:	4642      	mov	r2, r8
 8008462:	464b      	mov	r3, r9
 8008464:	f7f8 f8d0 	bl	8000608 <__aeabi_dmul>
 8008468:	4602      	mov	r2, r0
 800846a:	460b      	mov	r3, r1
 800846c:	4630      	mov	r0, r6
 800846e:	4639      	mov	r1, r7
 8008470:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008474:	f7f7 ff10 	bl	8000298 <__aeabi_dsub>
 8008478:	f805 6b01 	strb.w	r6, [r5], #1
 800847c:	9e01      	ldr	r6, [sp, #4]
 800847e:	9f03      	ldr	r7, [sp, #12]
 8008480:	1bae      	subs	r6, r5, r6
 8008482:	42b7      	cmp	r7, r6
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	d135      	bne.n	80084f6 <_dtoa_r+0x6e6>
 800848a:	f7f7 ff07 	bl	800029c <__adddf3>
 800848e:	4642      	mov	r2, r8
 8008490:	464b      	mov	r3, r9
 8008492:	4606      	mov	r6, r0
 8008494:	460f      	mov	r7, r1
 8008496:	f7f8 fb47 	bl	8000b28 <__aeabi_dcmpgt>
 800849a:	b9d0      	cbnz	r0, 80084d2 <_dtoa_r+0x6c2>
 800849c:	4642      	mov	r2, r8
 800849e:	464b      	mov	r3, r9
 80084a0:	4630      	mov	r0, r6
 80084a2:	4639      	mov	r1, r7
 80084a4:	f7f8 fb18 	bl	8000ad8 <__aeabi_dcmpeq>
 80084a8:	b110      	cbz	r0, 80084b0 <_dtoa_r+0x6a0>
 80084aa:	f01a 0f01 	tst.w	sl, #1
 80084ae:	d110      	bne.n	80084d2 <_dtoa_r+0x6c2>
 80084b0:	4620      	mov	r0, r4
 80084b2:	ee18 1a10 	vmov	r1, s16
 80084b6:	f000 fbdf 	bl	8008c78 <_Bfree>
 80084ba:	2300      	movs	r3, #0
 80084bc:	9800      	ldr	r0, [sp, #0]
 80084be:	702b      	strb	r3, [r5, #0]
 80084c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084c2:	3001      	adds	r0, #1
 80084c4:	6018      	str	r0, [r3, #0]
 80084c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f43f acf1 	beq.w	8007eb0 <_dtoa_r+0xa0>
 80084ce:	601d      	str	r5, [r3, #0]
 80084d0:	e4ee      	b.n	8007eb0 <_dtoa_r+0xa0>
 80084d2:	9f00      	ldr	r7, [sp, #0]
 80084d4:	462b      	mov	r3, r5
 80084d6:	461d      	mov	r5, r3
 80084d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084dc:	2a39      	cmp	r2, #57	; 0x39
 80084de:	d106      	bne.n	80084ee <_dtoa_r+0x6de>
 80084e0:	9a01      	ldr	r2, [sp, #4]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d1f7      	bne.n	80084d6 <_dtoa_r+0x6c6>
 80084e6:	9901      	ldr	r1, [sp, #4]
 80084e8:	2230      	movs	r2, #48	; 0x30
 80084ea:	3701      	adds	r7, #1
 80084ec:	700a      	strb	r2, [r1, #0]
 80084ee:	781a      	ldrb	r2, [r3, #0]
 80084f0:	3201      	adds	r2, #1
 80084f2:	701a      	strb	r2, [r3, #0]
 80084f4:	e790      	b.n	8008418 <_dtoa_r+0x608>
 80084f6:	4ba6      	ldr	r3, [pc, #664]	; (8008790 <_dtoa_r+0x980>)
 80084f8:	2200      	movs	r2, #0
 80084fa:	f7f8 f885 	bl	8000608 <__aeabi_dmul>
 80084fe:	2200      	movs	r2, #0
 8008500:	2300      	movs	r3, #0
 8008502:	4606      	mov	r6, r0
 8008504:	460f      	mov	r7, r1
 8008506:	f7f8 fae7 	bl	8000ad8 <__aeabi_dcmpeq>
 800850a:	2800      	cmp	r0, #0
 800850c:	d09d      	beq.n	800844a <_dtoa_r+0x63a>
 800850e:	e7cf      	b.n	80084b0 <_dtoa_r+0x6a0>
 8008510:	9a08      	ldr	r2, [sp, #32]
 8008512:	2a00      	cmp	r2, #0
 8008514:	f000 80d7 	beq.w	80086c6 <_dtoa_r+0x8b6>
 8008518:	9a06      	ldr	r2, [sp, #24]
 800851a:	2a01      	cmp	r2, #1
 800851c:	f300 80ba 	bgt.w	8008694 <_dtoa_r+0x884>
 8008520:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008522:	2a00      	cmp	r2, #0
 8008524:	f000 80b2 	beq.w	800868c <_dtoa_r+0x87c>
 8008528:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800852c:	9e07      	ldr	r6, [sp, #28]
 800852e:	9d04      	ldr	r5, [sp, #16]
 8008530:	9a04      	ldr	r2, [sp, #16]
 8008532:	441a      	add	r2, r3
 8008534:	9204      	str	r2, [sp, #16]
 8008536:	9a05      	ldr	r2, [sp, #20]
 8008538:	2101      	movs	r1, #1
 800853a:	441a      	add	r2, r3
 800853c:	4620      	mov	r0, r4
 800853e:	9205      	str	r2, [sp, #20]
 8008540:	f000 fc52 	bl	8008de8 <__i2b>
 8008544:	4607      	mov	r7, r0
 8008546:	2d00      	cmp	r5, #0
 8008548:	dd0c      	ble.n	8008564 <_dtoa_r+0x754>
 800854a:	9b05      	ldr	r3, [sp, #20]
 800854c:	2b00      	cmp	r3, #0
 800854e:	dd09      	ble.n	8008564 <_dtoa_r+0x754>
 8008550:	42ab      	cmp	r3, r5
 8008552:	9a04      	ldr	r2, [sp, #16]
 8008554:	bfa8      	it	ge
 8008556:	462b      	movge	r3, r5
 8008558:	1ad2      	subs	r2, r2, r3
 800855a:	9204      	str	r2, [sp, #16]
 800855c:	9a05      	ldr	r2, [sp, #20]
 800855e:	1aed      	subs	r5, r5, r3
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	9305      	str	r3, [sp, #20]
 8008564:	9b07      	ldr	r3, [sp, #28]
 8008566:	b31b      	cbz	r3, 80085b0 <_dtoa_r+0x7a0>
 8008568:	9b08      	ldr	r3, [sp, #32]
 800856a:	2b00      	cmp	r3, #0
 800856c:	f000 80af 	beq.w	80086ce <_dtoa_r+0x8be>
 8008570:	2e00      	cmp	r6, #0
 8008572:	dd13      	ble.n	800859c <_dtoa_r+0x78c>
 8008574:	4639      	mov	r1, r7
 8008576:	4632      	mov	r2, r6
 8008578:	4620      	mov	r0, r4
 800857a:	f000 fcf5 	bl	8008f68 <__pow5mult>
 800857e:	ee18 2a10 	vmov	r2, s16
 8008582:	4601      	mov	r1, r0
 8008584:	4607      	mov	r7, r0
 8008586:	4620      	mov	r0, r4
 8008588:	f000 fc44 	bl	8008e14 <__multiply>
 800858c:	ee18 1a10 	vmov	r1, s16
 8008590:	4680      	mov	r8, r0
 8008592:	4620      	mov	r0, r4
 8008594:	f000 fb70 	bl	8008c78 <_Bfree>
 8008598:	ee08 8a10 	vmov	s16, r8
 800859c:	9b07      	ldr	r3, [sp, #28]
 800859e:	1b9a      	subs	r2, r3, r6
 80085a0:	d006      	beq.n	80085b0 <_dtoa_r+0x7a0>
 80085a2:	ee18 1a10 	vmov	r1, s16
 80085a6:	4620      	mov	r0, r4
 80085a8:	f000 fcde 	bl	8008f68 <__pow5mult>
 80085ac:	ee08 0a10 	vmov	s16, r0
 80085b0:	2101      	movs	r1, #1
 80085b2:	4620      	mov	r0, r4
 80085b4:	f000 fc18 	bl	8008de8 <__i2b>
 80085b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	4606      	mov	r6, r0
 80085be:	f340 8088 	ble.w	80086d2 <_dtoa_r+0x8c2>
 80085c2:	461a      	mov	r2, r3
 80085c4:	4601      	mov	r1, r0
 80085c6:	4620      	mov	r0, r4
 80085c8:	f000 fcce 	bl	8008f68 <__pow5mult>
 80085cc:	9b06      	ldr	r3, [sp, #24]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	4606      	mov	r6, r0
 80085d2:	f340 8081 	ble.w	80086d8 <_dtoa_r+0x8c8>
 80085d6:	f04f 0800 	mov.w	r8, #0
 80085da:	6933      	ldr	r3, [r6, #16]
 80085dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80085e0:	6918      	ldr	r0, [r3, #16]
 80085e2:	f000 fbb1 	bl	8008d48 <__hi0bits>
 80085e6:	f1c0 0020 	rsb	r0, r0, #32
 80085ea:	9b05      	ldr	r3, [sp, #20]
 80085ec:	4418      	add	r0, r3
 80085ee:	f010 001f 	ands.w	r0, r0, #31
 80085f2:	f000 8092 	beq.w	800871a <_dtoa_r+0x90a>
 80085f6:	f1c0 0320 	rsb	r3, r0, #32
 80085fa:	2b04      	cmp	r3, #4
 80085fc:	f340 808a 	ble.w	8008714 <_dtoa_r+0x904>
 8008600:	f1c0 001c 	rsb	r0, r0, #28
 8008604:	9b04      	ldr	r3, [sp, #16]
 8008606:	4403      	add	r3, r0
 8008608:	9304      	str	r3, [sp, #16]
 800860a:	9b05      	ldr	r3, [sp, #20]
 800860c:	4403      	add	r3, r0
 800860e:	4405      	add	r5, r0
 8008610:	9305      	str	r3, [sp, #20]
 8008612:	9b04      	ldr	r3, [sp, #16]
 8008614:	2b00      	cmp	r3, #0
 8008616:	dd07      	ble.n	8008628 <_dtoa_r+0x818>
 8008618:	ee18 1a10 	vmov	r1, s16
 800861c:	461a      	mov	r2, r3
 800861e:	4620      	mov	r0, r4
 8008620:	f000 fcfc 	bl	800901c <__lshift>
 8008624:	ee08 0a10 	vmov	s16, r0
 8008628:	9b05      	ldr	r3, [sp, #20]
 800862a:	2b00      	cmp	r3, #0
 800862c:	dd05      	ble.n	800863a <_dtoa_r+0x82a>
 800862e:	4631      	mov	r1, r6
 8008630:	461a      	mov	r2, r3
 8008632:	4620      	mov	r0, r4
 8008634:	f000 fcf2 	bl	800901c <__lshift>
 8008638:	4606      	mov	r6, r0
 800863a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800863c:	2b00      	cmp	r3, #0
 800863e:	d06e      	beq.n	800871e <_dtoa_r+0x90e>
 8008640:	ee18 0a10 	vmov	r0, s16
 8008644:	4631      	mov	r1, r6
 8008646:	f000 fd59 	bl	80090fc <__mcmp>
 800864a:	2800      	cmp	r0, #0
 800864c:	da67      	bge.n	800871e <_dtoa_r+0x90e>
 800864e:	9b00      	ldr	r3, [sp, #0]
 8008650:	3b01      	subs	r3, #1
 8008652:	ee18 1a10 	vmov	r1, s16
 8008656:	9300      	str	r3, [sp, #0]
 8008658:	220a      	movs	r2, #10
 800865a:	2300      	movs	r3, #0
 800865c:	4620      	mov	r0, r4
 800865e:	f000 fb2d 	bl	8008cbc <__multadd>
 8008662:	9b08      	ldr	r3, [sp, #32]
 8008664:	ee08 0a10 	vmov	s16, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	f000 81b1 	beq.w	80089d0 <_dtoa_r+0xbc0>
 800866e:	2300      	movs	r3, #0
 8008670:	4639      	mov	r1, r7
 8008672:	220a      	movs	r2, #10
 8008674:	4620      	mov	r0, r4
 8008676:	f000 fb21 	bl	8008cbc <__multadd>
 800867a:	9b02      	ldr	r3, [sp, #8]
 800867c:	2b00      	cmp	r3, #0
 800867e:	4607      	mov	r7, r0
 8008680:	f300 808e 	bgt.w	80087a0 <_dtoa_r+0x990>
 8008684:	9b06      	ldr	r3, [sp, #24]
 8008686:	2b02      	cmp	r3, #2
 8008688:	dc51      	bgt.n	800872e <_dtoa_r+0x91e>
 800868a:	e089      	b.n	80087a0 <_dtoa_r+0x990>
 800868c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800868e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008692:	e74b      	b.n	800852c <_dtoa_r+0x71c>
 8008694:	9b03      	ldr	r3, [sp, #12]
 8008696:	1e5e      	subs	r6, r3, #1
 8008698:	9b07      	ldr	r3, [sp, #28]
 800869a:	42b3      	cmp	r3, r6
 800869c:	bfbf      	itttt	lt
 800869e:	9b07      	ldrlt	r3, [sp, #28]
 80086a0:	9607      	strlt	r6, [sp, #28]
 80086a2:	1af2      	sublt	r2, r6, r3
 80086a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80086a6:	bfb6      	itet	lt
 80086a8:	189b      	addlt	r3, r3, r2
 80086aa:	1b9e      	subge	r6, r3, r6
 80086ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 80086ae:	9b03      	ldr	r3, [sp, #12]
 80086b0:	bfb8      	it	lt
 80086b2:	2600      	movlt	r6, #0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	bfb7      	itett	lt
 80086b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80086bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80086c0:	1a9d      	sublt	r5, r3, r2
 80086c2:	2300      	movlt	r3, #0
 80086c4:	e734      	b.n	8008530 <_dtoa_r+0x720>
 80086c6:	9e07      	ldr	r6, [sp, #28]
 80086c8:	9d04      	ldr	r5, [sp, #16]
 80086ca:	9f08      	ldr	r7, [sp, #32]
 80086cc:	e73b      	b.n	8008546 <_dtoa_r+0x736>
 80086ce:	9a07      	ldr	r2, [sp, #28]
 80086d0:	e767      	b.n	80085a2 <_dtoa_r+0x792>
 80086d2:	9b06      	ldr	r3, [sp, #24]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	dc18      	bgt.n	800870a <_dtoa_r+0x8fa>
 80086d8:	f1ba 0f00 	cmp.w	sl, #0
 80086dc:	d115      	bne.n	800870a <_dtoa_r+0x8fa>
 80086de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80086e2:	b993      	cbnz	r3, 800870a <_dtoa_r+0x8fa>
 80086e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80086e8:	0d1b      	lsrs	r3, r3, #20
 80086ea:	051b      	lsls	r3, r3, #20
 80086ec:	b183      	cbz	r3, 8008710 <_dtoa_r+0x900>
 80086ee:	9b04      	ldr	r3, [sp, #16]
 80086f0:	3301      	adds	r3, #1
 80086f2:	9304      	str	r3, [sp, #16]
 80086f4:	9b05      	ldr	r3, [sp, #20]
 80086f6:	3301      	adds	r3, #1
 80086f8:	9305      	str	r3, [sp, #20]
 80086fa:	f04f 0801 	mov.w	r8, #1
 80086fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008700:	2b00      	cmp	r3, #0
 8008702:	f47f af6a 	bne.w	80085da <_dtoa_r+0x7ca>
 8008706:	2001      	movs	r0, #1
 8008708:	e76f      	b.n	80085ea <_dtoa_r+0x7da>
 800870a:	f04f 0800 	mov.w	r8, #0
 800870e:	e7f6      	b.n	80086fe <_dtoa_r+0x8ee>
 8008710:	4698      	mov	r8, r3
 8008712:	e7f4      	b.n	80086fe <_dtoa_r+0x8ee>
 8008714:	f43f af7d 	beq.w	8008612 <_dtoa_r+0x802>
 8008718:	4618      	mov	r0, r3
 800871a:	301c      	adds	r0, #28
 800871c:	e772      	b.n	8008604 <_dtoa_r+0x7f4>
 800871e:	9b03      	ldr	r3, [sp, #12]
 8008720:	2b00      	cmp	r3, #0
 8008722:	dc37      	bgt.n	8008794 <_dtoa_r+0x984>
 8008724:	9b06      	ldr	r3, [sp, #24]
 8008726:	2b02      	cmp	r3, #2
 8008728:	dd34      	ble.n	8008794 <_dtoa_r+0x984>
 800872a:	9b03      	ldr	r3, [sp, #12]
 800872c:	9302      	str	r3, [sp, #8]
 800872e:	9b02      	ldr	r3, [sp, #8]
 8008730:	b96b      	cbnz	r3, 800874e <_dtoa_r+0x93e>
 8008732:	4631      	mov	r1, r6
 8008734:	2205      	movs	r2, #5
 8008736:	4620      	mov	r0, r4
 8008738:	f000 fac0 	bl	8008cbc <__multadd>
 800873c:	4601      	mov	r1, r0
 800873e:	4606      	mov	r6, r0
 8008740:	ee18 0a10 	vmov	r0, s16
 8008744:	f000 fcda 	bl	80090fc <__mcmp>
 8008748:	2800      	cmp	r0, #0
 800874a:	f73f adbb 	bgt.w	80082c4 <_dtoa_r+0x4b4>
 800874e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008750:	9d01      	ldr	r5, [sp, #4]
 8008752:	43db      	mvns	r3, r3
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	f04f 0800 	mov.w	r8, #0
 800875a:	4631      	mov	r1, r6
 800875c:	4620      	mov	r0, r4
 800875e:	f000 fa8b 	bl	8008c78 <_Bfree>
 8008762:	2f00      	cmp	r7, #0
 8008764:	f43f aea4 	beq.w	80084b0 <_dtoa_r+0x6a0>
 8008768:	f1b8 0f00 	cmp.w	r8, #0
 800876c:	d005      	beq.n	800877a <_dtoa_r+0x96a>
 800876e:	45b8      	cmp	r8, r7
 8008770:	d003      	beq.n	800877a <_dtoa_r+0x96a>
 8008772:	4641      	mov	r1, r8
 8008774:	4620      	mov	r0, r4
 8008776:	f000 fa7f 	bl	8008c78 <_Bfree>
 800877a:	4639      	mov	r1, r7
 800877c:	4620      	mov	r0, r4
 800877e:	f000 fa7b 	bl	8008c78 <_Bfree>
 8008782:	e695      	b.n	80084b0 <_dtoa_r+0x6a0>
 8008784:	2600      	movs	r6, #0
 8008786:	4637      	mov	r7, r6
 8008788:	e7e1      	b.n	800874e <_dtoa_r+0x93e>
 800878a:	9700      	str	r7, [sp, #0]
 800878c:	4637      	mov	r7, r6
 800878e:	e599      	b.n	80082c4 <_dtoa_r+0x4b4>
 8008790:	40240000 	.word	0x40240000
 8008794:	9b08      	ldr	r3, [sp, #32]
 8008796:	2b00      	cmp	r3, #0
 8008798:	f000 80ca 	beq.w	8008930 <_dtoa_r+0xb20>
 800879c:	9b03      	ldr	r3, [sp, #12]
 800879e:	9302      	str	r3, [sp, #8]
 80087a0:	2d00      	cmp	r5, #0
 80087a2:	dd05      	ble.n	80087b0 <_dtoa_r+0x9a0>
 80087a4:	4639      	mov	r1, r7
 80087a6:	462a      	mov	r2, r5
 80087a8:	4620      	mov	r0, r4
 80087aa:	f000 fc37 	bl	800901c <__lshift>
 80087ae:	4607      	mov	r7, r0
 80087b0:	f1b8 0f00 	cmp.w	r8, #0
 80087b4:	d05b      	beq.n	800886e <_dtoa_r+0xa5e>
 80087b6:	6879      	ldr	r1, [r7, #4]
 80087b8:	4620      	mov	r0, r4
 80087ba:	f000 fa1d 	bl	8008bf8 <_Balloc>
 80087be:	4605      	mov	r5, r0
 80087c0:	b928      	cbnz	r0, 80087ce <_dtoa_r+0x9be>
 80087c2:	4b87      	ldr	r3, [pc, #540]	; (80089e0 <_dtoa_r+0xbd0>)
 80087c4:	4602      	mov	r2, r0
 80087c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80087ca:	f7ff bb3b 	b.w	8007e44 <_dtoa_r+0x34>
 80087ce:	693a      	ldr	r2, [r7, #16]
 80087d0:	3202      	adds	r2, #2
 80087d2:	0092      	lsls	r2, r2, #2
 80087d4:	f107 010c 	add.w	r1, r7, #12
 80087d8:	300c      	adds	r0, #12
 80087da:	f7fe fdb9 	bl	8007350 <memcpy>
 80087de:	2201      	movs	r2, #1
 80087e0:	4629      	mov	r1, r5
 80087e2:	4620      	mov	r0, r4
 80087e4:	f000 fc1a 	bl	800901c <__lshift>
 80087e8:	9b01      	ldr	r3, [sp, #4]
 80087ea:	f103 0901 	add.w	r9, r3, #1
 80087ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80087f2:	4413      	add	r3, r2
 80087f4:	9305      	str	r3, [sp, #20]
 80087f6:	f00a 0301 	and.w	r3, sl, #1
 80087fa:	46b8      	mov	r8, r7
 80087fc:	9304      	str	r3, [sp, #16]
 80087fe:	4607      	mov	r7, r0
 8008800:	4631      	mov	r1, r6
 8008802:	ee18 0a10 	vmov	r0, s16
 8008806:	f7ff fa75 	bl	8007cf4 <quorem>
 800880a:	4641      	mov	r1, r8
 800880c:	9002      	str	r0, [sp, #8]
 800880e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008812:	ee18 0a10 	vmov	r0, s16
 8008816:	f000 fc71 	bl	80090fc <__mcmp>
 800881a:	463a      	mov	r2, r7
 800881c:	9003      	str	r0, [sp, #12]
 800881e:	4631      	mov	r1, r6
 8008820:	4620      	mov	r0, r4
 8008822:	f000 fc87 	bl	8009134 <__mdiff>
 8008826:	68c2      	ldr	r2, [r0, #12]
 8008828:	f109 3bff 	add.w	fp, r9, #4294967295
 800882c:	4605      	mov	r5, r0
 800882e:	bb02      	cbnz	r2, 8008872 <_dtoa_r+0xa62>
 8008830:	4601      	mov	r1, r0
 8008832:	ee18 0a10 	vmov	r0, s16
 8008836:	f000 fc61 	bl	80090fc <__mcmp>
 800883a:	4602      	mov	r2, r0
 800883c:	4629      	mov	r1, r5
 800883e:	4620      	mov	r0, r4
 8008840:	9207      	str	r2, [sp, #28]
 8008842:	f000 fa19 	bl	8008c78 <_Bfree>
 8008846:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800884a:	ea43 0102 	orr.w	r1, r3, r2
 800884e:	9b04      	ldr	r3, [sp, #16]
 8008850:	430b      	orrs	r3, r1
 8008852:	464d      	mov	r5, r9
 8008854:	d10f      	bne.n	8008876 <_dtoa_r+0xa66>
 8008856:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800885a:	d02a      	beq.n	80088b2 <_dtoa_r+0xaa2>
 800885c:	9b03      	ldr	r3, [sp, #12]
 800885e:	2b00      	cmp	r3, #0
 8008860:	dd02      	ble.n	8008868 <_dtoa_r+0xa58>
 8008862:	9b02      	ldr	r3, [sp, #8]
 8008864:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008868:	f88b a000 	strb.w	sl, [fp]
 800886c:	e775      	b.n	800875a <_dtoa_r+0x94a>
 800886e:	4638      	mov	r0, r7
 8008870:	e7ba      	b.n	80087e8 <_dtoa_r+0x9d8>
 8008872:	2201      	movs	r2, #1
 8008874:	e7e2      	b.n	800883c <_dtoa_r+0xa2c>
 8008876:	9b03      	ldr	r3, [sp, #12]
 8008878:	2b00      	cmp	r3, #0
 800887a:	db04      	blt.n	8008886 <_dtoa_r+0xa76>
 800887c:	9906      	ldr	r1, [sp, #24]
 800887e:	430b      	orrs	r3, r1
 8008880:	9904      	ldr	r1, [sp, #16]
 8008882:	430b      	orrs	r3, r1
 8008884:	d122      	bne.n	80088cc <_dtoa_r+0xabc>
 8008886:	2a00      	cmp	r2, #0
 8008888:	ddee      	ble.n	8008868 <_dtoa_r+0xa58>
 800888a:	ee18 1a10 	vmov	r1, s16
 800888e:	2201      	movs	r2, #1
 8008890:	4620      	mov	r0, r4
 8008892:	f000 fbc3 	bl	800901c <__lshift>
 8008896:	4631      	mov	r1, r6
 8008898:	ee08 0a10 	vmov	s16, r0
 800889c:	f000 fc2e 	bl	80090fc <__mcmp>
 80088a0:	2800      	cmp	r0, #0
 80088a2:	dc03      	bgt.n	80088ac <_dtoa_r+0xa9c>
 80088a4:	d1e0      	bne.n	8008868 <_dtoa_r+0xa58>
 80088a6:	f01a 0f01 	tst.w	sl, #1
 80088aa:	d0dd      	beq.n	8008868 <_dtoa_r+0xa58>
 80088ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80088b0:	d1d7      	bne.n	8008862 <_dtoa_r+0xa52>
 80088b2:	2339      	movs	r3, #57	; 0x39
 80088b4:	f88b 3000 	strb.w	r3, [fp]
 80088b8:	462b      	mov	r3, r5
 80088ba:	461d      	mov	r5, r3
 80088bc:	3b01      	subs	r3, #1
 80088be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80088c2:	2a39      	cmp	r2, #57	; 0x39
 80088c4:	d071      	beq.n	80089aa <_dtoa_r+0xb9a>
 80088c6:	3201      	adds	r2, #1
 80088c8:	701a      	strb	r2, [r3, #0]
 80088ca:	e746      	b.n	800875a <_dtoa_r+0x94a>
 80088cc:	2a00      	cmp	r2, #0
 80088ce:	dd07      	ble.n	80088e0 <_dtoa_r+0xad0>
 80088d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80088d4:	d0ed      	beq.n	80088b2 <_dtoa_r+0xaa2>
 80088d6:	f10a 0301 	add.w	r3, sl, #1
 80088da:	f88b 3000 	strb.w	r3, [fp]
 80088de:	e73c      	b.n	800875a <_dtoa_r+0x94a>
 80088e0:	9b05      	ldr	r3, [sp, #20]
 80088e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80088e6:	4599      	cmp	r9, r3
 80088e8:	d047      	beq.n	800897a <_dtoa_r+0xb6a>
 80088ea:	ee18 1a10 	vmov	r1, s16
 80088ee:	2300      	movs	r3, #0
 80088f0:	220a      	movs	r2, #10
 80088f2:	4620      	mov	r0, r4
 80088f4:	f000 f9e2 	bl	8008cbc <__multadd>
 80088f8:	45b8      	cmp	r8, r7
 80088fa:	ee08 0a10 	vmov	s16, r0
 80088fe:	f04f 0300 	mov.w	r3, #0
 8008902:	f04f 020a 	mov.w	r2, #10
 8008906:	4641      	mov	r1, r8
 8008908:	4620      	mov	r0, r4
 800890a:	d106      	bne.n	800891a <_dtoa_r+0xb0a>
 800890c:	f000 f9d6 	bl	8008cbc <__multadd>
 8008910:	4680      	mov	r8, r0
 8008912:	4607      	mov	r7, r0
 8008914:	f109 0901 	add.w	r9, r9, #1
 8008918:	e772      	b.n	8008800 <_dtoa_r+0x9f0>
 800891a:	f000 f9cf 	bl	8008cbc <__multadd>
 800891e:	4639      	mov	r1, r7
 8008920:	4680      	mov	r8, r0
 8008922:	2300      	movs	r3, #0
 8008924:	220a      	movs	r2, #10
 8008926:	4620      	mov	r0, r4
 8008928:	f000 f9c8 	bl	8008cbc <__multadd>
 800892c:	4607      	mov	r7, r0
 800892e:	e7f1      	b.n	8008914 <_dtoa_r+0xb04>
 8008930:	9b03      	ldr	r3, [sp, #12]
 8008932:	9302      	str	r3, [sp, #8]
 8008934:	9d01      	ldr	r5, [sp, #4]
 8008936:	ee18 0a10 	vmov	r0, s16
 800893a:	4631      	mov	r1, r6
 800893c:	f7ff f9da 	bl	8007cf4 <quorem>
 8008940:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008944:	9b01      	ldr	r3, [sp, #4]
 8008946:	f805 ab01 	strb.w	sl, [r5], #1
 800894a:	1aea      	subs	r2, r5, r3
 800894c:	9b02      	ldr	r3, [sp, #8]
 800894e:	4293      	cmp	r3, r2
 8008950:	dd09      	ble.n	8008966 <_dtoa_r+0xb56>
 8008952:	ee18 1a10 	vmov	r1, s16
 8008956:	2300      	movs	r3, #0
 8008958:	220a      	movs	r2, #10
 800895a:	4620      	mov	r0, r4
 800895c:	f000 f9ae 	bl	8008cbc <__multadd>
 8008960:	ee08 0a10 	vmov	s16, r0
 8008964:	e7e7      	b.n	8008936 <_dtoa_r+0xb26>
 8008966:	9b02      	ldr	r3, [sp, #8]
 8008968:	2b00      	cmp	r3, #0
 800896a:	bfc8      	it	gt
 800896c:	461d      	movgt	r5, r3
 800896e:	9b01      	ldr	r3, [sp, #4]
 8008970:	bfd8      	it	le
 8008972:	2501      	movle	r5, #1
 8008974:	441d      	add	r5, r3
 8008976:	f04f 0800 	mov.w	r8, #0
 800897a:	ee18 1a10 	vmov	r1, s16
 800897e:	2201      	movs	r2, #1
 8008980:	4620      	mov	r0, r4
 8008982:	f000 fb4b 	bl	800901c <__lshift>
 8008986:	4631      	mov	r1, r6
 8008988:	ee08 0a10 	vmov	s16, r0
 800898c:	f000 fbb6 	bl	80090fc <__mcmp>
 8008990:	2800      	cmp	r0, #0
 8008992:	dc91      	bgt.n	80088b8 <_dtoa_r+0xaa8>
 8008994:	d102      	bne.n	800899c <_dtoa_r+0xb8c>
 8008996:	f01a 0f01 	tst.w	sl, #1
 800899a:	d18d      	bne.n	80088b8 <_dtoa_r+0xaa8>
 800899c:	462b      	mov	r3, r5
 800899e:	461d      	mov	r5, r3
 80089a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089a4:	2a30      	cmp	r2, #48	; 0x30
 80089a6:	d0fa      	beq.n	800899e <_dtoa_r+0xb8e>
 80089a8:	e6d7      	b.n	800875a <_dtoa_r+0x94a>
 80089aa:	9a01      	ldr	r2, [sp, #4]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d184      	bne.n	80088ba <_dtoa_r+0xaaa>
 80089b0:	9b00      	ldr	r3, [sp, #0]
 80089b2:	3301      	adds	r3, #1
 80089b4:	9300      	str	r3, [sp, #0]
 80089b6:	2331      	movs	r3, #49	; 0x31
 80089b8:	7013      	strb	r3, [r2, #0]
 80089ba:	e6ce      	b.n	800875a <_dtoa_r+0x94a>
 80089bc:	4b09      	ldr	r3, [pc, #36]	; (80089e4 <_dtoa_r+0xbd4>)
 80089be:	f7ff ba95 	b.w	8007eec <_dtoa_r+0xdc>
 80089c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f47f aa6e 	bne.w	8007ea6 <_dtoa_r+0x96>
 80089ca:	4b07      	ldr	r3, [pc, #28]	; (80089e8 <_dtoa_r+0xbd8>)
 80089cc:	f7ff ba8e 	b.w	8007eec <_dtoa_r+0xdc>
 80089d0:	9b02      	ldr	r3, [sp, #8]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	dcae      	bgt.n	8008934 <_dtoa_r+0xb24>
 80089d6:	9b06      	ldr	r3, [sp, #24]
 80089d8:	2b02      	cmp	r3, #2
 80089da:	f73f aea8 	bgt.w	800872e <_dtoa_r+0x91e>
 80089de:	e7a9      	b.n	8008934 <_dtoa_r+0xb24>
 80089e0:	0800d2eb 	.word	0x0800d2eb
 80089e4:	0800d248 	.word	0x0800d248
 80089e8:	0800d26c 	.word	0x0800d26c

080089ec <std>:
 80089ec:	2300      	movs	r3, #0
 80089ee:	b510      	push	{r4, lr}
 80089f0:	4604      	mov	r4, r0
 80089f2:	e9c0 3300 	strd	r3, r3, [r0]
 80089f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089fa:	6083      	str	r3, [r0, #8]
 80089fc:	8181      	strh	r1, [r0, #12]
 80089fe:	6643      	str	r3, [r0, #100]	; 0x64
 8008a00:	81c2      	strh	r2, [r0, #14]
 8008a02:	6183      	str	r3, [r0, #24]
 8008a04:	4619      	mov	r1, r3
 8008a06:	2208      	movs	r2, #8
 8008a08:	305c      	adds	r0, #92	; 0x5c
 8008a0a:	f7fe fcc9 	bl	80073a0 <memset>
 8008a0e:	4b05      	ldr	r3, [pc, #20]	; (8008a24 <std+0x38>)
 8008a10:	6263      	str	r3, [r4, #36]	; 0x24
 8008a12:	4b05      	ldr	r3, [pc, #20]	; (8008a28 <std+0x3c>)
 8008a14:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a16:	4b05      	ldr	r3, [pc, #20]	; (8008a2c <std+0x40>)
 8008a18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a1a:	4b05      	ldr	r3, [pc, #20]	; (8008a30 <std+0x44>)
 8008a1c:	6224      	str	r4, [r4, #32]
 8008a1e:	6323      	str	r3, [r4, #48]	; 0x30
 8008a20:	bd10      	pop	{r4, pc}
 8008a22:	bf00      	nop
 8008a24:	08009a79 	.word	0x08009a79
 8008a28:	08009a9b 	.word	0x08009a9b
 8008a2c:	08009ad3 	.word	0x08009ad3
 8008a30:	08009af7 	.word	0x08009af7

08008a34 <_cleanup_r>:
 8008a34:	4901      	ldr	r1, [pc, #4]	; (8008a3c <_cleanup_r+0x8>)
 8008a36:	f000 b8af 	b.w	8008b98 <_fwalk_reent>
 8008a3a:	bf00      	nop
 8008a3c:	08009e0d 	.word	0x08009e0d

08008a40 <__sfmoreglue>:
 8008a40:	b570      	push	{r4, r5, r6, lr}
 8008a42:	2268      	movs	r2, #104	; 0x68
 8008a44:	1e4d      	subs	r5, r1, #1
 8008a46:	4355      	muls	r5, r2
 8008a48:	460e      	mov	r6, r1
 8008a4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a4e:	f000 fcd9 	bl	8009404 <_malloc_r>
 8008a52:	4604      	mov	r4, r0
 8008a54:	b140      	cbz	r0, 8008a68 <__sfmoreglue+0x28>
 8008a56:	2100      	movs	r1, #0
 8008a58:	e9c0 1600 	strd	r1, r6, [r0]
 8008a5c:	300c      	adds	r0, #12
 8008a5e:	60a0      	str	r0, [r4, #8]
 8008a60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008a64:	f7fe fc9c 	bl	80073a0 <memset>
 8008a68:	4620      	mov	r0, r4
 8008a6a:	bd70      	pop	{r4, r5, r6, pc}

08008a6c <__sfp_lock_acquire>:
 8008a6c:	4801      	ldr	r0, [pc, #4]	; (8008a74 <__sfp_lock_acquire+0x8>)
 8008a6e:	f000 b8b8 	b.w	8008be2 <__retarget_lock_acquire_recursive>
 8008a72:	bf00      	nop
 8008a74:	20000fa3 	.word	0x20000fa3

08008a78 <__sfp_lock_release>:
 8008a78:	4801      	ldr	r0, [pc, #4]	; (8008a80 <__sfp_lock_release+0x8>)
 8008a7a:	f000 b8b3 	b.w	8008be4 <__retarget_lock_release_recursive>
 8008a7e:	bf00      	nop
 8008a80:	20000fa3 	.word	0x20000fa3

08008a84 <__sinit_lock_acquire>:
 8008a84:	4801      	ldr	r0, [pc, #4]	; (8008a8c <__sinit_lock_acquire+0x8>)
 8008a86:	f000 b8ac 	b.w	8008be2 <__retarget_lock_acquire_recursive>
 8008a8a:	bf00      	nop
 8008a8c:	20000fa4 	.word	0x20000fa4

08008a90 <__sinit_lock_release>:
 8008a90:	4801      	ldr	r0, [pc, #4]	; (8008a98 <__sinit_lock_release+0x8>)
 8008a92:	f000 b8a7 	b.w	8008be4 <__retarget_lock_release_recursive>
 8008a96:	bf00      	nop
 8008a98:	20000fa4 	.word	0x20000fa4

08008a9c <__sinit>:
 8008a9c:	b510      	push	{r4, lr}
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	f7ff fff0 	bl	8008a84 <__sinit_lock_acquire>
 8008aa4:	69a3      	ldr	r3, [r4, #24]
 8008aa6:	b11b      	cbz	r3, 8008ab0 <__sinit+0x14>
 8008aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008aac:	f7ff bff0 	b.w	8008a90 <__sinit_lock_release>
 8008ab0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008ab4:	6523      	str	r3, [r4, #80]	; 0x50
 8008ab6:	4b13      	ldr	r3, [pc, #76]	; (8008b04 <__sinit+0x68>)
 8008ab8:	4a13      	ldr	r2, [pc, #76]	; (8008b08 <__sinit+0x6c>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	62a2      	str	r2, [r4, #40]	; 0x28
 8008abe:	42a3      	cmp	r3, r4
 8008ac0:	bf04      	itt	eq
 8008ac2:	2301      	moveq	r3, #1
 8008ac4:	61a3      	streq	r3, [r4, #24]
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f000 f820 	bl	8008b0c <__sfp>
 8008acc:	6060      	str	r0, [r4, #4]
 8008ace:	4620      	mov	r0, r4
 8008ad0:	f000 f81c 	bl	8008b0c <__sfp>
 8008ad4:	60a0      	str	r0, [r4, #8]
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	f000 f818 	bl	8008b0c <__sfp>
 8008adc:	2200      	movs	r2, #0
 8008ade:	60e0      	str	r0, [r4, #12]
 8008ae0:	2104      	movs	r1, #4
 8008ae2:	6860      	ldr	r0, [r4, #4]
 8008ae4:	f7ff ff82 	bl	80089ec <std>
 8008ae8:	68a0      	ldr	r0, [r4, #8]
 8008aea:	2201      	movs	r2, #1
 8008aec:	2109      	movs	r1, #9
 8008aee:	f7ff ff7d 	bl	80089ec <std>
 8008af2:	68e0      	ldr	r0, [r4, #12]
 8008af4:	2202      	movs	r2, #2
 8008af6:	2112      	movs	r1, #18
 8008af8:	f7ff ff78 	bl	80089ec <std>
 8008afc:	2301      	movs	r3, #1
 8008afe:	61a3      	str	r3, [r4, #24]
 8008b00:	e7d2      	b.n	8008aa8 <__sinit+0xc>
 8008b02:	bf00      	nop
 8008b04:	0800d234 	.word	0x0800d234
 8008b08:	08008a35 	.word	0x08008a35

08008b0c <__sfp>:
 8008b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b0e:	4607      	mov	r7, r0
 8008b10:	f7ff ffac 	bl	8008a6c <__sfp_lock_acquire>
 8008b14:	4b1e      	ldr	r3, [pc, #120]	; (8008b90 <__sfp+0x84>)
 8008b16:	681e      	ldr	r6, [r3, #0]
 8008b18:	69b3      	ldr	r3, [r6, #24]
 8008b1a:	b913      	cbnz	r3, 8008b22 <__sfp+0x16>
 8008b1c:	4630      	mov	r0, r6
 8008b1e:	f7ff ffbd 	bl	8008a9c <__sinit>
 8008b22:	3648      	adds	r6, #72	; 0x48
 8008b24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	d503      	bpl.n	8008b34 <__sfp+0x28>
 8008b2c:	6833      	ldr	r3, [r6, #0]
 8008b2e:	b30b      	cbz	r3, 8008b74 <__sfp+0x68>
 8008b30:	6836      	ldr	r6, [r6, #0]
 8008b32:	e7f7      	b.n	8008b24 <__sfp+0x18>
 8008b34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b38:	b9d5      	cbnz	r5, 8008b70 <__sfp+0x64>
 8008b3a:	4b16      	ldr	r3, [pc, #88]	; (8008b94 <__sfp+0x88>)
 8008b3c:	60e3      	str	r3, [r4, #12]
 8008b3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b42:	6665      	str	r5, [r4, #100]	; 0x64
 8008b44:	f000 f84c 	bl	8008be0 <__retarget_lock_init_recursive>
 8008b48:	f7ff ff96 	bl	8008a78 <__sfp_lock_release>
 8008b4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008b50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008b54:	6025      	str	r5, [r4, #0]
 8008b56:	61a5      	str	r5, [r4, #24]
 8008b58:	2208      	movs	r2, #8
 8008b5a:	4629      	mov	r1, r5
 8008b5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b60:	f7fe fc1e 	bl	80073a0 <memset>
 8008b64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008b68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b70:	3468      	adds	r4, #104	; 0x68
 8008b72:	e7d9      	b.n	8008b28 <__sfp+0x1c>
 8008b74:	2104      	movs	r1, #4
 8008b76:	4638      	mov	r0, r7
 8008b78:	f7ff ff62 	bl	8008a40 <__sfmoreglue>
 8008b7c:	4604      	mov	r4, r0
 8008b7e:	6030      	str	r0, [r6, #0]
 8008b80:	2800      	cmp	r0, #0
 8008b82:	d1d5      	bne.n	8008b30 <__sfp+0x24>
 8008b84:	f7ff ff78 	bl	8008a78 <__sfp_lock_release>
 8008b88:	230c      	movs	r3, #12
 8008b8a:	603b      	str	r3, [r7, #0]
 8008b8c:	e7ee      	b.n	8008b6c <__sfp+0x60>
 8008b8e:	bf00      	nop
 8008b90:	0800d234 	.word	0x0800d234
 8008b94:	ffff0001 	.word	0xffff0001

08008b98 <_fwalk_reent>:
 8008b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b9c:	4606      	mov	r6, r0
 8008b9e:	4688      	mov	r8, r1
 8008ba0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ba4:	2700      	movs	r7, #0
 8008ba6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008baa:	f1b9 0901 	subs.w	r9, r9, #1
 8008bae:	d505      	bpl.n	8008bbc <_fwalk_reent+0x24>
 8008bb0:	6824      	ldr	r4, [r4, #0]
 8008bb2:	2c00      	cmp	r4, #0
 8008bb4:	d1f7      	bne.n	8008ba6 <_fwalk_reent+0xe>
 8008bb6:	4638      	mov	r0, r7
 8008bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bbc:	89ab      	ldrh	r3, [r5, #12]
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d907      	bls.n	8008bd2 <_fwalk_reent+0x3a>
 8008bc2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	d003      	beq.n	8008bd2 <_fwalk_reent+0x3a>
 8008bca:	4629      	mov	r1, r5
 8008bcc:	4630      	mov	r0, r6
 8008bce:	47c0      	blx	r8
 8008bd0:	4307      	orrs	r7, r0
 8008bd2:	3568      	adds	r5, #104	; 0x68
 8008bd4:	e7e9      	b.n	8008baa <_fwalk_reent+0x12>
	...

08008bd8 <_localeconv_r>:
 8008bd8:	4800      	ldr	r0, [pc, #0]	; (8008bdc <_localeconv_r+0x4>)
 8008bda:	4770      	bx	lr
 8008bdc:	200005a4 	.word	0x200005a4

08008be0 <__retarget_lock_init_recursive>:
 8008be0:	4770      	bx	lr

08008be2 <__retarget_lock_acquire_recursive>:
 8008be2:	4770      	bx	lr

08008be4 <__retarget_lock_release_recursive>:
 8008be4:	4770      	bx	lr
	...

08008be8 <malloc>:
 8008be8:	4b02      	ldr	r3, [pc, #8]	; (8008bf4 <malloc+0xc>)
 8008bea:	4601      	mov	r1, r0
 8008bec:	6818      	ldr	r0, [r3, #0]
 8008bee:	f000 bc09 	b.w	8009404 <_malloc_r>
 8008bf2:	bf00      	nop
 8008bf4:	20000450 	.word	0x20000450

08008bf8 <_Balloc>:
 8008bf8:	b570      	push	{r4, r5, r6, lr}
 8008bfa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008bfc:	4604      	mov	r4, r0
 8008bfe:	460d      	mov	r5, r1
 8008c00:	b976      	cbnz	r6, 8008c20 <_Balloc+0x28>
 8008c02:	2010      	movs	r0, #16
 8008c04:	f7ff fff0 	bl	8008be8 <malloc>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	6260      	str	r0, [r4, #36]	; 0x24
 8008c0c:	b920      	cbnz	r0, 8008c18 <_Balloc+0x20>
 8008c0e:	4b18      	ldr	r3, [pc, #96]	; (8008c70 <_Balloc+0x78>)
 8008c10:	4818      	ldr	r0, [pc, #96]	; (8008c74 <_Balloc+0x7c>)
 8008c12:	2166      	movs	r1, #102	; 0x66
 8008c14:	f001 f846 	bl	8009ca4 <__assert_func>
 8008c18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c1c:	6006      	str	r6, [r0, #0]
 8008c1e:	60c6      	str	r6, [r0, #12]
 8008c20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008c22:	68f3      	ldr	r3, [r6, #12]
 8008c24:	b183      	cbz	r3, 8008c48 <_Balloc+0x50>
 8008c26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c2e:	b9b8      	cbnz	r0, 8008c60 <_Balloc+0x68>
 8008c30:	2101      	movs	r1, #1
 8008c32:	fa01 f605 	lsl.w	r6, r1, r5
 8008c36:	1d72      	adds	r2, r6, #5
 8008c38:	0092      	lsls	r2, r2, #2
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	f000 fb60 	bl	8009300 <_calloc_r>
 8008c40:	b160      	cbz	r0, 8008c5c <_Balloc+0x64>
 8008c42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c46:	e00e      	b.n	8008c66 <_Balloc+0x6e>
 8008c48:	2221      	movs	r2, #33	; 0x21
 8008c4a:	2104      	movs	r1, #4
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	f000 fb57 	bl	8009300 <_calloc_r>
 8008c52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c54:	60f0      	str	r0, [r6, #12]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1e4      	bne.n	8008c26 <_Balloc+0x2e>
 8008c5c:	2000      	movs	r0, #0
 8008c5e:	bd70      	pop	{r4, r5, r6, pc}
 8008c60:	6802      	ldr	r2, [r0, #0]
 8008c62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c66:	2300      	movs	r3, #0
 8008c68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c6c:	e7f7      	b.n	8008c5e <_Balloc+0x66>
 8008c6e:	bf00      	nop
 8008c70:	0800d279 	.word	0x0800d279
 8008c74:	0800d35c 	.word	0x0800d35c

08008c78 <_Bfree>:
 8008c78:	b570      	push	{r4, r5, r6, lr}
 8008c7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c7c:	4605      	mov	r5, r0
 8008c7e:	460c      	mov	r4, r1
 8008c80:	b976      	cbnz	r6, 8008ca0 <_Bfree+0x28>
 8008c82:	2010      	movs	r0, #16
 8008c84:	f7ff ffb0 	bl	8008be8 <malloc>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	6268      	str	r0, [r5, #36]	; 0x24
 8008c8c:	b920      	cbnz	r0, 8008c98 <_Bfree+0x20>
 8008c8e:	4b09      	ldr	r3, [pc, #36]	; (8008cb4 <_Bfree+0x3c>)
 8008c90:	4809      	ldr	r0, [pc, #36]	; (8008cb8 <_Bfree+0x40>)
 8008c92:	218a      	movs	r1, #138	; 0x8a
 8008c94:	f001 f806 	bl	8009ca4 <__assert_func>
 8008c98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c9c:	6006      	str	r6, [r0, #0]
 8008c9e:	60c6      	str	r6, [r0, #12]
 8008ca0:	b13c      	cbz	r4, 8008cb2 <_Bfree+0x3a>
 8008ca2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ca4:	6862      	ldr	r2, [r4, #4]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008cac:	6021      	str	r1, [r4, #0]
 8008cae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008cb2:	bd70      	pop	{r4, r5, r6, pc}
 8008cb4:	0800d279 	.word	0x0800d279
 8008cb8:	0800d35c 	.word	0x0800d35c

08008cbc <__multadd>:
 8008cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc0:	690d      	ldr	r5, [r1, #16]
 8008cc2:	4607      	mov	r7, r0
 8008cc4:	460c      	mov	r4, r1
 8008cc6:	461e      	mov	r6, r3
 8008cc8:	f101 0c14 	add.w	ip, r1, #20
 8008ccc:	2000      	movs	r0, #0
 8008cce:	f8dc 3000 	ldr.w	r3, [ip]
 8008cd2:	b299      	uxth	r1, r3
 8008cd4:	fb02 6101 	mla	r1, r2, r1, r6
 8008cd8:	0c1e      	lsrs	r6, r3, #16
 8008cda:	0c0b      	lsrs	r3, r1, #16
 8008cdc:	fb02 3306 	mla	r3, r2, r6, r3
 8008ce0:	b289      	uxth	r1, r1
 8008ce2:	3001      	adds	r0, #1
 8008ce4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ce8:	4285      	cmp	r5, r0
 8008cea:	f84c 1b04 	str.w	r1, [ip], #4
 8008cee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008cf2:	dcec      	bgt.n	8008cce <__multadd+0x12>
 8008cf4:	b30e      	cbz	r6, 8008d3a <__multadd+0x7e>
 8008cf6:	68a3      	ldr	r3, [r4, #8]
 8008cf8:	42ab      	cmp	r3, r5
 8008cfa:	dc19      	bgt.n	8008d30 <__multadd+0x74>
 8008cfc:	6861      	ldr	r1, [r4, #4]
 8008cfe:	4638      	mov	r0, r7
 8008d00:	3101      	adds	r1, #1
 8008d02:	f7ff ff79 	bl	8008bf8 <_Balloc>
 8008d06:	4680      	mov	r8, r0
 8008d08:	b928      	cbnz	r0, 8008d16 <__multadd+0x5a>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	4b0c      	ldr	r3, [pc, #48]	; (8008d40 <__multadd+0x84>)
 8008d0e:	480d      	ldr	r0, [pc, #52]	; (8008d44 <__multadd+0x88>)
 8008d10:	21b5      	movs	r1, #181	; 0xb5
 8008d12:	f000 ffc7 	bl	8009ca4 <__assert_func>
 8008d16:	6922      	ldr	r2, [r4, #16]
 8008d18:	3202      	adds	r2, #2
 8008d1a:	f104 010c 	add.w	r1, r4, #12
 8008d1e:	0092      	lsls	r2, r2, #2
 8008d20:	300c      	adds	r0, #12
 8008d22:	f7fe fb15 	bl	8007350 <memcpy>
 8008d26:	4621      	mov	r1, r4
 8008d28:	4638      	mov	r0, r7
 8008d2a:	f7ff ffa5 	bl	8008c78 <_Bfree>
 8008d2e:	4644      	mov	r4, r8
 8008d30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d34:	3501      	adds	r5, #1
 8008d36:	615e      	str	r6, [r3, #20]
 8008d38:	6125      	str	r5, [r4, #16]
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d40:	0800d2eb 	.word	0x0800d2eb
 8008d44:	0800d35c 	.word	0x0800d35c

08008d48 <__hi0bits>:
 8008d48:	0c03      	lsrs	r3, r0, #16
 8008d4a:	041b      	lsls	r3, r3, #16
 8008d4c:	b9d3      	cbnz	r3, 8008d84 <__hi0bits+0x3c>
 8008d4e:	0400      	lsls	r0, r0, #16
 8008d50:	2310      	movs	r3, #16
 8008d52:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008d56:	bf04      	itt	eq
 8008d58:	0200      	lsleq	r0, r0, #8
 8008d5a:	3308      	addeq	r3, #8
 8008d5c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008d60:	bf04      	itt	eq
 8008d62:	0100      	lsleq	r0, r0, #4
 8008d64:	3304      	addeq	r3, #4
 8008d66:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008d6a:	bf04      	itt	eq
 8008d6c:	0080      	lsleq	r0, r0, #2
 8008d6e:	3302      	addeq	r3, #2
 8008d70:	2800      	cmp	r0, #0
 8008d72:	db05      	blt.n	8008d80 <__hi0bits+0x38>
 8008d74:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008d78:	f103 0301 	add.w	r3, r3, #1
 8008d7c:	bf08      	it	eq
 8008d7e:	2320      	moveq	r3, #32
 8008d80:	4618      	mov	r0, r3
 8008d82:	4770      	bx	lr
 8008d84:	2300      	movs	r3, #0
 8008d86:	e7e4      	b.n	8008d52 <__hi0bits+0xa>

08008d88 <__lo0bits>:
 8008d88:	6803      	ldr	r3, [r0, #0]
 8008d8a:	f013 0207 	ands.w	r2, r3, #7
 8008d8e:	4601      	mov	r1, r0
 8008d90:	d00b      	beq.n	8008daa <__lo0bits+0x22>
 8008d92:	07da      	lsls	r2, r3, #31
 8008d94:	d423      	bmi.n	8008dde <__lo0bits+0x56>
 8008d96:	0798      	lsls	r0, r3, #30
 8008d98:	bf49      	itett	mi
 8008d9a:	085b      	lsrmi	r3, r3, #1
 8008d9c:	089b      	lsrpl	r3, r3, #2
 8008d9e:	2001      	movmi	r0, #1
 8008da0:	600b      	strmi	r3, [r1, #0]
 8008da2:	bf5c      	itt	pl
 8008da4:	600b      	strpl	r3, [r1, #0]
 8008da6:	2002      	movpl	r0, #2
 8008da8:	4770      	bx	lr
 8008daa:	b298      	uxth	r0, r3
 8008dac:	b9a8      	cbnz	r0, 8008dda <__lo0bits+0x52>
 8008dae:	0c1b      	lsrs	r3, r3, #16
 8008db0:	2010      	movs	r0, #16
 8008db2:	b2da      	uxtb	r2, r3
 8008db4:	b90a      	cbnz	r2, 8008dba <__lo0bits+0x32>
 8008db6:	3008      	adds	r0, #8
 8008db8:	0a1b      	lsrs	r3, r3, #8
 8008dba:	071a      	lsls	r2, r3, #28
 8008dbc:	bf04      	itt	eq
 8008dbe:	091b      	lsreq	r3, r3, #4
 8008dc0:	3004      	addeq	r0, #4
 8008dc2:	079a      	lsls	r2, r3, #30
 8008dc4:	bf04      	itt	eq
 8008dc6:	089b      	lsreq	r3, r3, #2
 8008dc8:	3002      	addeq	r0, #2
 8008dca:	07da      	lsls	r2, r3, #31
 8008dcc:	d403      	bmi.n	8008dd6 <__lo0bits+0x4e>
 8008dce:	085b      	lsrs	r3, r3, #1
 8008dd0:	f100 0001 	add.w	r0, r0, #1
 8008dd4:	d005      	beq.n	8008de2 <__lo0bits+0x5a>
 8008dd6:	600b      	str	r3, [r1, #0]
 8008dd8:	4770      	bx	lr
 8008dda:	4610      	mov	r0, r2
 8008ddc:	e7e9      	b.n	8008db2 <__lo0bits+0x2a>
 8008dde:	2000      	movs	r0, #0
 8008de0:	4770      	bx	lr
 8008de2:	2020      	movs	r0, #32
 8008de4:	4770      	bx	lr
	...

08008de8 <__i2b>:
 8008de8:	b510      	push	{r4, lr}
 8008dea:	460c      	mov	r4, r1
 8008dec:	2101      	movs	r1, #1
 8008dee:	f7ff ff03 	bl	8008bf8 <_Balloc>
 8008df2:	4602      	mov	r2, r0
 8008df4:	b928      	cbnz	r0, 8008e02 <__i2b+0x1a>
 8008df6:	4b05      	ldr	r3, [pc, #20]	; (8008e0c <__i2b+0x24>)
 8008df8:	4805      	ldr	r0, [pc, #20]	; (8008e10 <__i2b+0x28>)
 8008dfa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008dfe:	f000 ff51 	bl	8009ca4 <__assert_func>
 8008e02:	2301      	movs	r3, #1
 8008e04:	6144      	str	r4, [r0, #20]
 8008e06:	6103      	str	r3, [r0, #16]
 8008e08:	bd10      	pop	{r4, pc}
 8008e0a:	bf00      	nop
 8008e0c:	0800d2eb 	.word	0x0800d2eb
 8008e10:	0800d35c 	.word	0x0800d35c

08008e14 <__multiply>:
 8008e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e18:	4691      	mov	r9, r2
 8008e1a:	690a      	ldr	r2, [r1, #16]
 8008e1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	bfb8      	it	lt
 8008e24:	460b      	movlt	r3, r1
 8008e26:	460c      	mov	r4, r1
 8008e28:	bfbc      	itt	lt
 8008e2a:	464c      	movlt	r4, r9
 8008e2c:	4699      	movlt	r9, r3
 8008e2e:	6927      	ldr	r7, [r4, #16]
 8008e30:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008e34:	68a3      	ldr	r3, [r4, #8]
 8008e36:	6861      	ldr	r1, [r4, #4]
 8008e38:	eb07 060a 	add.w	r6, r7, sl
 8008e3c:	42b3      	cmp	r3, r6
 8008e3e:	b085      	sub	sp, #20
 8008e40:	bfb8      	it	lt
 8008e42:	3101      	addlt	r1, #1
 8008e44:	f7ff fed8 	bl	8008bf8 <_Balloc>
 8008e48:	b930      	cbnz	r0, 8008e58 <__multiply+0x44>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	4b44      	ldr	r3, [pc, #272]	; (8008f60 <__multiply+0x14c>)
 8008e4e:	4845      	ldr	r0, [pc, #276]	; (8008f64 <__multiply+0x150>)
 8008e50:	f240 115d 	movw	r1, #349	; 0x15d
 8008e54:	f000 ff26 	bl	8009ca4 <__assert_func>
 8008e58:	f100 0514 	add.w	r5, r0, #20
 8008e5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008e60:	462b      	mov	r3, r5
 8008e62:	2200      	movs	r2, #0
 8008e64:	4543      	cmp	r3, r8
 8008e66:	d321      	bcc.n	8008eac <__multiply+0x98>
 8008e68:	f104 0314 	add.w	r3, r4, #20
 8008e6c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008e70:	f109 0314 	add.w	r3, r9, #20
 8008e74:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008e78:	9202      	str	r2, [sp, #8]
 8008e7a:	1b3a      	subs	r2, r7, r4
 8008e7c:	3a15      	subs	r2, #21
 8008e7e:	f022 0203 	bic.w	r2, r2, #3
 8008e82:	3204      	adds	r2, #4
 8008e84:	f104 0115 	add.w	r1, r4, #21
 8008e88:	428f      	cmp	r7, r1
 8008e8a:	bf38      	it	cc
 8008e8c:	2204      	movcc	r2, #4
 8008e8e:	9201      	str	r2, [sp, #4]
 8008e90:	9a02      	ldr	r2, [sp, #8]
 8008e92:	9303      	str	r3, [sp, #12]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d80c      	bhi.n	8008eb2 <__multiply+0x9e>
 8008e98:	2e00      	cmp	r6, #0
 8008e9a:	dd03      	ble.n	8008ea4 <__multiply+0x90>
 8008e9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d05a      	beq.n	8008f5a <__multiply+0x146>
 8008ea4:	6106      	str	r6, [r0, #16]
 8008ea6:	b005      	add	sp, #20
 8008ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eac:	f843 2b04 	str.w	r2, [r3], #4
 8008eb0:	e7d8      	b.n	8008e64 <__multiply+0x50>
 8008eb2:	f8b3 a000 	ldrh.w	sl, [r3]
 8008eb6:	f1ba 0f00 	cmp.w	sl, #0
 8008eba:	d024      	beq.n	8008f06 <__multiply+0xf2>
 8008ebc:	f104 0e14 	add.w	lr, r4, #20
 8008ec0:	46a9      	mov	r9, r5
 8008ec2:	f04f 0c00 	mov.w	ip, #0
 8008ec6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008eca:	f8d9 1000 	ldr.w	r1, [r9]
 8008ece:	fa1f fb82 	uxth.w	fp, r2
 8008ed2:	b289      	uxth	r1, r1
 8008ed4:	fb0a 110b 	mla	r1, sl, fp, r1
 8008ed8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008edc:	f8d9 2000 	ldr.w	r2, [r9]
 8008ee0:	4461      	add	r1, ip
 8008ee2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008ee6:	fb0a c20b 	mla	r2, sl, fp, ip
 8008eea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008eee:	b289      	uxth	r1, r1
 8008ef0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008ef4:	4577      	cmp	r7, lr
 8008ef6:	f849 1b04 	str.w	r1, [r9], #4
 8008efa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008efe:	d8e2      	bhi.n	8008ec6 <__multiply+0xb2>
 8008f00:	9a01      	ldr	r2, [sp, #4]
 8008f02:	f845 c002 	str.w	ip, [r5, r2]
 8008f06:	9a03      	ldr	r2, [sp, #12]
 8008f08:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008f0c:	3304      	adds	r3, #4
 8008f0e:	f1b9 0f00 	cmp.w	r9, #0
 8008f12:	d020      	beq.n	8008f56 <__multiply+0x142>
 8008f14:	6829      	ldr	r1, [r5, #0]
 8008f16:	f104 0c14 	add.w	ip, r4, #20
 8008f1a:	46ae      	mov	lr, r5
 8008f1c:	f04f 0a00 	mov.w	sl, #0
 8008f20:	f8bc b000 	ldrh.w	fp, [ip]
 8008f24:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008f28:	fb09 220b 	mla	r2, r9, fp, r2
 8008f2c:	4492      	add	sl, r2
 8008f2e:	b289      	uxth	r1, r1
 8008f30:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008f34:	f84e 1b04 	str.w	r1, [lr], #4
 8008f38:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008f3c:	f8be 1000 	ldrh.w	r1, [lr]
 8008f40:	0c12      	lsrs	r2, r2, #16
 8008f42:	fb09 1102 	mla	r1, r9, r2, r1
 8008f46:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008f4a:	4567      	cmp	r7, ip
 8008f4c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008f50:	d8e6      	bhi.n	8008f20 <__multiply+0x10c>
 8008f52:	9a01      	ldr	r2, [sp, #4]
 8008f54:	50a9      	str	r1, [r5, r2]
 8008f56:	3504      	adds	r5, #4
 8008f58:	e79a      	b.n	8008e90 <__multiply+0x7c>
 8008f5a:	3e01      	subs	r6, #1
 8008f5c:	e79c      	b.n	8008e98 <__multiply+0x84>
 8008f5e:	bf00      	nop
 8008f60:	0800d2eb 	.word	0x0800d2eb
 8008f64:	0800d35c 	.word	0x0800d35c

08008f68 <__pow5mult>:
 8008f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f6c:	4615      	mov	r5, r2
 8008f6e:	f012 0203 	ands.w	r2, r2, #3
 8008f72:	4606      	mov	r6, r0
 8008f74:	460f      	mov	r7, r1
 8008f76:	d007      	beq.n	8008f88 <__pow5mult+0x20>
 8008f78:	4c25      	ldr	r4, [pc, #148]	; (8009010 <__pow5mult+0xa8>)
 8008f7a:	3a01      	subs	r2, #1
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f82:	f7ff fe9b 	bl	8008cbc <__multadd>
 8008f86:	4607      	mov	r7, r0
 8008f88:	10ad      	asrs	r5, r5, #2
 8008f8a:	d03d      	beq.n	8009008 <__pow5mult+0xa0>
 8008f8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008f8e:	b97c      	cbnz	r4, 8008fb0 <__pow5mult+0x48>
 8008f90:	2010      	movs	r0, #16
 8008f92:	f7ff fe29 	bl	8008be8 <malloc>
 8008f96:	4602      	mov	r2, r0
 8008f98:	6270      	str	r0, [r6, #36]	; 0x24
 8008f9a:	b928      	cbnz	r0, 8008fa8 <__pow5mult+0x40>
 8008f9c:	4b1d      	ldr	r3, [pc, #116]	; (8009014 <__pow5mult+0xac>)
 8008f9e:	481e      	ldr	r0, [pc, #120]	; (8009018 <__pow5mult+0xb0>)
 8008fa0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008fa4:	f000 fe7e 	bl	8009ca4 <__assert_func>
 8008fa8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fac:	6004      	str	r4, [r0, #0]
 8008fae:	60c4      	str	r4, [r0, #12]
 8008fb0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008fb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008fb8:	b94c      	cbnz	r4, 8008fce <__pow5mult+0x66>
 8008fba:	f240 2171 	movw	r1, #625	; 0x271
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	f7ff ff12 	bl	8008de8 <__i2b>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008fca:	4604      	mov	r4, r0
 8008fcc:	6003      	str	r3, [r0, #0]
 8008fce:	f04f 0900 	mov.w	r9, #0
 8008fd2:	07eb      	lsls	r3, r5, #31
 8008fd4:	d50a      	bpl.n	8008fec <__pow5mult+0x84>
 8008fd6:	4639      	mov	r1, r7
 8008fd8:	4622      	mov	r2, r4
 8008fda:	4630      	mov	r0, r6
 8008fdc:	f7ff ff1a 	bl	8008e14 <__multiply>
 8008fe0:	4639      	mov	r1, r7
 8008fe2:	4680      	mov	r8, r0
 8008fe4:	4630      	mov	r0, r6
 8008fe6:	f7ff fe47 	bl	8008c78 <_Bfree>
 8008fea:	4647      	mov	r7, r8
 8008fec:	106d      	asrs	r5, r5, #1
 8008fee:	d00b      	beq.n	8009008 <__pow5mult+0xa0>
 8008ff0:	6820      	ldr	r0, [r4, #0]
 8008ff2:	b938      	cbnz	r0, 8009004 <__pow5mult+0x9c>
 8008ff4:	4622      	mov	r2, r4
 8008ff6:	4621      	mov	r1, r4
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	f7ff ff0b 	bl	8008e14 <__multiply>
 8008ffe:	6020      	str	r0, [r4, #0]
 8009000:	f8c0 9000 	str.w	r9, [r0]
 8009004:	4604      	mov	r4, r0
 8009006:	e7e4      	b.n	8008fd2 <__pow5mult+0x6a>
 8009008:	4638      	mov	r0, r7
 800900a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800900e:	bf00      	nop
 8009010:	0800d4a8 	.word	0x0800d4a8
 8009014:	0800d279 	.word	0x0800d279
 8009018:	0800d35c 	.word	0x0800d35c

0800901c <__lshift>:
 800901c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009020:	460c      	mov	r4, r1
 8009022:	6849      	ldr	r1, [r1, #4]
 8009024:	6923      	ldr	r3, [r4, #16]
 8009026:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800902a:	68a3      	ldr	r3, [r4, #8]
 800902c:	4607      	mov	r7, r0
 800902e:	4691      	mov	r9, r2
 8009030:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009034:	f108 0601 	add.w	r6, r8, #1
 8009038:	42b3      	cmp	r3, r6
 800903a:	db0b      	blt.n	8009054 <__lshift+0x38>
 800903c:	4638      	mov	r0, r7
 800903e:	f7ff fddb 	bl	8008bf8 <_Balloc>
 8009042:	4605      	mov	r5, r0
 8009044:	b948      	cbnz	r0, 800905a <__lshift+0x3e>
 8009046:	4602      	mov	r2, r0
 8009048:	4b2a      	ldr	r3, [pc, #168]	; (80090f4 <__lshift+0xd8>)
 800904a:	482b      	ldr	r0, [pc, #172]	; (80090f8 <__lshift+0xdc>)
 800904c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009050:	f000 fe28 	bl	8009ca4 <__assert_func>
 8009054:	3101      	adds	r1, #1
 8009056:	005b      	lsls	r3, r3, #1
 8009058:	e7ee      	b.n	8009038 <__lshift+0x1c>
 800905a:	2300      	movs	r3, #0
 800905c:	f100 0114 	add.w	r1, r0, #20
 8009060:	f100 0210 	add.w	r2, r0, #16
 8009064:	4618      	mov	r0, r3
 8009066:	4553      	cmp	r3, sl
 8009068:	db37      	blt.n	80090da <__lshift+0xbe>
 800906a:	6920      	ldr	r0, [r4, #16]
 800906c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009070:	f104 0314 	add.w	r3, r4, #20
 8009074:	f019 091f 	ands.w	r9, r9, #31
 8009078:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800907c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009080:	d02f      	beq.n	80090e2 <__lshift+0xc6>
 8009082:	f1c9 0e20 	rsb	lr, r9, #32
 8009086:	468a      	mov	sl, r1
 8009088:	f04f 0c00 	mov.w	ip, #0
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	fa02 f209 	lsl.w	r2, r2, r9
 8009092:	ea42 020c 	orr.w	r2, r2, ip
 8009096:	f84a 2b04 	str.w	r2, [sl], #4
 800909a:	f853 2b04 	ldr.w	r2, [r3], #4
 800909e:	4298      	cmp	r0, r3
 80090a0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80090a4:	d8f2      	bhi.n	800908c <__lshift+0x70>
 80090a6:	1b03      	subs	r3, r0, r4
 80090a8:	3b15      	subs	r3, #21
 80090aa:	f023 0303 	bic.w	r3, r3, #3
 80090ae:	3304      	adds	r3, #4
 80090b0:	f104 0215 	add.w	r2, r4, #21
 80090b4:	4290      	cmp	r0, r2
 80090b6:	bf38      	it	cc
 80090b8:	2304      	movcc	r3, #4
 80090ba:	f841 c003 	str.w	ip, [r1, r3]
 80090be:	f1bc 0f00 	cmp.w	ip, #0
 80090c2:	d001      	beq.n	80090c8 <__lshift+0xac>
 80090c4:	f108 0602 	add.w	r6, r8, #2
 80090c8:	3e01      	subs	r6, #1
 80090ca:	4638      	mov	r0, r7
 80090cc:	612e      	str	r6, [r5, #16]
 80090ce:	4621      	mov	r1, r4
 80090d0:	f7ff fdd2 	bl	8008c78 <_Bfree>
 80090d4:	4628      	mov	r0, r5
 80090d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090da:	f842 0f04 	str.w	r0, [r2, #4]!
 80090de:	3301      	adds	r3, #1
 80090e0:	e7c1      	b.n	8009066 <__lshift+0x4a>
 80090e2:	3904      	subs	r1, #4
 80090e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80090e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80090ec:	4298      	cmp	r0, r3
 80090ee:	d8f9      	bhi.n	80090e4 <__lshift+0xc8>
 80090f0:	e7ea      	b.n	80090c8 <__lshift+0xac>
 80090f2:	bf00      	nop
 80090f4:	0800d2eb 	.word	0x0800d2eb
 80090f8:	0800d35c 	.word	0x0800d35c

080090fc <__mcmp>:
 80090fc:	b530      	push	{r4, r5, lr}
 80090fe:	6902      	ldr	r2, [r0, #16]
 8009100:	690c      	ldr	r4, [r1, #16]
 8009102:	1b12      	subs	r2, r2, r4
 8009104:	d10e      	bne.n	8009124 <__mcmp+0x28>
 8009106:	f100 0314 	add.w	r3, r0, #20
 800910a:	3114      	adds	r1, #20
 800910c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009110:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009114:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009118:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800911c:	42a5      	cmp	r5, r4
 800911e:	d003      	beq.n	8009128 <__mcmp+0x2c>
 8009120:	d305      	bcc.n	800912e <__mcmp+0x32>
 8009122:	2201      	movs	r2, #1
 8009124:	4610      	mov	r0, r2
 8009126:	bd30      	pop	{r4, r5, pc}
 8009128:	4283      	cmp	r3, r0
 800912a:	d3f3      	bcc.n	8009114 <__mcmp+0x18>
 800912c:	e7fa      	b.n	8009124 <__mcmp+0x28>
 800912e:	f04f 32ff 	mov.w	r2, #4294967295
 8009132:	e7f7      	b.n	8009124 <__mcmp+0x28>

08009134 <__mdiff>:
 8009134:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009138:	460c      	mov	r4, r1
 800913a:	4606      	mov	r6, r0
 800913c:	4611      	mov	r1, r2
 800913e:	4620      	mov	r0, r4
 8009140:	4690      	mov	r8, r2
 8009142:	f7ff ffdb 	bl	80090fc <__mcmp>
 8009146:	1e05      	subs	r5, r0, #0
 8009148:	d110      	bne.n	800916c <__mdiff+0x38>
 800914a:	4629      	mov	r1, r5
 800914c:	4630      	mov	r0, r6
 800914e:	f7ff fd53 	bl	8008bf8 <_Balloc>
 8009152:	b930      	cbnz	r0, 8009162 <__mdiff+0x2e>
 8009154:	4b3a      	ldr	r3, [pc, #232]	; (8009240 <__mdiff+0x10c>)
 8009156:	4602      	mov	r2, r0
 8009158:	f240 2132 	movw	r1, #562	; 0x232
 800915c:	4839      	ldr	r0, [pc, #228]	; (8009244 <__mdiff+0x110>)
 800915e:	f000 fda1 	bl	8009ca4 <__assert_func>
 8009162:	2301      	movs	r3, #1
 8009164:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009168:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800916c:	bfa4      	itt	ge
 800916e:	4643      	movge	r3, r8
 8009170:	46a0      	movge	r8, r4
 8009172:	4630      	mov	r0, r6
 8009174:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009178:	bfa6      	itte	ge
 800917a:	461c      	movge	r4, r3
 800917c:	2500      	movge	r5, #0
 800917e:	2501      	movlt	r5, #1
 8009180:	f7ff fd3a 	bl	8008bf8 <_Balloc>
 8009184:	b920      	cbnz	r0, 8009190 <__mdiff+0x5c>
 8009186:	4b2e      	ldr	r3, [pc, #184]	; (8009240 <__mdiff+0x10c>)
 8009188:	4602      	mov	r2, r0
 800918a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800918e:	e7e5      	b.n	800915c <__mdiff+0x28>
 8009190:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009194:	6926      	ldr	r6, [r4, #16]
 8009196:	60c5      	str	r5, [r0, #12]
 8009198:	f104 0914 	add.w	r9, r4, #20
 800919c:	f108 0514 	add.w	r5, r8, #20
 80091a0:	f100 0e14 	add.w	lr, r0, #20
 80091a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80091a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80091ac:	f108 0210 	add.w	r2, r8, #16
 80091b0:	46f2      	mov	sl, lr
 80091b2:	2100      	movs	r1, #0
 80091b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80091b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80091bc:	fa1f f883 	uxth.w	r8, r3
 80091c0:	fa11 f18b 	uxtah	r1, r1, fp
 80091c4:	0c1b      	lsrs	r3, r3, #16
 80091c6:	eba1 0808 	sub.w	r8, r1, r8
 80091ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80091ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80091d2:	fa1f f888 	uxth.w	r8, r8
 80091d6:	1419      	asrs	r1, r3, #16
 80091d8:	454e      	cmp	r6, r9
 80091da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80091de:	f84a 3b04 	str.w	r3, [sl], #4
 80091e2:	d8e7      	bhi.n	80091b4 <__mdiff+0x80>
 80091e4:	1b33      	subs	r3, r6, r4
 80091e6:	3b15      	subs	r3, #21
 80091e8:	f023 0303 	bic.w	r3, r3, #3
 80091ec:	3304      	adds	r3, #4
 80091ee:	3415      	adds	r4, #21
 80091f0:	42a6      	cmp	r6, r4
 80091f2:	bf38      	it	cc
 80091f4:	2304      	movcc	r3, #4
 80091f6:	441d      	add	r5, r3
 80091f8:	4473      	add	r3, lr
 80091fa:	469e      	mov	lr, r3
 80091fc:	462e      	mov	r6, r5
 80091fe:	4566      	cmp	r6, ip
 8009200:	d30e      	bcc.n	8009220 <__mdiff+0xec>
 8009202:	f10c 0203 	add.w	r2, ip, #3
 8009206:	1b52      	subs	r2, r2, r5
 8009208:	f022 0203 	bic.w	r2, r2, #3
 800920c:	3d03      	subs	r5, #3
 800920e:	45ac      	cmp	ip, r5
 8009210:	bf38      	it	cc
 8009212:	2200      	movcc	r2, #0
 8009214:	441a      	add	r2, r3
 8009216:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800921a:	b17b      	cbz	r3, 800923c <__mdiff+0x108>
 800921c:	6107      	str	r7, [r0, #16]
 800921e:	e7a3      	b.n	8009168 <__mdiff+0x34>
 8009220:	f856 8b04 	ldr.w	r8, [r6], #4
 8009224:	fa11 f288 	uxtah	r2, r1, r8
 8009228:	1414      	asrs	r4, r2, #16
 800922a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800922e:	b292      	uxth	r2, r2
 8009230:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009234:	f84e 2b04 	str.w	r2, [lr], #4
 8009238:	1421      	asrs	r1, r4, #16
 800923a:	e7e0      	b.n	80091fe <__mdiff+0xca>
 800923c:	3f01      	subs	r7, #1
 800923e:	e7ea      	b.n	8009216 <__mdiff+0xe2>
 8009240:	0800d2eb 	.word	0x0800d2eb
 8009244:	0800d35c 	.word	0x0800d35c

08009248 <__d2b>:
 8009248:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800924c:	4689      	mov	r9, r1
 800924e:	2101      	movs	r1, #1
 8009250:	ec57 6b10 	vmov	r6, r7, d0
 8009254:	4690      	mov	r8, r2
 8009256:	f7ff fccf 	bl	8008bf8 <_Balloc>
 800925a:	4604      	mov	r4, r0
 800925c:	b930      	cbnz	r0, 800926c <__d2b+0x24>
 800925e:	4602      	mov	r2, r0
 8009260:	4b25      	ldr	r3, [pc, #148]	; (80092f8 <__d2b+0xb0>)
 8009262:	4826      	ldr	r0, [pc, #152]	; (80092fc <__d2b+0xb4>)
 8009264:	f240 310a 	movw	r1, #778	; 0x30a
 8009268:	f000 fd1c 	bl	8009ca4 <__assert_func>
 800926c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009270:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009274:	bb35      	cbnz	r5, 80092c4 <__d2b+0x7c>
 8009276:	2e00      	cmp	r6, #0
 8009278:	9301      	str	r3, [sp, #4]
 800927a:	d028      	beq.n	80092ce <__d2b+0x86>
 800927c:	4668      	mov	r0, sp
 800927e:	9600      	str	r6, [sp, #0]
 8009280:	f7ff fd82 	bl	8008d88 <__lo0bits>
 8009284:	9900      	ldr	r1, [sp, #0]
 8009286:	b300      	cbz	r0, 80092ca <__d2b+0x82>
 8009288:	9a01      	ldr	r2, [sp, #4]
 800928a:	f1c0 0320 	rsb	r3, r0, #32
 800928e:	fa02 f303 	lsl.w	r3, r2, r3
 8009292:	430b      	orrs	r3, r1
 8009294:	40c2      	lsrs	r2, r0
 8009296:	6163      	str	r3, [r4, #20]
 8009298:	9201      	str	r2, [sp, #4]
 800929a:	9b01      	ldr	r3, [sp, #4]
 800929c:	61a3      	str	r3, [r4, #24]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	bf14      	ite	ne
 80092a2:	2202      	movne	r2, #2
 80092a4:	2201      	moveq	r2, #1
 80092a6:	6122      	str	r2, [r4, #16]
 80092a8:	b1d5      	cbz	r5, 80092e0 <__d2b+0x98>
 80092aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80092ae:	4405      	add	r5, r0
 80092b0:	f8c9 5000 	str.w	r5, [r9]
 80092b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80092b8:	f8c8 0000 	str.w	r0, [r8]
 80092bc:	4620      	mov	r0, r4
 80092be:	b003      	add	sp, #12
 80092c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092c8:	e7d5      	b.n	8009276 <__d2b+0x2e>
 80092ca:	6161      	str	r1, [r4, #20]
 80092cc:	e7e5      	b.n	800929a <__d2b+0x52>
 80092ce:	a801      	add	r0, sp, #4
 80092d0:	f7ff fd5a 	bl	8008d88 <__lo0bits>
 80092d4:	9b01      	ldr	r3, [sp, #4]
 80092d6:	6163      	str	r3, [r4, #20]
 80092d8:	2201      	movs	r2, #1
 80092da:	6122      	str	r2, [r4, #16]
 80092dc:	3020      	adds	r0, #32
 80092de:	e7e3      	b.n	80092a8 <__d2b+0x60>
 80092e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80092e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80092e8:	f8c9 0000 	str.w	r0, [r9]
 80092ec:	6918      	ldr	r0, [r3, #16]
 80092ee:	f7ff fd2b 	bl	8008d48 <__hi0bits>
 80092f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80092f6:	e7df      	b.n	80092b8 <__d2b+0x70>
 80092f8:	0800d2eb 	.word	0x0800d2eb
 80092fc:	0800d35c 	.word	0x0800d35c

08009300 <_calloc_r>:
 8009300:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009302:	fba1 2402 	umull	r2, r4, r1, r2
 8009306:	b94c      	cbnz	r4, 800931c <_calloc_r+0x1c>
 8009308:	4611      	mov	r1, r2
 800930a:	9201      	str	r2, [sp, #4]
 800930c:	f000 f87a 	bl	8009404 <_malloc_r>
 8009310:	9a01      	ldr	r2, [sp, #4]
 8009312:	4605      	mov	r5, r0
 8009314:	b930      	cbnz	r0, 8009324 <_calloc_r+0x24>
 8009316:	4628      	mov	r0, r5
 8009318:	b003      	add	sp, #12
 800931a:	bd30      	pop	{r4, r5, pc}
 800931c:	220c      	movs	r2, #12
 800931e:	6002      	str	r2, [r0, #0]
 8009320:	2500      	movs	r5, #0
 8009322:	e7f8      	b.n	8009316 <_calloc_r+0x16>
 8009324:	4621      	mov	r1, r4
 8009326:	f7fe f83b 	bl	80073a0 <memset>
 800932a:	e7f4      	b.n	8009316 <_calloc_r+0x16>

0800932c <_free_r>:
 800932c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800932e:	2900      	cmp	r1, #0
 8009330:	d044      	beq.n	80093bc <_free_r+0x90>
 8009332:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009336:	9001      	str	r0, [sp, #4]
 8009338:	2b00      	cmp	r3, #0
 800933a:	f1a1 0404 	sub.w	r4, r1, #4
 800933e:	bfb8      	it	lt
 8009340:	18e4      	addlt	r4, r4, r3
 8009342:	f000 fe3b 	bl	8009fbc <__malloc_lock>
 8009346:	4a1e      	ldr	r2, [pc, #120]	; (80093c0 <_free_r+0x94>)
 8009348:	9801      	ldr	r0, [sp, #4]
 800934a:	6813      	ldr	r3, [r2, #0]
 800934c:	b933      	cbnz	r3, 800935c <_free_r+0x30>
 800934e:	6063      	str	r3, [r4, #4]
 8009350:	6014      	str	r4, [r2, #0]
 8009352:	b003      	add	sp, #12
 8009354:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009358:	f000 be36 	b.w	8009fc8 <__malloc_unlock>
 800935c:	42a3      	cmp	r3, r4
 800935e:	d908      	bls.n	8009372 <_free_r+0x46>
 8009360:	6825      	ldr	r5, [r4, #0]
 8009362:	1961      	adds	r1, r4, r5
 8009364:	428b      	cmp	r3, r1
 8009366:	bf01      	itttt	eq
 8009368:	6819      	ldreq	r1, [r3, #0]
 800936a:	685b      	ldreq	r3, [r3, #4]
 800936c:	1949      	addeq	r1, r1, r5
 800936e:	6021      	streq	r1, [r4, #0]
 8009370:	e7ed      	b.n	800934e <_free_r+0x22>
 8009372:	461a      	mov	r2, r3
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	b10b      	cbz	r3, 800937c <_free_r+0x50>
 8009378:	42a3      	cmp	r3, r4
 800937a:	d9fa      	bls.n	8009372 <_free_r+0x46>
 800937c:	6811      	ldr	r1, [r2, #0]
 800937e:	1855      	adds	r5, r2, r1
 8009380:	42a5      	cmp	r5, r4
 8009382:	d10b      	bne.n	800939c <_free_r+0x70>
 8009384:	6824      	ldr	r4, [r4, #0]
 8009386:	4421      	add	r1, r4
 8009388:	1854      	adds	r4, r2, r1
 800938a:	42a3      	cmp	r3, r4
 800938c:	6011      	str	r1, [r2, #0]
 800938e:	d1e0      	bne.n	8009352 <_free_r+0x26>
 8009390:	681c      	ldr	r4, [r3, #0]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	6053      	str	r3, [r2, #4]
 8009396:	4421      	add	r1, r4
 8009398:	6011      	str	r1, [r2, #0]
 800939a:	e7da      	b.n	8009352 <_free_r+0x26>
 800939c:	d902      	bls.n	80093a4 <_free_r+0x78>
 800939e:	230c      	movs	r3, #12
 80093a0:	6003      	str	r3, [r0, #0]
 80093a2:	e7d6      	b.n	8009352 <_free_r+0x26>
 80093a4:	6825      	ldr	r5, [r4, #0]
 80093a6:	1961      	adds	r1, r4, r5
 80093a8:	428b      	cmp	r3, r1
 80093aa:	bf04      	itt	eq
 80093ac:	6819      	ldreq	r1, [r3, #0]
 80093ae:	685b      	ldreq	r3, [r3, #4]
 80093b0:	6063      	str	r3, [r4, #4]
 80093b2:	bf04      	itt	eq
 80093b4:	1949      	addeq	r1, r1, r5
 80093b6:	6021      	streq	r1, [r4, #0]
 80093b8:	6054      	str	r4, [r2, #4]
 80093ba:	e7ca      	b.n	8009352 <_free_r+0x26>
 80093bc:	b003      	add	sp, #12
 80093be:	bd30      	pop	{r4, r5, pc}
 80093c0:	20000fa8 	.word	0x20000fa8

080093c4 <sbrk_aligned>:
 80093c4:	b570      	push	{r4, r5, r6, lr}
 80093c6:	4e0e      	ldr	r6, [pc, #56]	; (8009400 <sbrk_aligned+0x3c>)
 80093c8:	460c      	mov	r4, r1
 80093ca:	6831      	ldr	r1, [r6, #0]
 80093cc:	4605      	mov	r5, r0
 80093ce:	b911      	cbnz	r1, 80093d6 <sbrk_aligned+0x12>
 80093d0:	f000 fb42 	bl	8009a58 <_sbrk_r>
 80093d4:	6030      	str	r0, [r6, #0]
 80093d6:	4621      	mov	r1, r4
 80093d8:	4628      	mov	r0, r5
 80093da:	f000 fb3d 	bl	8009a58 <_sbrk_r>
 80093de:	1c43      	adds	r3, r0, #1
 80093e0:	d00a      	beq.n	80093f8 <sbrk_aligned+0x34>
 80093e2:	1cc4      	adds	r4, r0, #3
 80093e4:	f024 0403 	bic.w	r4, r4, #3
 80093e8:	42a0      	cmp	r0, r4
 80093ea:	d007      	beq.n	80093fc <sbrk_aligned+0x38>
 80093ec:	1a21      	subs	r1, r4, r0
 80093ee:	4628      	mov	r0, r5
 80093f0:	f000 fb32 	bl	8009a58 <_sbrk_r>
 80093f4:	3001      	adds	r0, #1
 80093f6:	d101      	bne.n	80093fc <sbrk_aligned+0x38>
 80093f8:	f04f 34ff 	mov.w	r4, #4294967295
 80093fc:	4620      	mov	r0, r4
 80093fe:	bd70      	pop	{r4, r5, r6, pc}
 8009400:	20000fac 	.word	0x20000fac

08009404 <_malloc_r>:
 8009404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009408:	1ccd      	adds	r5, r1, #3
 800940a:	f025 0503 	bic.w	r5, r5, #3
 800940e:	3508      	adds	r5, #8
 8009410:	2d0c      	cmp	r5, #12
 8009412:	bf38      	it	cc
 8009414:	250c      	movcc	r5, #12
 8009416:	2d00      	cmp	r5, #0
 8009418:	4607      	mov	r7, r0
 800941a:	db01      	blt.n	8009420 <_malloc_r+0x1c>
 800941c:	42a9      	cmp	r1, r5
 800941e:	d905      	bls.n	800942c <_malloc_r+0x28>
 8009420:	230c      	movs	r3, #12
 8009422:	603b      	str	r3, [r7, #0]
 8009424:	2600      	movs	r6, #0
 8009426:	4630      	mov	r0, r6
 8009428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800942c:	4e2e      	ldr	r6, [pc, #184]	; (80094e8 <_malloc_r+0xe4>)
 800942e:	f000 fdc5 	bl	8009fbc <__malloc_lock>
 8009432:	6833      	ldr	r3, [r6, #0]
 8009434:	461c      	mov	r4, r3
 8009436:	bb34      	cbnz	r4, 8009486 <_malloc_r+0x82>
 8009438:	4629      	mov	r1, r5
 800943a:	4638      	mov	r0, r7
 800943c:	f7ff ffc2 	bl	80093c4 <sbrk_aligned>
 8009440:	1c43      	adds	r3, r0, #1
 8009442:	4604      	mov	r4, r0
 8009444:	d14d      	bne.n	80094e2 <_malloc_r+0xde>
 8009446:	6834      	ldr	r4, [r6, #0]
 8009448:	4626      	mov	r6, r4
 800944a:	2e00      	cmp	r6, #0
 800944c:	d140      	bne.n	80094d0 <_malloc_r+0xcc>
 800944e:	6823      	ldr	r3, [r4, #0]
 8009450:	4631      	mov	r1, r6
 8009452:	4638      	mov	r0, r7
 8009454:	eb04 0803 	add.w	r8, r4, r3
 8009458:	f000 fafe 	bl	8009a58 <_sbrk_r>
 800945c:	4580      	cmp	r8, r0
 800945e:	d13a      	bne.n	80094d6 <_malloc_r+0xd2>
 8009460:	6821      	ldr	r1, [r4, #0]
 8009462:	3503      	adds	r5, #3
 8009464:	1a6d      	subs	r5, r5, r1
 8009466:	f025 0503 	bic.w	r5, r5, #3
 800946a:	3508      	adds	r5, #8
 800946c:	2d0c      	cmp	r5, #12
 800946e:	bf38      	it	cc
 8009470:	250c      	movcc	r5, #12
 8009472:	4629      	mov	r1, r5
 8009474:	4638      	mov	r0, r7
 8009476:	f7ff ffa5 	bl	80093c4 <sbrk_aligned>
 800947a:	3001      	adds	r0, #1
 800947c:	d02b      	beq.n	80094d6 <_malloc_r+0xd2>
 800947e:	6823      	ldr	r3, [r4, #0]
 8009480:	442b      	add	r3, r5
 8009482:	6023      	str	r3, [r4, #0]
 8009484:	e00e      	b.n	80094a4 <_malloc_r+0xa0>
 8009486:	6822      	ldr	r2, [r4, #0]
 8009488:	1b52      	subs	r2, r2, r5
 800948a:	d41e      	bmi.n	80094ca <_malloc_r+0xc6>
 800948c:	2a0b      	cmp	r2, #11
 800948e:	d916      	bls.n	80094be <_malloc_r+0xba>
 8009490:	1961      	adds	r1, r4, r5
 8009492:	42a3      	cmp	r3, r4
 8009494:	6025      	str	r5, [r4, #0]
 8009496:	bf18      	it	ne
 8009498:	6059      	strne	r1, [r3, #4]
 800949a:	6863      	ldr	r3, [r4, #4]
 800949c:	bf08      	it	eq
 800949e:	6031      	streq	r1, [r6, #0]
 80094a0:	5162      	str	r2, [r4, r5]
 80094a2:	604b      	str	r3, [r1, #4]
 80094a4:	4638      	mov	r0, r7
 80094a6:	f104 060b 	add.w	r6, r4, #11
 80094aa:	f000 fd8d 	bl	8009fc8 <__malloc_unlock>
 80094ae:	f026 0607 	bic.w	r6, r6, #7
 80094b2:	1d23      	adds	r3, r4, #4
 80094b4:	1af2      	subs	r2, r6, r3
 80094b6:	d0b6      	beq.n	8009426 <_malloc_r+0x22>
 80094b8:	1b9b      	subs	r3, r3, r6
 80094ba:	50a3      	str	r3, [r4, r2]
 80094bc:	e7b3      	b.n	8009426 <_malloc_r+0x22>
 80094be:	6862      	ldr	r2, [r4, #4]
 80094c0:	42a3      	cmp	r3, r4
 80094c2:	bf0c      	ite	eq
 80094c4:	6032      	streq	r2, [r6, #0]
 80094c6:	605a      	strne	r2, [r3, #4]
 80094c8:	e7ec      	b.n	80094a4 <_malloc_r+0xa0>
 80094ca:	4623      	mov	r3, r4
 80094cc:	6864      	ldr	r4, [r4, #4]
 80094ce:	e7b2      	b.n	8009436 <_malloc_r+0x32>
 80094d0:	4634      	mov	r4, r6
 80094d2:	6876      	ldr	r6, [r6, #4]
 80094d4:	e7b9      	b.n	800944a <_malloc_r+0x46>
 80094d6:	230c      	movs	r3, #12
 80094d8:	603b      	str	r3, [r7, #0]
 80094da:	4638      	mov	r0, r7
 80094dc:	f000 fd74 	bl	8009fc8 <__malloc_unlock>
 80094e0:	e7a1      	b.n	8009426 <_malloc_r+0x22>
 80094e2:	6025      	str	r5, [r4, #0]
 80094e4:	e7de      	b.n	80094a4 <_malloc_r+0xa0>
 80094e6:	bf00      	nop
 80094e8:	20000fa8 	.word	0x20000fa8

080094ec <__ssputs_r>:
 80094ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094f0:	688e      	ldr	r6, [r1, #8]
 80094f2:	429e      	cmp	r6, r3
 80094f4:	4682      	mov	sl, r0
 80094f6:	460c      	mov	r4, r1
 80094f8:	4690      	mov	r8, r2
 80094fa:	461f      	mov	r7, r3
 80094fc:	d838      	bhi.n	8009570 <__ssputs_r+0x84>
 80094fe:	898a      	ldrh	r2, [r1, #12]
 8009500:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009504:	d032      	beq.n	800956c <__ssputs_r+0x80>
 8009506:	6825      	ldr	r5, [r4, #0]
 8009508:	6909      	ldr	r1, [r1, #16]
 800950a:	eba5 0901 	sub.w	r9, r5, r1
 800950e:	6965      	ldr	r5, [r4, #20]
 8009510:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009514:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009518:	3301      	adds	r3, #1
 800951a:	444b      	add	r3, r9
 800951c:	106d      	asrs	r5, r5, #1
 800951e:	429d      	cmp	r5, r3
 8009520:	bf38      	it	cc
 8009522:	461d      	movcc	r5, r3
 8009524:	0553      	lsls	r3, r2, #21
 8009526:	d531      	bpl.n	800958c <__ssputs_r+0xa0>
 8009528:	4629      	mov	r1, r5
 800952a:	f7ff ff6b 	bl	8009404 <_malloc_r>
 800952e:	4606      	mov	r6, r0
 8009530:	b950      	cbnz	r0, 8009548 <__ssputs_r+0x5c>
 8009532:	230c      	movs	r3, #12
 8009534:	f8ca 3000 	str.w	r3, [sl]
 8009538:	89a3      	ldrh	r3, [r4, #12]
 800953a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800953e:	81a3      	strh	r3, [r4, #12]
 8009540:	f04f 30ff 	mov.w	r0, #4294967295
 8009544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009548:	6921      	ldr	r1, [r4, #16]
 800954a:	464a      	mov	r2, r9
 800954c:	f7fd ff00 	bl	8007350 <memcpy>
 8009550:	89a3      	ldrh	r3, [r4, #12]
 8009552:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800955a:	81a3      	strh	r3, [r4, #12]
 800955c:	6126      	str	r6, [r4, #16]
 800955e:	6165      	str	r5, [r4, #20]
 8009560:	444e      	add	r6, r9
 8009562:	eba5 0509 	sub.w	r5, r5, r9
 8009566:	6026      	str	r6, [r4, #0]
 8009568:	60a5      	str	r5, [r4, #8]
 800956a:	463e      	mov	r6, r7
 800956c:	42be      	cmp	r6, r7
 800956e:	d900      	bls.n	8009572 <__ssputs_r+0x86>
 8009570:	463e      	mov	r6, r7
 8009572:	6820      	ldr	r0, [r4, #0]
 8009574:	4632      	mov	r2, r6
 8009576:	4641      	mov	r1, r8
 8009578:	f7fd fef8 	bl	800736c <memmove>
 800957c:	68a3      	ldr	r3, [r4, #8]
 800957e:	1b9b      	subs	r3, r3, r6
 8009580:	60a3      	str	r3, [r4, #8]
 8009582:	6823      	ldr	r3, [r4, #0]
 8009584:	4433      	add	r3, r6
 8009586:	6023      	str	r3, [r4, #0]
 8009588:	2000      	movs	r0, #0
 800958a:	e7db      	b.n	8009544 <__ssputs_r+0x58>
 800958c:	462a      	mov	r2, r5
 800958e:	f000 fd21 	bl	8009fd4 <_realloc_r>
 8009592:	4606      	mov	r6, r0
 8009594:	2800      	cmp	r0, #0
 8009596:	d1e1      	bne.n	800955c <__ssputs_r+0x70>
 8009598:	6921      	ldr	r1, [r4, #16]
 800959a:	4650      	mov	r0, sl
 800959c:	f7ff fec6 	bl	800932c <_free_r>
 80095a0:	e7c7      	b.n	8009532 <__ssputs_r+0x46>
	...

080095a4 <_svfiprintf_r>:
 80095a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a8:	4698      	mov	r8, r3
 80095aa:	898b      	ldrh	r3, [r1, #12]
 80095ac:	061b      	lsls	r3, r3, #24
 80095ae:	b09d      	sub	sp, #116	; 0x74
 80095b0:	4607      	mov	r7, r0
 80095b2:	460d      	mov	r5, r1
 80095b4:	4614      	mov	r4, r2
 80095b6:	d50e      	bpl.n	80095d6 <_svfiprintf_r+0x32>
 80095b8:	690b      	ldr	r3, [r1, #16]
 80095ba:	b963      	cbnz	r3, 80095d6 <_svfiprintf_r+0x32>
 80095bc:	2140      	movs	r1, #64	; 0x40
 80095be:	f7ff ff21 	bl	8009404 <_malloc_r>
 80095c2:	6028      	str	r0, [r5, #0]
 80095c4:	6128      	str	r0, [r5, #16]
 80095c6:	b920      	cbnz	r0, 80095d2 <_svfiprintf_r+0x2e>
 80095c8:	230c      	movs	r3, #12
 80095ca:	603b      	str	r3, [r7, #0]
 80095cc:	f04f 30ff 	mov.w	r0, #4294967295
 80095d0:	e0d1      	b.n	8009776 <_svfiprintf_r+0x1d2>
 80095d2:	2340      	movs	r3, #64	; 0x40
 80095d4:	616b      	str	r3, [r5, #20]
 80095d6:	2300      	movs	r3, #0
 80095d8:	9309      	str	r3, [sp, #36]	; 0x24
 80095da:	2320      	movs	r3, #32
 80095dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80095e4:	2330      	movs	r3, #48	; 0x30
 80095e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009790 <_svfiprintf_r+0x1ec>
 80095ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095ee:	f04f 0901 	mov.w	r9, #1
 80095f2:	4623      	mov	r3, r4
 80095f4:	469a      	mov	sl, r3
 80095f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095fa:	b10a      	cbz	r2, 8009600 <_svfiprintf_r+0x5c>
 80095fc:	2a25      	cmp	r2, #37	; 0x25
 80095fe:	d1f9      	bne.n	80095f4 <_svfiprintf_r+0x50>
 8009600:	ebba 0b04 	subs.w	fp, sl, r4
 8009604:	d00b      	beq.n	800961e <_svfiprintf_r+0x7a>
 8009606:	465b      	mov	r3, fp
 8009608:	4622      	mov	r2, r4
 800960a:	4629      	mov	r1, r5
 800960c:	4638      	mov	r0, r7
 800960e:	f7ff ff6d 	bl	80094ec <__ssputs_r>
 8009612:	3001      	adds	r0, #1
 8009614:	f000 80aa 	beq.w	800976c <_svfiprintf_r+0x1c8>
 8009618:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800961a:	445a      	add	r2, fp
 800961c:	9209      	str	r2, [sp, #36]	; 0x24
 800961e:	f89a 3000 	ldrb.w	r3, [sl]
 8009622:	2b00      	cmp	r3, #0
 8009624:	f000 80a2 	beq.w	800976c <_svfiprintf_r+0x1c8>
 8009628:	2300      	movs	r3, #0
 800962a:	f04f 32ff 	mov.w	r2, #4294967295
 800962e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009632:	f10a 0a01 	add.w	sl, sl, #1
 8009636:	9304      	str	r3, [sp, #16]
 8009638:	9307      	str	r3, [sp, #28]
 800963a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800963e:	931a      	str	r3, [sp, #104]	; 0x68
 8009640:	4654      	mov	r4, sl
 8009642:	2205      	movs	r2, #5
 8009644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009648:	4851      	ldr	r0, [pc, #324]	; (8009790 <_svfiprintf_r+0x1ec>)
 800964a:	f7f6 fdd1 	bl	80001f0 <memchr>
 800964e:	9a04      	ldr	r2, [sp, #16]
 8009650:	b9d8      	cbnz	r0, 800968a <_svfiprintf_r+0xe6>
 8009652:	06d0      	lsls	r0, r2, #27
 8009654:	bf44      	itt	mi
 8009656:	2320      	movmi	r3, #32
 8009658:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800965c:	0711      	lsls	r1, r2, #28
 800965e:	bf44      	itt	mi
 8009660:	232b      	movmi	r3, #43	; 0x2b
 8009662:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009666:	f89a 3000 	ldrb.w	r3, [sl]
 800966a:	2b2a      	cmp	r3, #42	; 0x2a
 800966c:	d015      	beq.n	800969a <_svfiprintf_r+0xf6>
 800966e:	9a07      	ldr	r2, [sp, #28]
 8009670:	4654      	mov	r4, sl
 8009672:	2000      	movs	r0, #0
 8009674:	f04f 0c0a 	mov.w	ip, #10
 8009678:	4621      	mov	r1, r4
 800967a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800967e:	3b30      	subs	r3, #48	; 0x30
 8009680:	2b09      	cmp	r3, #9
 8009682:	d94e      	bls.n	8009722 <_svfiprintf_r+0x17e>
 8009684:	b1b0      	cbz	r0, 80096b4 <_svfiprintf_r+0x110>
 8009686:	9207      	str	r2, [sp, #28]
 8009688:	e014      	b.n	80096b4 <_svfiprintf_r+0x110>
 800968a:	eba0 0308 	sub.w	r3, r0, r8
 800968e:	fa09 f303 	lsl.w	r3, r9, r3
 8009692:	4313      	orrs	r3, r2
 8009694:	9304      	str	r3, [sp, #16]
 8009696:	46a2      	mov	sl, r4
 8009698:	e7d2      	b.n	8009640 <_svfiprintf_r+0x9c>
 800969a:	9b03      	ldr	r3, [sp, #12]
 800969c:	1d19      	adds	r1, r3, #4
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	9103      	str	r1, [sp, #12]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	bfbb      	ittet	lt
 80096a6:	425b      	neglt	r3, r3
 80096a8:	f042 0202 	orrlt.w	r2, r2, #2
 80096ac:	9307      	strge	r3, [sp, #28]
 80096ae:	9307      	strlt	r3, [sp, #28]
 80096b0:	bfb8      	it	lt
 80096b2:	9204      	strlt	r2, [sp, #16]
 80096b4:	7823      	ldrb	r3, [r4, #0]
 80096b6:	2b2e      	cmp	r3, #46	; 0x2e
 80096b8:	d10c      	bne.n	80096d4 <_svfiprintf_r+0x130>
 80096ba:	7863      	ldrb	r3, [r4, #1]
 80096bc:	2b2a      	cmp	r3, #42	; 0x2a
 80096be:	d135      	bne.n	800972c <_svfiprintf_r+0x188>
 80096c0:	9b03      	ldr	r3, [sp, #12]
 80096c2:	1d1a      	adds	r2, r3, #4
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	9203      	str	r2, [sp, #12]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	bfb8      	it	lt
 80096cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80096d0:	3402      	adds	r4, #2
 80096d2:	9305      	str	r3, [sp, #20]
 80096d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80097a0 <_svfiprintf_r+0x1fc>
 80096d8:	7821      	ldrb	r1, [r4, #0]
 80096da:	2203      	movs	r2, #3
 80096dc:	4650      	mov	r0, sl
 80096de:	f7f6 fd87 	bl	80001f0 <memchr>
 80096e2:	b140      	cbz	r0, 80096f6 <_svfiprintf_r+0x152>
 80096e4:	2340      	movs	r3, #64	; 0x40
 80096e6:	eba0 000a 	sub.w	r0, r0, sl
 80096ea:	fa03 f000 	lsl.w	r0, r3, r0
 80096ee:	9b04      	ldr	r3, [sp, #16]
 80096f0:	4303      	orrs	r3, r0
 80096f2:	3401      	adds	r4, #1
 80096f4:	9304      	str	r3, [sp, #16]
 80096f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096fa:	4826      	ldr	r0, [pc, #152]	; (8009794 <_svfiprintf_r+0x1f0>)
 80096fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009700:	2206      	movs	r2, #6
 8009702:	f7f6 fd75 	bl	80001f0 <memchr>
 8009706:	2800      	cmp	r0, #0
 8009708:	d038      	beq.n	800977c <_svfiprintf_r+0x1d8>
 800970a:	4b23      	ldr	r3, [pc, #140]	; (8009798 <_svfiprintf_r+0x1f4>)
 800970c:	bb1b      	cbnz	r3, 8009756 <_svfiprintf_r+0x1b2>
 800970e:	9b03      	ldr	r3, [sp, #12]
 8009710:	3307      	adds	r3, #7
 8009712:	f023 0307 	bic.w	r3, r3, #7
 8009716:	3308      	adds	r3, #8
 8009718:	9303      	str	r3, [sp, #12]
 800971a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800971c:	4433      	add	r3, r6
 800971e:	9309      	str	r3, [sp, #36]	; 0x24
 8009720:	e767      	b.n	80095f2 <_svfiprintf_r+0x4e>
 8009722:	fb0c 3202 	mla	r2, ip, r2, r3
 8009726:	460c      	mov	r4, r1
 8009728:	2001      	movs	r0, #1
 800972a:	e7a5      	b.n	8009678 <_svfiprintf_r+0xd4>
 800972c:	2300      	movs	r3, #0
 800972e:	3401      	adds	r4, #1
 8009730:	9305      	str	r3, [sp, #20]
 8009732:	4619      	mov	r1, r3
 8009734:	f04f 0c0a 	mov.w	ip, #10
 8009738:	4620      	mov	r0, r4
 800973a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800973e:	3a30      	subs	r2, #48	; 0x30
 8009740:	2a09      	cmp	r2, #9
 8009742:	d903      	bls.n	800974c <_svfiprintf_r+0x1a8>
 8009744:	2b00      	cmp	r3, #0
 8009746:	d0c5      	beq.n	80096d4 <_svfiprintf_r+0x130>
 8009748:	9105      	str	r1, [sp, #20]
 800974a:	e7c3      	b.n	80096d4 <_svfiprintf_r+0x130>
 800974c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009750:	4604      	mov	r4, r0
 8009752:	2301      	movs	r3, #1
 8009754:	e7f0      	b.n	8009738 <_svfiprintf_r+0x194>
 8009756:	ab03      	add	r3, sp, #12
 8009758:	9300      	str	r3, [sp, #0]
 800975a:	462a      	mov	r2, r5
 800975c:	4b0f      	ldr	r3, [pc, #60]	; (800979c <_svfiprintf_r+0x1f8>)
 800975e:	a904      	add	r1, sp, #16
 8009760:	4638      	mov	r0, r7
 8009762:	f7fd fec5 	bl	80074f0 <_printf_float>
 8009766:	1c42      	adds	r2, r0, #1
 8009768:	4606      	mov	r6, r0
 800976a:	d1d6      	bne.n	800971a <_svfiprintf_r+0x176>
 800976c:	89ab      	ldrh	r3, [r5, #12]
 800976e:	065b      	lsls	r3, r3, #25
 8009770:	f53f af2c 	bmi.w	80095cc <_svfiprintf_r+0x28>
 8009774:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009776:	b01d      	add	sp, #116	; 0x74
 8009778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800977c:	ab03      	add	r3, sp, #12
 800977e:	9300      	str	r3, [sp, #0]
 8009780:	462a      	mov	r2, r5
 8009782:	4b06      	ldr	r3, [pc, #24]	; (800979c <_svfiprintf_r+0x1f8>)
 8009784:	a904      	add	r1, sp, #16
 8009786:	4638      	mov	r0, r7
 8009788:	f7fe f956 	bl	8007a38 <_printf_i>
 800978c:	e7eb      	b.n	8009766 <_svfiprintf_r+0x1c2>
 800978e:	bf00      	nop
 8009790:	0800d4b4 	.word	0x0800d4b4
 8009794:	0800d4be 	.word	0x0800d4be
 8009798:	080074f1 	.word	0x080074f1
 800979c:	080094ed 	.word	0x080094ed
 80097a0:	0800d4ba 	.word	0x0800d4ba

080097a4 <__sfputc_r>:
 80097a4:	6893      	ldr	r3, [r2, #8]
 80097a6:	3b01      	subs	r3, #1
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	b410      	push	{r4}
 80097ac:	6093      	str	r3, [r2, #8]
 80097ae:	da08      	bge.n	80097c2 <__sfputc_r+0x1e>
 80097b0:	6994      	ldr	r4, [r2, #24]
 80097b2:	42a3      	cmp	r3, r4
 80097b4:	db01      	blt.n	80097ba <__sfputc_r+0x16>
 80097b6:	290a      	cmp	r1, #10
 80097b8:	d103      	bne.n	80097c2 <__sfputc_r+0x1e>
 80097ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097be:	f000 b99f 	b.w	8009b00 <__swbuf_r>
 80097c2:	6813      	ldr	r3, [r2, #0]
 80097c4:	1c58      	adds	r0, r3, #1
 80097c6:	6010      	str	r0, [r2, #0]
 80097c8:	7019      	strb	r1, [r3, #0]
 80097ca:	4608      	mov	r0, r1
 80097cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097d0:	4770      	bx	lr

080097d2 <__sfputs_r>:
 80097d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097d4:	4606      	mov	r6, r0
 80097d6:	460f      	mov	r7, r1
 80097d8:	4614      	mov	r4, r2
 80097da:	18d5      	adds	r5, r2, r3
 80097dc:	42ac      	cmp	r4, r5
 80097de:	d101      	bne.n	80097e4 <__sfputs_r+0x12>
 80097e0:	2000      	movs	r0, #0
 80097e2:	e007      	b.n	80097f4 <__sfputs_r+0x22>
 80097e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097e8:	463a      	mov	r2, r7
 80097ea:	4630      	mov	r0, r6
 80097ec:	f7ff ffda 	bl	80097a4 <__sfputc_r>
 80097f0:	1c43      	adds	r3, r0, #1
 80097f2:	d1f3      	bne.n	80097dc <__sfputs_r+0xa>
 80097f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097f8 <_vfiprintf_r>:
 80097f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097fc:	460d      	mov	r5, r1
 80097fe:	b09d      	sub	sp, #116	; 0x74
 8009800:	4614      	mov	r4, r2
 8009802:	4698      	mov	r8, r3
 8009804:	4606      	mov	r6, r0
 8009806:	b118      	cbz	r0, 8009810 <_vfiprintf_r+0x18>
 8009808:	6983      	ldr	r3, [r0, #24]
 800980a:	b90b      	cbnz	r3, 8009810 <_vfiprintf_r+0x18>
 800980c:	f7ff f946 	bl	8008a9c <__sinit>
 8009810:	4b89      	ldr	r3, [pc, #548]	; (8009a38 <_vfiprintf_r+0x240>)
 8009812:	429d      	cmp	r5, r3
 8009814:	d11b      	bne.n	800984e <_vfiprintf_r+0x56>
 8009816:	6875      	ldr	r5, [r6, #4]
 8009818:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800981a:	07d9      	lsls	r1, r3, #31
 800981c:	d405      	bmi.n	800982a <_vfiprintf_r+0x32>
 800981e:	89ab      	ldrh	r3, [r5, #12]
 8009820:	059a      	lsls	r2, r3, #22
 8009822:	d402      	bmi.n	800982a <_vfiprintf_r+0x32>
 8009824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009826:	f7ff f9dc 	bl	8008be2 <__retarget_lock_acquire_recursive>
 800982a:	89ab      	ldrh	r3, [r5, #12]
 800982c:	071b      	lsls	r3, r3, #28
 800982e:	d501      	bpl.n	8009834 <_vfiprintf_r+0x3c>
 8009830:	692b      	ldr	r3, [r5, #16]
 8009832:	b9eb      	cbnz	r3, 8009870 <_vfiprintf_r+0x78>
 8009834:	4629      	mov	r1, r5
 8009836:	4630      	mov	r0, r6
 8009838:	f000 f9c6 	bl	8009bc8 <__swsetup_r>
 800983c:	b1c0      	cbz	r0, 8009870 <_vfiprintf_r+0x78>
 800983e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009840:	07dc      	lsls	r4, r3, #31
 8009842:	d50e      	bpl.n	8009862 <_vfiprintf_r+0x6a>
 8009844:	f04f 30ff 	mov.w	r0, #4294967295
 8009848:	b01d      	add	sp, #116	; 0x74
 800984a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800984e:	4b7b      	ldr	r3, [pc, #492]	; (8009a3c <_vfiprintf_r+0x244>)
 8009850:	429d      	cmp	r5, r3
 8009852:	d101      	bne.n	8009858 <_vfiprintf_r+0x60>
 8009854:	68b5      	ldr	r5, [r6, #8]
 8009856:	e7df      	b.n	8009818 <_vfiprintf_r+0x20>
 8009858:	4b79      	ldr	r3, [pc, #484]	; (8009a40 <_vfiprintf_r+0x248>)
 800985a:	429d      	cmp	r5, r3
 800985c:	bf08      	it	eq
 800985e:	68f5      	ldreq	r5, [r6, #12]
 8009860:	e7da      	b.n	8009818 <_vfiprintf_r+0x20>
 8009862:	89ab      	ldrh	r3, [r5, #12]
 8009864:	0598      	lsls	r0, r3, #22
 8009866:	d4ed      	bmi.n	8009844 <_vfiprintf_r+0x4c>
 8009868:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800986a:	f7ff f9bb 	bl	8008be4 <__retarget_lock_release_recursive>
 800986e:	e7e9      	b.n	8009844 <_vfiprintf_r+0x4c>
 8009870:	2300      	movs	r3, #0
 8009872:	9309      	str	r3, [sp, #36]	; 0x24
 8009874:	2320      	movs	r3, #32
 8009876:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800987a:	f8cd 800c 	str.w	r8, [sp, #12]
 800987e:	2330      	movs	r3, #48	; 0x30
 8009880:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009a44 <_vfiprintf_r+0x24c>
 8009884:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009888:	f04f 0901 	mov.w	r9, #1
 800988c:	4623      	mov	r3, r4
 800988e:	469a      	mov	sl, r3
 8009890:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009894:	b10a      	cbz	r2, 800989a <_vfiprintf_r+0xa2>
 8009896:	2a25      	cmp	r2, #37	; 0x25
 8009898:	d1f9      	bne.n	800988e <_vfiprintf_r+0x96>
 800989a:	ebba 0b04 	subs.w	fp, sl, r4
 800989e:	d00b      	beq.n	80098b8 <_vfiprintf_r+0xc0>
 80098a0:	465b      	mov	r3, fp
 80098a2:	4622      	mov	r2, r4
 80098a4:	4629      	mov	r1, r5
 80098a6:	4630      	mov	r0, r6
 80098a8:	f7ff ff93 	bl	80097d2 <__sfputs_r>
 80098ac:	3001      	adds	r0, #1
 80098ae:	f000 80aa 	beq.w	8009a06 <_vfiprintf_r+0x20e>
 80098b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098b4:	445a      	add	r2, fp
 80098b6:	9209      	str	r2, [sp, #36]	; 0x24
 80098b8:	f89a 3000 	ldrb.w	r3, [sl]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	f000 80a2 	beq.w	8009a06 <_vfiprintf_r+0x20e>
 80098c2:	2300      	movs	r3, #0
 80098c4:	f04f 32ff 	mov.w	r2, #4294967295
 80098c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098cc:	f10a 0a01 	add.w	sl, sl, #1
 80098d0:	9304      	str	r3, [sp, #16]
 80098d2:	9307      	str	r3, [sp, #28]
 80098d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098d8:	931a      	str	r3, [sp, #104]	; 0x68
 80098da:	4654      	mov	r4, sl
 80098dc:	2205      	movs	r2, #5
 80098de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098e2:	4858      	ldr	r0, [pc, #352]	; (8009a44 <_vfiprintf_r+0x24c>)
 80098e4:	f7f6 fc84 	bl	80001f0 <memchr>
 80098e8:	9a04      	ldr	r2, [sp, #16]
 80098ea:	b9d8      	cbnz	r0, 8009924 <_vfiprintf_r+0x12c>
 80098ec:	06d1      	lsls	r1, r2, #27
 80098ee:	bf44      	itt	mi
 80098f0:	2320      	movmi	r3, #32
 80098f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098f6:	0713      	lsls	r3, r2, #28
 80098f8:	bf44      	itt	mi
 80098fa:	232b      	movmi	r3, #43	; 0x2b
 80098fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009900:	f89a 3000 	ldrb.w	r3, [sl]
 8009904:	2b2a      	cmp	r3, #42	; 0x2a
 8009906:	d015      	beq.n	8009934 <_vfiprintf_r+0x13c>
 8009908:	9a07      	ldr	r2, [sp, #28]
 800990a:	4654      	mov	r4, sl
 800990c:	2000      	movs	r0, #0
 800990e:	f04f 0c0a 	mov.w	ip, #10
 8009912:	4621      	mov	r1, r4
 8009914:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009918:	3b30      	subs	r3, #48	; 0x30
 800991a:	2b09      	cmp	r3, #9
 800991c:	d94e      	bls.n	80099bc <_vfiprintf_r+0x1c4>
 800991e:	b1b0      	cbz	r0, 800994e <_vfiprintf_r+0x156>
 8009920:	9207      	str	r2, [sp, #28]
 8009922:	e014      	b.n	800994e <_vfiprintf_r+0x156>
 8009924:	eba0 0308 	sub.w	r3, r0, r8
 8009928:	fa09 f303 	lsl.w	r3, r9, r3
 800992c:	4313      	orrs	r3, r2
 800992e:	9304      	str	r3, [sp, #16]
 8009930:	46a2      	mov	sl, r4
 8009932:	e7d2      	b.n	80098da <_vfiprintf_r+0xe2>
 8009934:	9b03      	ldr	r3, [sp, #12]
 8009936:	1d19      	adds	r1, r3, #4
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	9103      	str	r1, [sp, #12]
 800993c:	2b00      	cmp	r3, #0
 800993e:	bfbb      	ittet	lt
 8009940:	425b      	neglt	r3, r3
 8009942:	f042 0202 	orrlt.w	r2, r2, #2
 8009946:	9307      	strge	r3, [sp, #28]
 8009948:	9307      	strlt	r3, [sp, #28]
 800994a:	bfb8      	it	lt
 800994c:	9204      	strlt	r2, [sp, #16]
 800994e:	7823      	ldrb	r3, [r4, #0]
 8009950:	2b2e      	cmp	r3, #46	; 0x2e
 8009952:	d10c      	bne.n	800996e <_vfiprintf_r+0x176>
 8009954:	7863      	ldrb	r3, [r4, #1]
 8009956:	2b2a      	cmp	r3, #42	; 0x2a
 8009958:	d135      	bne.n	80099c6 <_vfiprintf_r+0x1ce>
 800995a:	9b03      	ldr	r3, [sp, #12]
 800995c:	1d1a      	adds	r2, r3, #4
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	9203      	str	r2, [sp, #12]
 8009962:	2b00      	cmp	r3, #0
 8009964:	bfb8      	it	lt
 8009966:	f04f 33ff 	movlt.w	r3, #4294967295
 800996a:	3402      	adds	r4, #2
 800996c:	9305      	str	r3, [sp, #20]
 800996e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009a54 <_vfiprintf_r+0x25c>
 8009972:	7821      	ldrb	r1, [r4, #0]
 8009974:	2203      	movs	r2, #3
 8009976:	4650      	mov	r0, sl
 8009978:	f7f6 fc3a 	bl	80001f0 <memchr>
 800997c:	b140      	cbz	r0, 8009990 <_vfiprintf_r+0x198>
 800997e:	2340      	movs	r3, #64	; 0x40
 8009980:	eba0 000a 	sub.w	r0, r0, sl
 8009984:	fa03 f000 	lsl.w	r0, r3, r0
 8009988:	9b04      	ldr	r3, [sp, #16]
 800998a:	4303      	orrs	r3, r0
 800998c:	3401      	adds	r4, #1
 800998e:	9304      	str	r3, [sp, #16]
 8009990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009994:	482c      	ldr	r0, [pc, #176]	; (8009a48 <_vfiprintf_r+0x250>)
 8009996:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800999a:	2206      	movs	r2, #6
 800999c:	f7f6 fc28 	bl	80001f0 <memchr>
 80099a0:	2800      	cmp	r0, #0
 80099a2:	d03f      	beq.n	8009a24 <_vfiprintf_r+0x22c>
 80099a4:	4b29      	ldr	r3, [pc, #164]	; (8009a4c <_vfiprintf_r+0x254>)
 80099a6:	bb1b      	cbnz	r3, 80099f0 <_vfiprintf_r+0x1f8>
 80099a8:	9b03      	ldr	r3, [sp, #12]
 80099aa:	3307      	adds	r3, #7
 80099ac:	f023 0307 	bic.w	r3, r3, #7
 80099b0:	3308      	adds	r3, #8
 80099b2:	9303      	str	r3, [sp, #12]
 80099b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099b6:	443b      	add	r3, r7
 80099b8:	9309      	str	r3, [sp, #36]	; 0x24
 80099ba:	e767      	b.n	800988c <_vfiprintf_r+0x94>
 80099bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80099c0:	460c      	mov	r4, r1
 80099c2:	2001      	movs	r0, #1
 80099c4:	e7a5      	b.n	8009912 <_vfiprintf_r+0x11a>
 80099c6:	2300      	movs	r3, #0
 80099c8:	3401      	adds	r4, #1
 80099ca:	9305      	str	r3, [sp, #20]
 80099cc:	4619      	mov	r1, r3
 80099ce:	f04f 0c0a 	mov.w	ip, #10
 80099d2:	4620      	mov	r0, r4
 80099d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099d8:	3a30      	subs	r2, #48	; 0x30
 80099da:	2a09      	cmp	r2, #9
 80099dc:	d903      	bls.n	80099e6 <_vfiprintf_r+0x1ee>
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d0c5      	beq.n	800996e <_vfiprintf_r+0x176>
 80099e2:	9105      	str	r1, [sp, #20]
 80099e4:	e7c3      	b.n	800996e <_vfiprintf_r+0x176>
 80099e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80099ea:	4604      	mov	r4, r0
 80099ec:	2301      	movs	r3, #1
 80099ee:	e7f0      	b.n	80099d2 <_vfiprintf_r+0x1da>
 80099f0:	ab03      	add	r3, sp, #12
 80099f2:	9300      	str	r3, [sp, #0]
 80099f4:	462a      	mov	r2, r5
 80099f6:	4b16      	ldr	r3, [pc, #88]	; (8009a50 <_vfiprintf_r+0x258>)
 80099f8:	a904      	add	r1, sp, #16
 80099fa:	4630      	mov	r0, r6
 80099fc:	f7fd fd78 	bl	80074f0 <_printf_float>
 8009a00:	4607      	mov	r7, r0
 8009a02:	1c78      	adds	r0, r7, #1
 8009a04:	d1d6      	bne.n	80099b4 <_vfiprintf_r+0x1bc>
 8009a06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a08:	07d9      	lsls	r1, r3, #31
 8009a0a:	d405      	bmi.n	8009a18 <_vfiprintf_r+0x220>
 8009a0c:	89ab      	ldrh	r3, [r5, #12]
 8009a0e:	059a      	lsls	r2, r3, #22
 8009a10:	d402      	bmi.n	8009a18 <_vfiprintf_r+0x220>
 8009a12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a14:	f7ff f8e6 	bl	8008be4 <__retarget_lock_release_recursive>
 8009a18:	89ab      	ldrh	r3, [r5, #12]
 8009a1a:	065b      	lsls	r3, r3, #25
 8009a1c:	f53f af12 	bmi.w	8009844 <_vfiprintf_r+0x4c>
 8009a20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a22:	e711      	b.n	8009848 <_vfiprintf_r+0x50>
 8009a24:	ab03      	add	r3, sp, #12
 8009a26:	9300      	str	r3, [sp, #0]
 8009a28:	462a      	mov	r2, r5
 8009a2a:	4b09      	ldr	r3, [pc, #36]	; (8009a50 <_vfiprintf_r+0x258>)
 8009a2c:	a904      	add	r1, sp, #16
 8009a2e:	4630      	mov	r0, r6
 8009a30:	f7fe f802 	bl	8007a38 <_printf_i>
 8009a34:	e7e4      	b.n	8009a00 <_vfiprintf_r+0x208>
 8009a36:	bf00      	nop
 8009a38:	0800d31c 	.word	0x0800d31c
 8009a3c:	0800d33c 	.word	0x0800d33c
 8009a40:	0800d2fc 	.word	0x0800d2fc
 8009a44:	0800d4b4 	.word	0x0800d4b4
 8009a48:	0800d4be 	.word	0x0800d4be
 8009a4c:	080074f1 	.word	0x080074f1
 8009a50:	080097d3 	.word	0x080097d3
 8009a54:	0800d4ba 	.word	0x0800d4ba

08009a58 <_sbrk_r>:
 8009a58:	b538      	push	{r3, r4, r5, lr}
 8009a5a:	4d06      	ldr	r5, [pc, #24]	; (8009a74 <_sbrk_r+0x1c>)
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	4604      	mov	r4, r0
 8009a60:	4608      	mov	r0, r1
 8009a62:	602b      	str	r3, [r5, #0]
 8009a64:	f7f8 fa7e 	bl	8001f64 <_sbrk>
 8009a68:	1c43      	adds	r3, r0, #1
 8009a6a:	d102      	bne.n	8009a72 <_sbrk_r+0x1a>
 8009a6c:	682b      	ldr	r3, [r5, #0]
 8009a6e:	b103      	cbz	r3, 8009a72 <_sbrk_r+0x1a>
 8009a70:	6023      	str	r3, [r4, #0]
 8009a72:	bd38      	pop	{r3, r4, r5, pc}
 8009a74:	20000fb0 	.word	0x20000fb0

08009a78 <__sread>:
 8009a78:	b510      	push	{r4, lr}
 8009a7a:	460c      	mov	r4, r1
 8009a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a80:	f000 fad8 	bl	800a034 <_read_r>
 8009a84:	2800      	cmp	r0, #0
 8009a86:	bfab      	itete	ge
 8009a88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a8a:	89a3      	ldrhlt	r3, [r4, #12]
 8009a8c:	181b      	addge	r3, r3, r0
 8009a8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a92:	bfac      	ite	ge
 8009a94:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a96:	81a3      	strhlt	r3, [r4, #12]
 8009a98:	bd10      	pop	{r4, pc}

08009a9a <__swrite>:
 8009a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a9e:	461f      	mov	r7, r3
 8009aa0:	898b      	ldrh	r3, [r1, #12]
 8009aa2:	05db      	lsls	r3, r3, #23
 8009aa4:	4605      	mov	r5, r0
 8009aa6:	460c      	mov	r4, r1
 8009aa8:	4616      	mov	r6, r2
 8009aaa:	d505      	bpl.n	8009ab8 <__swrite+0x1e>
 8009aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ab0:	2302      	movs	r3, #2
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f000 f9f8 	bl	8009ea8 <_lseek_r>
 8009ab8:	89a3      	ldrh	r3, [r4, #12]
 8009aba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009abe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ac2:	81a3      	strh	r3, [r4, #12]
 8009ac4:	4632      	mov	r2, r6
 8009ac6:	463b      	mov	r3, r7
 8009ac8:	4628      	mov	r0, r5
 8009aca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ace:	f000 b869 	b.w	8009ba4 <_write_r>

08009ad2 <__sseek>:
 8009ad2:	b510      	push	{r4, lr}
 8009ad4:	460c      	mov	r4, r1
 8009ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ada:	f000 f9e5 	bl	8009ea8 <_lseek_r>
 8009ade:	1c43      	adds	r3, r0, #1
 8009ae0:	89a3      	ldrh	r3, [r4, #12]
 8009ae2:	bf15      	itete	ne
 8009ae4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ae6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009aea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009aee:	81a3      	strheq	r3, [r4, #12]
 8009af0:	bf18      	it	ne
 8009af2:	81a3      	strhne	r3, [r4, #12]
 8009af4:	bd10      	pop	{r4, pc}

08009af6 <__sclose>:
 8009af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009afa:	f000 b8f1 	b.w	8009ce0 <_close_r>
	...

08009b00 <__swbuf_r>:
 8009b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b02:	460e      	mov	r6, r1
 8009b04:	4614      	mov	r4, r2
 8009b06:	4605      	mov	r5, r0
 8009b08:	b118      	cbz	r0, 8009b12 <__swbuf_r+0x12>
 8009b0a:	6983      	ldr	r3, [r0, #24]
 8009b0c:	b90b      	cbnz	r3, 8009b12 <__swbuf_r+0x12>
 8009b0e:	f7fe ffc5 	bl	8008a9c <__sinit>
 8009b12:	4b21      	ldr	r3, [pc, #132]	; (8009b98 <__swbuf_r+0x98>)
 8009b14:	429c      	cmp	r4, r3
 8009b16:	d12b      	bne.n	8009b70 <__swbuf_r+0x70>
 8009b18:	686c      	ldr	r4, [r5, #4]
 8009b1a:	69a3      	ldr	r3, [r4, #24]
 8009b1c:	60a3      	str	r3, [r4, #8]
 8009b1e:	89a3      	ldrh	r3, [r4, #12]
 8009b20:	071a      	lsls	r2, r3, #28
 8009b22:	d52f      	bpl.n	8009b84 <__swbuf_r+0x84>
 8009b24:	6923      	ldr	r3, [r4, #16]
 8009b26:	b36b      	cbz	r3, 8009b84 <__swbuf_r+0x84>
 8009b28:	6923      	ldr	r3, [r4, #16]
 8009b2a:	6820      	ldr	r0, [r4, #0]
 8009b2c:	1ac0      	subs	r0, r0, r3
 8009b2e:	6963      	ldr	r3, [r4, #20]
 8009b30:	b2f6      	uxtb	r6, r6
 8009b32:	4283      	cmp	r3, r0
 8009b34:	4637      	mov	r7, r6
 8009b36:	dc04      	bgt.n	8009b42 <__swbuf_r+0x42>
 8009b38:	4621      	mov	r1, r4
 8009b3a:	4628      	mov	r0, r5
 8009b3c:	f000 f966 	bl	8009e0c <_fflush_r>
 8009b40:	bb30      	cbnz	r0, 8009b90 <__swbuf_r+0x90>
 8009b42:	68a3      	ldr	r3, [r4, #8]
 8009b44:	3b01      	subs	r3, #1
 8009b46:	60a3      	str	r3, [r4, #8]
 8009b48:	6823      	ldr	r3, [r4, #0]
 8009b4a:	1c5a      	adds	r2, r3, #1
 8009b4c:	6022      	str	r2, [r4, #0]
 8009b4e:	701e      	strb	r6, [r3, #0]
 8009b50:	6963      	ldr	r3, [r4, #20]
 8009b52:	3001      	adds	r0, #1
 8009b54:	4283      	cmp	r3, r0
 8009b56:	d004      	beq.n	8009b62 <__swbuf_r+0x62>
 8009b58:	89a3      	ldrh	r3, [r4, #12]
 8009b5a:	07db      	lsls	r3, r3, #31
 8009b5c:	d506      	bpl.n	8009b6c <__swbuf_r+0x6c>
 8009b5e:	2e0a      	cmp	r6, #10
 8009b60:	d104      	bne.n	8009b6c <__swbuf_r+0x6c>
 8009b62:	4621      	mov	r1, r4
 8009b64:	4628      	mov	r0, r5
 8009b66:	f000 f951 	bl	8009e0c <_fflush_r>
 8009b6a:	b988      	cbnz	r0, 8009b90 <__swbuf_r+0x90>
 8009b6c:	4638      	mov	r0, r7
 8009b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b70:	4b0a      	ldr	r3, [pc, #40]	; (8009b9c <__swbuf_r+0x9c>)
 8009b72:	429c      	cmp	r4, r3
 8009b74:	d101      	bne.n	8009b7a <__swbuf_r+0x7a>
 8009b76:	68ac      	ldr	r4, [r5, #8]
 8009b78:	e7cf      	b.n	8009b1a <__swbuf_r+0x1a>
 8009b7a:	4b09      	ldr	r3, [pc, #36]	; (8009ba0 <__swbuf_r+0xa0>)
 8009b7c:	429c      	cmp	r4, r3
 8009b7e:	bf08      	it	eq
 8009b80:	68ec      	ldreq	r4, [r5, #12]
 8009b82:	e7ca      	b.n	8009b1a <__swbuf_r+0x1a>
 8009b84:	4621      	mov	r1, r4
 8009b86:	4628      	mov	r0, r5
 8009b88:	f000 f81e 	bl	8009bc8 <__swsetup_r>
 8009b8c:	2800      	cmp	r0, #0
 8009b8e:	d0cb      	beq.n	8009b28 <__swbuf_r+0x28>
 8009b90:	f04f 37ff 	mov.w	r7, #4294967295
 8009b94:	e7ea      	b.n	8009b6c <__swbuf_r+0x6c>
 8009b96:	bf00      	nop
 8009b98:	0800d31c 	.word	0x0800d31c
 8009b9c:	0800d33c 	.word	0x0800d33c
 8009ba0:	0800d2fc 	.word	0x0800d2fc

08009ba4 <_write_r>:
 8009ba4:	b538      	push	{r3, r4, r5, lr}
 8009ba6:	4d07      	ldr	r5, [pc, #28]	; (8009bc4 <_write_r+0x20>)
 8009ba8:	4604      	mov	r4, r0
 8009baa:	4608      	mov	r0, r1
 8009bac:	4611      	mov	r1, r2
 8009bae:	2200      	movs	r2, #0
 8009bb0:	602a      	str	r2, [r5, #0]
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	f7f8 f985 	bl	8001ec2 <_write>
 8009bb8:	1c43      	adds	r3, r0, #1
 8009bba:	d102      	bne.n	8009bc2 <_write_r+0x1e>
 8009bbc:	682b      	ldr	r3, [r5, #0]
 8009bbe:	b103      	cbz	r3, 8009bc2 <_write_r+0x1e>
 8009bc0:	6023      	str	r3, [r4, #0]
 8009bc2:	bd38      	pop	{r3, r4, r5, pc}
 8009bc4:	20000fb0 	.word	0x20000fb0

08009bc8 <__swsetup_r>:
 8009bc8:	4b32      	ldr	r3, [pc, #200]	; (8009c94 <__swsetup_r+0xcc>)
 8009bca:	b570      	push	{r4, r5, r6, lr}
 8009bcc:	681d      	ldr	r5, [r3, #0]
 8009bce:	4606      	mov	r6, r0
 8009bd0:	460c      	mov	r4, r1
 8009bd2:	b125      	cbz	r5, 8009bde <__swsetup_r+0x16>
 8009bd4:	69ab      	ldr	r3, [r5, #24]
 8009bd6:	b913      	cbnz	r3, 8009bde <__swsetup_r+0x16>
 8009bd8:	4628      	mov	r0, r5
 8009bda:	f7fe ff5f 	bl	8008a9c <__sinit>
 8009bde:	4b2e      	ldr	r3, [pc, #184]	; (8009c98 <__swsetup_r+0xd0>)
 8009be0:	429c      	cmp	r4, r3
 8009be2:	d10f      	bne.n	8009c04 <__swsetup_r+0x3c>
 8009be4:	686c      	ldr	r4, [r5, #4]
 8009be6:	89a3      	ldrh	r3, [r4, #12]
 8009be8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009bec:	0719      	lsls	r1, r3, #28
 8009bee:	d42c      	bmi.n	8009c4a <__swsetup_r+0x82>
 8009bf0:	06dd      	lsls	r5, r3, #27
 8009bf2:	d411      	bmi.n	8009c18 <__swsetup_r+0x50>
 8009bf4:	2309      	movs	r3, #9
 8009bf6:	6033      	str	r3, [r6, #0]
 8009bf8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009bfc:	81a3      	strh	r3, [r4, #12]
 8009bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8009c02:	e03e      	b.n	8009c82 <__swsetup_r+0xba>
 8009c04:	4b25      	ldr	r3, [pc, #148]	; (8009c9c <__swsetup_r+0xd4>)
 8009c06:	429c      	cmp	r4, r3
 8009c08:	d101      	bne.n	8009c0e <__swsetup_r+0x46>
 8009c0a:	68ac      	ldr	r4, [r5, #8]
 8009c0c:	e7eb      	b.n	8009be6 <__swsetup_r+0x1e>
 8009c0e:	4b24      	ldr	r3, [pc, #144]	; (8009ca0 <__swsetup_r+0xd8>)
 8009c10:	429c      	cmp	r4, r3
 8009c12:	bf08      	it	eq
 8009c14:	68ec      	ldreq	r4, [r5, #12]
 8009c16:	e7e6      	b.n	8009be6 <__swsetup_r+0x1e>
 8009c18:	0758      	lsls	r0, r3, #29
 8009c1a:	d512      	bpl.n	8009c42 <__swsetup_r+0x7a>
 8009c1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c1e:	b141      	cbz	r1, 8009c32 <__swsetup_r+0x6a>
 8009c20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c24:	4299      	cmp	r1, r3
 8009c26:	d002      	beq.n	8009c2e <__swsetup_r+0x66>
 8009c28:	4630      	mov	r0, r6
 8009c2a:	f7ff fb7f 	bl	800932c <_free_r>
 8009c2e:	2300      	movs	r3, #0
 8009c30:	6363      	str	r3, [r4, #52]	; 0x34
 8009c32:	89a3      	ldrh	r3, [r4, #12]
 8009c34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c38:	81a3      	strh	r3, [r4, #12]
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	6063      	str	r3, [r4, #4]
 8009c3e:	6923      	ldr	r3, [r4, #16]
 8009c40:	6023      	str	r3, [r4, #0]
 8009c42:	89a3      	ldrh	r3, [r4, #12]
 8009c44:	f043 0308 	orr.w	r3, r3, #8
 8009c48:	81a3      	strh	r3, [r4, #12]
 8009c4a:	6923      	ldr	r3, [r4, #16]
 8009c4c:	b94b      	cbnz	r3, 8009c62 <__swsetup_r+0x9a>
 8009c4e:	89a3      	ldrh	r3, [r4, #12]
 8009c50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c58:	d003      	beq.n	8009c62 <__swsetup_r+0x9a>
 8009c5a:	4621      	mov	r1, r4
 8009c5c:	4630      	mov	r0, r6
 8009c5e:	f000 f95b 	bl	8009f18 <__smakebuf_r>
 8009c62:	89a0      	ldrh	r0, [r4, #12]
 8009c64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c68:	f010 0301 	ands.w	r3, r0, #1
 8009c6c:	d00a      	beq.n	8009c84 <__swsetup_r+0xbc>
 8009c6e:	2300      	movs	r3, #0
 8009c70:	60a3      	str	r3, [r4, #8]
 8009c72:	6963      	ldr	r3, [r4, #20]
 8009c74:	425b      	negs	r3, r3
 8009c76:	61a3      	str	r3, [r4, #24]
 8009c78:	6923      	ldr	r3, [r4, #16]
 8009c7a:	b943      	cbnz	r3, 8009c8e <__swsetup_r+0xc6>
 8009c7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c80:	d1ba      	bne.n	8009bf8 <__swsetup_r+0x30>
 8009c82:	bd70      	pop	{r4, r5, r6, pc}
 8009c84:	0781      	lsls	r1, r0, #30
 8009c86:	bf58      	it	pl
 8009c88:	6963      	ldrpl	r3, [r4, #20]
 8009c8a:	60a3      	str	r3, [r4, #8]
 8009c8c:	e7f4      	b.n	8009c78 <__swsetup_r+0xb0>
 8009c8e:	2000      	movs	r0, #0
 8009c90:	e7f7      	b.n	8009c82 <__swsetup_r+0xba>
 8009c92:	bf00      	nop
 8009c94:	20000450 	.word	0x20000450
 8009c98:	0800d31c 	.word	0x0800d31c
 8009c9c:	0800d33c 	.word	0x0800d33c
 8009ca0:	0800d2fc 	.word	0x0800d2fc

08009ca4 <__assert_func>:
 8009ca4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ca6:	4614      	mov	r4, r2
 8009ca8:	461a      	mov	r2, r3
 8009caa:	4b09      	ldr	r3, [pc, #36]	; (8009cd0 <__assert_func+0x2c>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4605      	mov	r5, r0
 8009cb0:	68d8      	ldr	r0, [r3, #12]
 8009cb2:	b14c      	cbz	r4, 8009cc8 <__assert_func+0x24>
 8009cb4:	4b07      	ldr	r3, [pc, #28]	; (8009cd4 <__assert_func+0x30>)
 8009cb6:	9100      	str	r1, [sp, #0]
 8009cb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009cbc:	4906      	ldr	r1, [pc, #24]	; (8009cd8 <__assert_func+0x34>)
 8009cbe:	462b      	mov	r3, r5
 8009cc0:	f000 f8e0 	bl	8009e84 <fiprintf>
 8009cc4:	f000 f9d5 	bl	800a072 <abort>
 8009cc8:	4b04      	ldr	r3, [pc, #16]	; (8009cdc <__assert_func+0x38>)
 8009cca:	461c      	mov	r4, r3
 8009ccc:	e7f3      	b.n	8009cb6 <__assert_func+0x12>
 8009cce:	bf00      	nop
 8009cd0:	20000450 	.word	0x20000450
 8009cd4:	0800d4c5 	.word	0x0800d4c5
 8009cd8:	0800d4d2 	.word	0x0800d4d2
 8009cdc:	0800d500 	.word	0x0800d500

08009ce0 <_close_r>:
 8009ce0:	b538      	push	{r3, r4, r5, lr}
 8009ce2:	4d06      	ldr	r5, [pc, #24]	; (8009cfc <_close_r+0x1c>)
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	4604      	mov	r4, r0
 8009ce8:	4608      	mov	r0, r1
 8009cea:	602b      	str	r3, [r5, #0]
 8009cec:	f7f8 f905 	bl	8001efa <_close>
 8009cf0:	1c43      	adds	r3, r0, #1
 8009cf2:	d102      	bne.n	8009cfa <_close_r+0x1a>
 8009cf4:	682b      	ldr	r3, [r5, #0]
 8009cf6:	b103      	cbz	r3, 8009cfa <_close_r+0x1a>
 8009cf8:	6023      	str	r3, [r4, #0]
 8009cfa:	bd38      	pop	{r3, r4, r5, pc}
 8009cfc:	20000fb0 	.word	0x20000fb0

08009d00 <__sflush_r>:
 8009d00:	898a      	ldrh	r2, [r1, #12]
 8009d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d06:	4605      	mov	r5, r0
 8009d08:	0710      	lsls	r0, r2, #28
 8009d0a:	460c      	mov	r4, r1
 8009d0c:	d458      	bmi.n	8009dc0 <__sflush_r+0xc0>
 8009d0e:	684b      	ldr	r3, [r1, #4]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	dc05      	bgt.n	8009d20 <__sflush_r+0x20>
 8009d14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	dc02      	bgt.n	8009d20 <__sflush_r+0x20>
 8009d1a:	2000      	movs	r0, #0
 8009d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d22:	2e00      	cmp	r6, #0
 8009d24:	d0f9      	beq.n	8009d1a <__sflush_r+0x1a>
 8009d26:	2300      	movs	r3, #0
 8009d28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d2c:	682f      	ldr	r7, [r5, #0]
 8009d2e:	602b      	str	r3, [r5, #0]
 8009d30:	d032      	beq.n	8009d98 <__sflush_r+0x98>
 8009d32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d34:	89a3      	ldrh	r3, [r4, #12]
 8009d36:	075a      	lsls	r2, r3, #29
 8009d38:	d505      	bpl.n	8009d46 <__sflush_r+0x46>
 8009d3a:	6863      	ldr	r3, [r4, #4]
 8009d3c:	1ac0      	subs	r0, r0, r3
 8009d3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d40:	b10b      	cbz	r3, 8009d46 <__sflush_r+0x46>
 8009d42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d44:	1ac0      	subs	r0, r0, r3
 8009d46:	2300      	movs	r3, #0
 8009d48:	4602      	mov	r2, r0
 8009d4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d4c:	6a21      	ldr	r1, [r4, #32]
 8009d4e:	4628      	mov	r0, r5
 8009d50:	47b0      	blx	r6
 8009d52:	1c43      	adds	r3, r0, #1
 8009d54:	89a3      	ldrh	r3, [r4, #12]
 8009d56:	d106      	bne.n	8009d66 <__sflush_r+0x66>
 8009d58:	6829      	ldr	r1, [r5, #0]
 8009d5a:	291d      	cmp	r1, #29
 8009d5c:	d82c      	bhi.n	8009db8 <__sflush_r+0xb8>
 8009d5e:	4a2a      	ldr	r2, [pc, #168]	; (8009e08 <__sflush_r+0x108>)
 8009d60:	40ca      	lsrs	r2, r1
 8009d62:	07d6      	lsls	r6, r2, #31
 8009d64:	d528      	bpl.n	8009db8 <__sflush_r+0xb8>
 8009d66:	2200      	movs	r2, #0
 8009d68:	6062      	str	r2, [r4, #4]
 8009d6a:	04d9      	lsls	r1, r3, #19
 8009d6c:	6922      	ldr	r2, [r4, #16]
 8009d6e:	6022      	str	r2, [r4, #0]
 8009d70:	d504      	bpl.n	8009d7c <__sflush_r+0x7c>
 8009d72:	1c42      	adds	r2, r0, #1
 8009d74:	d101      	bne.n	8009d7a <__sflush_r+0x7a>
 8009d76:	682b      	ldr	r3, [r5, #0]
 8009d78:	b903      	cbnz	r3, 8009d7c <__sflush_r+0x7c>
 8009d7a:	6560      	str	r0, [r4, #84]	; 0x54
 8009d7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d7e:	602f      	str	r7, [r5, #0]
 8009d80:	2900      	cmp	r1, #0
 8009d82:	d0ca      	beq.n	8009d1a <__sflush_r+0x1a>
 8009d84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d88:	4299      	cmp	r1, r3
 8009d8a:	d002      	beq.n	8009d92 <__sflush_r+0x92>
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	f7ff facd 	bl	800932c <_free_r>
 8009d92:	2000      	movs	r0, #0
 8009d94:	6360      	str	r0, [r4, #52]	; 0x34
 8009d96:	e7c1      	b.n	8009d1c <__sflush_r+0x1c>
 8009d98:	6a21      	ldr	r1, [r4, #32]
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	47b0      	blx	r6
 8009da0:	1c41      	adds	r1, r0, #1
 8009da2:	d1c7      	bne.n	8009d34 <__sflush_r+0x34>
 8009da4:	682b      	ldr	r3, [r5, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d0c4      	beq.n	8009d34 <__sflush_r+0x34>
 8009daa:	2b1d      	cmp	r3, #29
 8009dac:	d001      	beq.n	8009db2 <__sflush_r+0xb2>
 8009dae:	2b16      	cmp	r3, #22
 8009db0:	d101      	bne.n	8009db6 <__sflush_r+0xb6>
 8009db2:	602f      	str	r7, [r5, #0]
 8009db4:	e7b1      	b.n	8009d1a <__sflush_r+0x1a>
 8009db6:	89a3      	ldrh	r3, [r4, #12]
 8009db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dbc:	81a3      	strh	r3, [r4, #12]
 8009dbe:	e7ad      	b.n	8009d1c <__sflush_r+0x1c>
 8009dc0:	690f      	ldr	r7, [r1, #16]
 8009dc2:	2f00      	cmp	r7, #0
 8009dc4:	d0a9      	beq.n	8009d1a <__sflush_r+0x1a>
 8009dc6:	0793      	lsls	r3, r2, #30
 8009dc8:	680e      	ldr	r6, [r1, #0]
 8009dca:	bf08      	it	eq
 8009dcc:	694b      	ldreq	r3, [r1, #20]
 8009dce:	600f      	str	r7, [r1, #0]
 8009dd0:	bf18      	it	ne
 8009dd2:	2300      	movne	r3, #0
 8009dd4:	eba6 0807 	sub.w	r8, r6, r7
 8009dd8:	608b      	str	r3, [r1, #8]
 8009dda:	f1b8 0f00 	cmp.w	r8, #0
 8009dde:	dd9c      	ble.n	8009d1a <__sflush_r+0x1a>
 8009de0:	6a21      	ldr	r1, [r4, #32]
 8009de2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009de4:	4643      	mov	r3, r8
 8009de6:	463a      	mov	r2, r7
 8009de8:	4628      	mov	r0, r5
 8009dea:	47b0      	blx	r6
 8009dec:	2800      	cmp	r0, #0
 8009dee:	dc06      	bgt.n	8009dfe <__sflush_r+0xfe>
 8009df0:	89a3      	ldrh	r3, [r4, #12]
 8009df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009df6:	81a3      	strh	r3, [r4, #12]
 8009df8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dfc:	e78e      	b.n	8009d1c <__sflush_r+0x1c>
 8009dfe:	4407      	add	r7, r0
 8009e00:	eba8 0800 	sub.w	r8, r8, r0
 8009e04:	e7e9      	b.n	8009dda <__sflush_r+0xda>
 8009e06:	bf00      	nop
 8009e08:	20400001 	.word	0x20400001

08009e0c <_fflush_r>:
 8009e0c:	b538      	push	{r3, r4, r5, lr}
 8009e0e:	690b      	ldr	r3, [r1, #16]
 8009e10:	4605      	mov	r5, r0
 8009e12:	460c      	mov	r4, r1
 8009e14:	b913      	cbnz	r3, 8009e1c <_fflush_r+0x10>
 8009e16:	2500      	movs	r5, #0
 8009e18:	4628      	mov	r0, r5
 8009e1a:	bd38      	pop	{r3, r4, r5, pc}
 8009e1c:	b118      	cbz	r0, 8009e26 <_fflush_r+0x1a>
 8009e1e:	6983      	ldr	r3, [r0, #24]
 8009e20:	b90b      	cbnz	r3, 8009e26 <_fflush_r+0x1a>
 8009e22:	f7fe fe3b 	bl	8008a9c <__sinit>
 8009e26:	4b14      	ldr	r3, [pc, #80]	; (8009e78 <_fflush_r+0x6c>)
 8009e28:	429c      	cmp	r4, r3
 8009e2a:	d11b      	bne.n	8009e64 <_fflush_r+0x58>
 8009e2c:	686c      	ldr	r4, [r5, #4]
 8009e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d0ef      	beq.n	8009e16 <_fflush_r+0xa>
 8009e36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e38:	07d0      	lsls	r0, r2, #31
 8009e3a:	d404      	bmi.n	8009e46 <_fflush_r+0x3a>
 8009e3c:	0599      	lsls	r1, r3, #22
 8009e3e:	d402      	bmi.n	8009e46 <_fflush_r+0x3a>
 8009e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e42:	f7fe fece 	bl	8008be2 <__retarget_lock_acquire_recursive>
 8009e46:	4628      	mov	r0, r5
 8009e48:	4621      	mov	r1, r4
 8009e4a:	f7ff ff59 	bl	8009d00 <__sflush_r>
 8009e4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e50:	07da      	lsls	r2, r3, #31
 8009e52:	4605      	mov	r5, r0
 8009e54:	d4e0      	bmi.n	8009e18 <_fflush_r+0xc>
 8009e56:	89a3      	ldrh	r3, [r4, #12]
 8009e58:	059b      	lsls	r3, r3, #22
 8009e5a:	d4dd      	bmi.n	8009e18 <_fflush_r+0xc>
 8009e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e5e:	f7fe fec1 	bl	8008be4 <__retarget_lock_release_recursive>
 8009e62:	e7d9      	b.n	8009e18 <_fflush_r+0xc>
 8009e64:	4b05      	ldr	r3, [pc, #20]	; (8009e7c <_fflush_r+0x70>)
 8009e66:	429c      	cmp	r4, r3
 8009e68:	d101      	bne.n	8009e6e <_fflush_r+0x62>
 8009e6a:	68ac      	ldr	r4, [r5, #8]
 8009e6c:	e7df      	b.n	8009e2e <_fflush_r+0x22>
 8009e6e:	4b04      	ldr	r3, [pc, #16]	; (8009e80 <_fflush_r+0x74>)
 8009e70:	429c      	cmp	r4, r3
 8009e72:	bf08      	it	eq
 8009e74:	68ec      	ldreq	r4, [r5, #12]
 8009e76:	e7da      	b.n	8009e2e <_fflush_r+0x22>
 8009e78:	0800d31c 	.word	0x0800d31c
 8009e7c:	0800d33c 	.word	0x0800d33c
 8009e80:	0800d2fc 	.word	0x0800d2fc

08009e84 <fiprintf>:
 8009e84:	b40e      	push	{r1, r2, r3}
 8009e86:	b503      	push	{r0, r1, lr}
 8009e88:	4601      	mov	r1, r0
 8009e8a:	ab03      	add	r3, sp, #12
 8009e8c:	4805      	ldr	r0, [pc, #20]	; (8009ea4 <fiprintf+0x20>)
 8009e8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e92:	6800      	ldr	r0, [r0, #0]
 8009e94:	9301      	str	r3, [sp, #4]
 8009e96:	f7ff fcaf 	bl	80097f8 <_vfiprintf_r>
 8009e9a:	b002      	add	sp, #8
 8009e9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ea0:	b003      	add	sp, #12
 8009ea2:	4770      	bx	lr
 8009ea4:	20000450 	.word	0x20000450

08009ea8 <_lseek_r>:
 8009ea8:	b538      	push	{r3, r4, r5, lr}
 8009eaa:	4d07      	ldr	r5, [pc, #28]	; (8009ec8 <_lseek_r+0x20>)
 8009eac:	4604      	mov	r4, r0
 8009eae:	4608      	mov	r0, r1
 8009eb0:	4611      	mov	r1, r2
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	602a      	str	r2, [r5, #0]
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	f7f8 f846 	bl	8001f48 <_lseek>
 8009ebc:	1c43      	adds	r3, r0, #1
 8009ebe:	d102      	bne.n	8009ec6 <_lseek_r+0x1e>
 8009ec0:	682b      	ldr	r3, [r5, #0]
 8009ec2:	b103      	cbz	r3, 8009ec6 <_lseek_r+0x1e>
 8009ec4:	6023      	str	r3, [r4, #0]
 8009ec6:	bd38      	pop	{r3, r4, r5, pc}
 8009ec8:	20000fb0 	.word	0x20000fb0

08009ecc <__swhatbuf_r>:
 8009ecc:	b570      	push	{r4, r5, r6, lr}
 8009ece:	460e      	mov	r6, r1
 8009ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ed4:	2900      	cmp	r1, #0
 8009ed6:	b096      	sub	sp, #88	; 0x58
 8009ed8:	4614      	mov	r4, r2
 8009eda:	461d      	mov	r5, r3
 8009edc:	da08      	bge.n	8009ef0 <__swhatbuf_r+0x24>
 8009ede:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	602a      	str	r2, [r5, #0]
 8009ee6:	061a      	lsls	r2, r3, #24
 8009ee8:	d410      	bmi.n	8009f0c <__swhatbuf_r+0x40>
 8009eea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009eee:	e00e      	b.n	8009f0e <__swhatbuf_r+0x42>
 8009ef0:	466a      	mov	r2, sp
 8009ef2:	f000 f8c5 	bl	800a080 <_fstat_r>
 8009ef6:	2800      	cmp	r0, #0
 8009ef8:	dbf1      	blt.n	8009ede <__swhatbuf_r+0x12>
 8009efa:	9a01      	ldr	r2, [sp, #4]
 8009efc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009f00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009f04:	425a      	negs	r2, r3
 8009f06:	415a      	adcs	r2, r3
 8009f08:	602a      	str	r2, [r5, #0]
 8009f0a:	e7ee      	b.n	8009eea <__swhatbuf_r+0x1e>
 8009f0c:	2340      	movs	r3, #64	; 0x40
 8009f0e:	2000      	movs	r0, #0
 8009f10:	6023      	str	r3, [r4, #0]
 8009f12:	b016      	add	sp, #88	; 0x58
 8009f14:	bd70      	pop	{r4, r5, r6, pc}
	...

08009f18 <__smakebuf_r>:
 8009f18:	898b      	ldrh	r3, [r1, #12]
 8009f1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f1c:	079d      	lsls	r5, r3, #30
 8009f1e:	4606      	mov	r6, r0
 8009f20:	460c      	mov	r4, r1
 8009f22:	d507      	bpl.n	8009f34 <__smakebuf_r+0x1c>
 8009f24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f28:	6023      	str	r3, [r4, #0]
 8009f2a:	6123      	str	r3, [r4, #16]
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	6163      	str	r3, [r4, #20]
 8009f30:	b002      	add	sp, #8
 8009f32:	bd70      	pop	{r4, r5, r6, pc}
 8009f34:	ab01      	add	r3, sp, #4
 8009f36:	466a      	mov	r2, sp
 8009f38:	f7ff ffc8 	bl	8009ecc <__swhatbuf_r>
 8009f3c:	9900      	ldr	r1, [sp, #0]
 8009f3e:	4605      	mov	r5, r0
 8009f40:	4630      	mov	r0, r6
 8009f42:	f7ff fa5f 	bl	8009404 <_malloc_r>
 8009f46:	b948      	cbnz	r0, 8009f5c <__smakebuf_r+0x44>
 8009f48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f4c:	059a      	lsls	r2, r3, #22
 8009f4e:	d4ef      	bmi.n	8009f30 <__smakebuf_r+0x18>
 8009f50:	f023 0303 	bic.w	r3, r3, #3
 8009f54:	f043 0302 	orr.w	r3, r3, #2
 8009f58:	81a3      	strh	r3, [r4, #12]
 8009f5a:	e7e3      	b.n	8009f24 <__smakebuf_r+0xc>
 8009f5c:	4b0d      	ldr	r3, [pc, #52]	; (8009f94 <__smakebuf_r+0x7c>)
 8009f5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009f60:	89a3      	ldrh	r3, [r4, #12]
 8009f62:	6020      	str	r0, [r4, #0]
 8009f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f68:	81a3      	strh	r3, [r4, #12]
 8009f6a:	9b00      	ldr	r3, [sp, #0]
 8009f6c:	6163      	str	r3, [r4, #20]
 8009f6e:	9b01      	ldr	r3, [sp, #4]
 8009f70:	6120      	str	r0, [r4, #16]
 8009f72:	b15b      	cbz	r3, 8009f8c <__smakebuf_r+0x74>
 8009f74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f78:	4630      	mov	r0, r6
 8009f7a:	f000 f893 	bl	800a0a4 <_isatty_r>
 8009f7e:	b128      	cbz	r0, 8009f8c <__smakebuf_r+0x74>
 8009f80:	89a3      	ldrh	r3, [r4, #12]
 8009f82:	f023 0303 	bic.w	r3, r3, #3
 8009f86:	f043 0301 	orr.w	r3, r3, #1
 8009f8a:	81a3      	strh	r3, [r4, #12]
 8009f8c:	89a0      	ldrh	r0, [r4, #12]
 8009f8e:	4305      	orrs	r5, r0
 8009f90:	81a5      	strh	r5, [r4, #12]
 8009f92:	e7cd      	b.n	8009f30 <__smakebuf_r+0x18>
 8009f94:	08008a35 	.word	0x08008a35

08009f98 <__ascii_mbtowc>:
 8009f98:	b082      	sub	sp, #8
 8009f9a:	b901      	cbnz	r1, 8009f9e <__ascii_mbtowc+0x6>
 8009f9c:	a901      	add	r1, sp, #4
 8009f9e:	b142      	cbz	r2, 8009fb2 <__ascii_mbtowc+0x1a>
 8009fa0:	b14b      	cbz	r3, 8009fb6 <__ascii_mbtowc+0x1e>
 8009fa2:	7813      	ldrb	r3, [r2, #0]
 8009fa4:	600b      	str	r3, [r1, #0]
 8009fa6:	7812      	ldrb	r2, [r2, #0]
 8009fa8:	1e10      	subs	r0, r2, #0
 8009faa:	bf18      	it	ne
 8009fac:	2001      	movne	r0, #1
 8009fae:	b002      	add	sp, #8
 8009fb0:	4770      	bx	lr
 8009fb2:	4610      	mov	r0, r2
 8009fb4:	e7fb      	b.n	8009fae <__ascii_mbtowc+0x16>
 8009fb6:	f06f 0001 	mvn.w	r0, #1
 8009fba:	e7f8      	b.n	8009fae <__ascii_mbtowc+0x16>

08009fbc <__malloc_lock>:
 8009fbc:	4801      	ldr	r0, [pc, #4]	; (8009fc4 <__malloc_lock+0x8>)
 8009fbe:	f7fe be10 	b.w	8008be2 <__retarget_lock_acquire_recursive>
 8009fc2:	bf00      	nop
 8009fc4:	20000fa2 	.word	0x20000fa2

08009fc8 <__malloc_unlock>:
 8009fc8:	4801      	ldr	r0, [pc, #4]	; (8009fd0 <__malloc_unlock+0x8>)
 8009fca:	f7fe be0b 	b.w	8008be4 <__retarget_lock_release_recursive>
 8009fce:	bf00      	nop
 8009fd0:	20000fa2 	.word	0x20000fa2

08009fd4 <_realloc_r>:
 8009fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fd8:	4680      	mov	r8, r0
 8009fda:	4614      	mov	r4, r2
 8009fdc:	460e      	mov	r6, r1
 8009fde:	b921      	cbnz	r1, 8009fea <_realloc_r+0x16>
 8009fe0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fe4:	4611      	mov	r1, r2
 8009fe6:	f7ff ba0d 	b.w	8009404 <_malloc_r>
 8009fea:	b92a      	cbnz	r2, 8009ff8 <_realloc_r+0x24>
 8009fec:	f7ff f99e 	bl	800932c <_free_r>
 8009ff0:	4625      	mov	r5, r4
 8009ff2:	4628      	mov	r0, r5
 8009ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ff8:	f000 f864 	bl	800a0c4 <_malloc_usable_size_r>
 8009ffc:	4284      	cmp	r4, r0
 8009ffe:	4607      	mov	r7, r0
 800a000:	d802      	bhi.n	800a008 <_realloc_r+0x34>
 800a002:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a006:	d812      	bhi.n	800a02e <_realloc_r+0x5a>
 800a008:	4621      	mov	r1, r4
 800a00a:	4640      	mov	r0, r8
 800a00c:	f7ff f9fa 	bl	8009404 <_malloc_r>
 800a010:	4605      	mov	r5, r0
 800a012:	2800      	cmp	r0, #0
 800a014:	d0ed      	beq.n	8009ff2 <_realloc_r+0x1e>
 800a016:	42bc      	cmp	r4, r7
 800a018:	4622      	mov	r2, r4
 800a01a:	4631      	mov	r1, r6
 800a01c:	bf28      	it	cs
 800a01e:	463a      	movcs	r2, r7
 800a020:	f7fd f996 	bl	8007350 <memcpy>
 800a024:	4631      	mov	r1, r6
 800a026:	4640      	mov	r0, r8
 800a028:	f7ff f980 	bl	800932c <_free_r>
 800a02c:	e7e1      	b.n	8009ff2 <_realloc_r+0x1e>
 800a02e:	4635      	mov	r5, r6
 800a030:	e7df      	b.n	8009ff2 <_realloc_r+0x1e>
	...

0800a034 <_read_r>:
 800a034:	b538      	push	{r3, r4, r5, lr}
 800a036:	4d07      	ldr	r5, [pc, #28]	; (800a054 <_read_r+0x20>)
 800a038:	4604      	mov	r4, r0
 800a03a:	4608      	mov	r0, r1
 800a03c:	4611      	mov	r1, r2
 800a03e:	2200      	movs	r2, #0
 800a040:	602a      	str	r2, [r5, #0]
 800a042:	461a      	mov	r2, r3
 800a044:	f7f7 ff20 	bl	8001e88 <_read>
 800a048:	1c43      	adds	r3, r0, #1
 800a04a:	d102      	bne.n	800a052 <_read_r+0x1e>
 800a04c:	682b      	ldr	r3, [r5, #0]
 800a04e:	b103      	cbz	r3, 800a052 <_read_r+0x1e>
 800a050:	6023      	str	r3, [r4, #0]
 800a052:	bd38      	pop	{r3, r4, r5, pc}
 800a054:	20000fb0 	.word	0x20000fb0

0800a058 <__ascii_wctomb>:
 800a058:	b149      	cbz	r1, 800a06e <__ascii_wctomb+0x16>
 800a05a:	2aff      	cmp	r2, #255	; 0xff
 800a05c:	bf85      	ittet	hi
 800a05e:	238a      	movhi	r3, #138	; 0x8a
 800a060:	6003      	strhi	r3, [r0, #0]
 800a062:	700a      	strbls	r2, [r1, #0]
 800a064:	f04f 30ff 	movhi.w	r0, #4294967295
 800a068:	bf98      	it	ls
 800a06a:	2001      	movls	r0, #1
 800a06c:	4770      	bx	lr
 800a06e:	4608      	mov	r0, r1
 800a070:	4770      	bx	lr

0800a072 <abort>:
 800a072:	b508      	push	{r3, lr}
 800a074:	2006      	movs	r0, #6
 800a076:	f000 f855 	bl	800a124 <raise>
 800a07a:	2001      	movs	r0, #1
 800a07c:	f7f7 fefa 	bl	8001e74 <_exit>

0800a080 <_fstat_r>:
 800a080:	b538      	push	{r3, r4, r5, lr}
 800a082:	4d07      	ldr	r5, [pc, #28]	; (800a0a0 <_fstat_r+0x20>)
 800a084:	2300      	movs	r3, #0
 800a086:	4604      	mov	r4, r0
 800a088:	4608      	mov	r0, r1
 800a08a:	4611      	mov	r1, r2
 800a08c:	602b      	str	r3, [r5, #0]
 800a08e:	f7f7 ff40 	bl	8001f12 <_fstat>
 800a092:	1c43      	adds	r3, r0, #1
 800a094:	d102      	bne.n	800a09c <_fstat_r+0x1c>
 800a096:	682b      	ldr	r3, [r5, #0]
 800a098:	b103      	cbz	r3, 800a09c <_fstat_r+0x1c>
 800a09a:	6023      	str	r3, [r4, #0]
 800a09c:	bd38      	pop	{r3, r4, r5, pc}
 800a09e:	bf00      	nop
 800a0a0:	20000fb0 	.word	0x20000fb0

0800a0a4 <_isatty_r>:
 800a0a4:	b538      	push	{r3, r4, r5, lr}
 800a0a6:	4d06      	ldr	r5, [pc, #24]	; (800a0c0 <_isatty_r+0x1c>)
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	4604      	mov	r4, r0
 800a0ac:	4608      	mov	r0, r1
 800a0ae:	602b      	str	r3, [r5, #0]
 800a0b0:	f7f7 ff3f 	bl	8001f32 <_isatty>
 800a0b4:	1c43      	adds	r3, r0, #1
 800a0b6:	d102      	bne.n	800a0be <_isatty_r+0x1a>
 800a0b8:	682b      	ldr	r3, [r5, #0]
 800a0ba:	b103      	cbz	r3, 800a0be <_isatty_r+0x1a>
 800a0bc:	6023      	str	r3, [r4, #0]
 800a0be:	bd38      	pop	{r3, r4, r5, pc}
 800a0c0:	20000fb0 	.word	0x20000fb0

0800a0c4 <_malloc_usable_size_r>:
 800a0c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0c8:	1f18      	subs	r0, r3, #4
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	bfbc      	itt	lt
 800a0ce:	580b      	ldrlt	r3, [r1, r0]
 800a0d0:	18c0      	addlt	r0, r0, r3
 800a0d2:	4770      	bx	lr

0800a0d4 <_raise_r>:
 800a0d4:	291f      	cmp	r1, #31
 800a0d6:	b538      	push	{r3, r4, r5, lr}
 800a0d8:	4604      	mov	r4, r0
 800a0da:	460d      	mov	r5, r1
 800a0dc:	d904      	bls.n	800a0e8 <_raise_r+0x14>
 800a0de:	2316      	movs	r3, #22
 800a0e0:	6003      	str	r3, [r0, #0]
 800a0e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e6:	bd38      	pop	{r3, r4, r5, pc}
 800a0e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a0ea:	b112      	cbz	r2, 800a0f2 <_raise_r+0x1e>
 800a0ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0f0:	b94b      	cbnz	r3, 800a106 <_raise_r+0x32>
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	f000 f830 	bl	800a158 <_getpid_r>
 800a0f8:	462a      	mov	r2, r5
 800a0fa:	4601      	mov	r1, r0
 800a0fc:	4620      	mov	r0, r4
 800a0fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a102:	f000 b817 	b.w	800a134 <_kill_r>
 800a106:	2b01      	cmp	r3, #1
 800a108:	d00a      	beq.n	800a120 <_raise_r+0x4c>
 800a10a:	1c59      	adds	r1, r3, #1
 800a10c:	d103      	bne.n	800a116 <_raise_r+0x42>
 800a10e:	2316      	movs	r3, #22
 800a110:	6003      	str	r3, [r0, #0]
 800a112:	2001      	movs	r0, #1
 800a114:	e7e7      	b.n	800a0e6 <_raise_r+0x12>
 800a116:	2400      	movs	r4, #0
 800a118:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a11c:	4628      	mov	r0, r5
 800a11e:	4798      	blx	r3
 800a120:	2000      	movs	r0, #0
 800a122:	e7e0      	b.n	800a0e6 <_raise_r+0x12>

0800a124 <raise>:
 800a124:	4b02      	ldr	r3, [pc, #8]	; (800a130 <raise+0xc>)
 800a126:	4601      	mov	r1, r0
 800a128:	6818      	ldr	r0, [r3, #0]
 800a12a:	f7ff bfd3 	b.w	800a0d4 <_raise_r>
 800a12e:	bf00      	nop
 800a130:	20000450 	.word	0x20000450

0800a134 <_kill_r>:
 800a134:	b538      	push	{r3, r4, r5, lr}
 800a136:	4d07      	ldr	r5, [pc, #28]	; (800a154 <_kill_r+0x20>)
 800a138:	2300      	movs	r3, #0
 800a13a:	4604      	mov	r4, r0
 800a13c:	4608      	mov	r0, r1
 800a13e:	4611      	mov	r1, r2
 800a140:	602b      	str	r3, [r5, #0]
 800a142:	f7f7 fe87 	bl	8001e54 <_kill>
 800a146:	1c43      	adds	r3, r0, #1
 800a148:	d102      	bne.n	800a150 <_kill_r+0x1c>
 800a14a:	682b      	ldr	r3, [r5, #0]
 800a14c:	b103      	cbz	r3, 800a150 <_kill_r+0x1c>
 800a14e:	6023      	str	r3, [r4, #0]
 800a150:	bd38      	pop	{r3, r4, r5, pc}
 800a152:	bf00      	nop
 800a154:	20000fb0 	.word	0x20000fb0

0800a158 <_getpid_r>:
 800a158:	f7f7 be74 	b.w	8001e44 <_getpid>
 800a15c:	0000      	movs	r0, r0
	...

0800a160 <ceil>:
 800a160:	ec51 0b10 	vmov	r0, r1, d0
 800a164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a168:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a16c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a170:	2e13      	cmp	r6, #19
 800a172:	ee10 5a10 	vmov	r5, s0
 800a176:	ee10 8a10 	vmov	r8, s0
 800a17a:	460c      	mov	r4, r1
 800a17c:	dc30      	bgt.n	800a1e0 <ceil+0x80>
 800a17e:	2e00      	cmp	r6, #0
 800a180:	da12      	bge.n	800a1a8 <ceil+0x48>
 800a182:	a335      	add	r3, pc, #212	; (adr r3, 800a258 <ceil+0xf8>)
 800a184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a188:	f7f6 f888 	bl	800029c <__adddf3>
 800a18c:	2200      	movs	r2, #0
 800a18e:	2300      	movs	r3, #0
 800a190:	f7f6 fcca 	bl	8000b28 <__aeabi_dcmpgt>
 800a194:	b128      	cbz	r0, 800a1a2 <ceil+0x42>
 800a196:	2c00      	cmp	r4, #0
 800a198:	db55      	blt.n	800a246 <ceil+0xe6>
 800a19a:	432c      	orrs	r4, r5
 800a19c:	d057      	beq.n	800a24e <ceil+0xee>
 800a19e:	4c30      	ldr	r4, [pc, #192]	; (800a260 <ceil+0x100>)
 800a1a0:	2500      	movs	r5, #0
 800a1a2:	4621      	mov	r1, r4
 800a1a4:	4628      	mov	r0, r5
 800a1a6:	e025      	b.n	800a1f4 <ceil+0x94>
 800a1a8:	4f2e      	ldr	r7, [pc, #184]	; (800a264 <ceil+0x104>)
 800a1aa:	4137      	asrs	r7, r6
 800a1ac:	ea01 0307 	and.w	r3, r1, r7
 800a1b0:	4303      	orrs	r3, r0
 800a1b2:	d01f      	beq.n	800a1f4 <ceil+0x94>
 800a1b4:	a328      	add	r3, pc, #160	; (adr r3, 800a258 <ceil+0xf8>)
 800a1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ba:	f7f6 f86f 	bl	800029c <__adddf3>
 800a1be:	2200      	movs	r2, #0
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	f7f6 fcb1 	bl	8000b28 <__aeabi_dcmpgt>
 800a1c6:	2800      	cmp	r0, #0
 800a1c8:	d0eb      	beq.n	800a1a2 <ceil+0x42>
 800a1ca:	2c00      	cmp	r4, #0
 800a1cc:	bfc2      	ittt	gt
 800a1ce:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800a1d2:	fa43 f606 	asrgt.w	r6, r3, r6
 800a1d6:	19a4      	addgt	r4, r4, r6
 800a1d8:	ea24 0407 	bic.w	r4, r4, r7
 800a1dc:	2500      	movs	r5, #0
 800a1de:	e7e0      	b.n	800a1a2 <ceil+0x42>
 800a1e0:	2e33      	cmp	r6, #51	; 0x33
 800a1e2:	dd0b      	ble.n	800a1fc <ceil+0x9c>
 800a1e4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a1e8:	d104      	bne.n	800a1f4 <ceil+0x94>
 800a1ea:	ee10 2a10 	vmov	r2, s0
 800a1ee:	460b      	mov	r3, r1
 800a1f0:	f7f6 f854 	bl	800029c <__adddf3>
 800a1f4:	ec41 0b10 	vmov	d0, r0, r1
 800a1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1fc:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a200:	f04f 33ff 	mov.w	r3, #4294967295
 800a204:	fa23 f707 	lsr.w	r7, r3, r7
 800a208:	4207      	tst	r7, r0
 800a20a:	d0f3      	beq.n	800a1f4 <ceil+0x94>
 800a20c:	a312      	add	r3, pc, #72	; (adr r3, 800a258 <ceil+0xf8>)
 800a20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a212:	f7f6 f843 	bl	800029c <__adddf3>
 800a216:	2200      	movs	r2, #0
 800a218:	2300      	movs	r3, #0
 800a21a:	f7f6 fc85 	bl	8000b28 <__aeabi_dcmpgt>
 800a21e:	2800      	cmp	r0, #0
 800a220:	d0bf      	beq.n	800a1a2 <ceil+0x42>
 800a222:	2c00      	cmp	r4, #0
 800a224:	dd02      	ble.n	800a22c <ceil+0xcc>
 800a226:	2e14      	cmp	r6, #20
 800a228:	d103      	bne.n	800a232 <ceil+0xd2>
 800a22a:	3401      	adds	r4, #1
 800a22c:	ea25 0507 	bic.w	r5, r5, r7
 800a230:	e7b7      	b.n	800a1a2 <ceil+0x42>
 800a232:	2301      	movs	r3, #1
 800a234:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a238:	fa03 f606 	lsl.w	r6, r3, r6
 800a23c:	4435      	add	r5, r6
 800a23e:	4545      	cmp	r5, r8
 800a240:	bf38      	it	cc
 800a242:	18e4      	addcc	r4, r4, r3
 800a244:	e7f2      	b.n	800a22c <ceil+0xcc>
 800a246:	2500      	movs	r5, #0
 800a248:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a24c:	e7a9      	b.n	800a1a2 <ceil+0x42>
 800a24e:	4625      	mov	r5, r4
 800a250:	e7a7      	b.n	800a1a2 <ceil+0x42>
 800a252:	bf00      	nop
 800a254:	f3af 8000 	nop.w
 800a258:	8800759c 	.word	0x8800759c
 800a25c:	7e37e43c 	.word	0x7e37e43c
 800a260:	3ff00000 	.word	0x3ff00000
 800a264:	000fffff 	.word	0x000fffff

0800a268 <floor>:
 800a268:	ec51 0b10 	vmov	r0, r1, d0
 800a26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a270:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a274:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a278:	2e13      	cmp	r6, #19
 800a27a:	ee10 5a10 	vmov	r5, s0
 800a27e:	ee10 8a10 	vmov	r8, s0
 800a282:	460c      	mov	r4, r1
 800a284:	dc32      	bgt.n	800a2ec <floor+0x84>
 800a286:	2e00      	cmp	r6, #0
 800a288:	da14      	bge.n	800a2b4 <floor+0x4c>
 800a28a:	a333      	add	r3, pc, #204	; (adr r3, 800a358 <floor+0xf0>)
 800a28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a290:	f7f6 f804 	bl	800029c <__adddf3>
 800a294:	2200      	movs	r2, #0
 800a296:	2300      	movs	r3, #0
 800a298:	f7f6 fc46 	bl	8000b28 <__aeabi_dcmpgt>
 800a29c:	b138      	cbz	r0, 800a2ae <floor+0x46>
 800a29e:	2c00      	cmp	r4, #0
 800a2a0:	da57      	bge.n	800a352 <floor+0xea>
 800a2a2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a2a6:	431d      	orrs	r5, r3
 800a2a8:	d001      	beq.n	800a2ae <floor+0x46>
 800a2aa:	4c2d      	ldr	r4, [pc, #180]	; (800a360 <floor+0xf8>)
 800a2ac:	2500      	movs	r5, #0
 800a2ae:	4621      	mov	r1, r4
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	e025      	b.n	800a300 <floor+0x98>
 800a2b4:	4f2b      	ldr	r7, [pc, #172]	; (800a364 <floor+0xfc>)
 800a2b6:	4137      	asrs	r7, r6
 800a2b8:	ea01 0307 	and.w	r3, r1, r7
 800a2bc:	4303      	orrs	r3, r0
 800a2be:	d01f      	beq.n	800a300 <floor+0x98>
 800a2c0:	a325      	add	r3, pc, #148	; (adr r3, 800a358 <floor+0xf0>)
 800a2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c6:	f7f5 ffe9 	bl	800029c <__adddf3>
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	f7f6 fc2b 	bl	8000b28 <__aeabi_dcmpgt>
 800a2d2:	2800      	cmp	r0, #0
 800a2d4:	d0eb      	beq.n	800a2ae <floor+0x46>
 800a2d6:	2c00      	cmp	r4, #0
 800a2d8:	bfbe      	ittt	lt
 800a2da:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a2de:	fa43 f606 	asrlt.w	r6, r3, r6
 800a2e2:	19a4      	addlt	r4, r4, r6
 800a2e4:	ea24 0407 	bic.w	r4, r4, r7
 800a2e8:	2500      	movs	r5, #0
 800a2ea:	e7e0      	b.n	800a2ae <floor+0x46>
 800a2ec:	2e33      	cmp	r6, #51	; 0x33
 800a2ee:	dd0b      	ble.n	800a308 <floor+0xa0>
 800a2f0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a2f4:	d104      	bne.n	800a300 <floor+0x98>
 800a2f6:	ee10 2a10 	vmov	r2, s0
 800a2fa:	460b      	mov	r3, r1
 800a2fc:	f7f5 ffce 	bl	800029c <__adddf3>
 800a300:	ec41 0b10 	vmov	d0, r0, r1
 800a304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a308:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a30c:	f04f 33ff 	mov.w	r3, #4294967295
 800a310:	fa23 f707 	lsr.w	r7, r3, r7
 800a314:	4207      	tst	r7, r0
 800a316:	d0f3      	beq.n	800a300 <floor+0x98>
 800a318:	a30f      	add	r3, pc, #60	; (adr r3, 800a358 <floor+0xf0>)
 800a31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31e:	f7f5 ffbd 	bl	800029c <__adddf3>
 800a322:	2200      	movs	r2, #0
 800a324:	2300      	movs	r3, #0
 800a326:	f7f6 fbff 	bl	8000b28 <__aeabi_dcmpgt>
 800a32a:	2800      	cmp	r0, #0
 800a32c:	d0bf      	beq.n	800a2ae <floor+0x46>
 800a32e:	2c00      	cmp	r4, #0
 800a330:	da02      	bge.n	800a338 <floor+0xd0>
 800a332:	2e14      	cmp	r6, #20
 800a334:	d103      	bne.n	800a33e <floor+0xd6>
 800a336:	3401      	adds	r4, #1
 800a338:	ea25 0507 	bic.w	r5, r5, r7
 800a33c:	e7b7      	b.n	800a2ae <floor+0x46>
 800a33e:	2301      	movs	r3, #1
 800a340:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a344:	fa03 f606 	lsl.w	r6, r3, r6
 800a348:	4435      	add	r5, r6
 800a34a:	4545      	cmp	r5, r8
 800a34c:	bf38      	it	cc
 800a34e:	18e4      	addcc	r4, r4, r3
 800a350:	e7f2      	b.n	800a338 <floor+0xd0>
 800a352:	2500      	movs	r5, #0
 800a354:	462c      	mov	r4, r5
 800a356:	e7aa      	b.n	800a2ae <floor+0x46>
 800a358:	8800759c 	.word	0x8800759c
 800a35c:	7e37e43c 	.word	0x7e37e43c
 800a360:	bff00000 	.word	0xbff00000
 800a364:	000fffff 	.word	0x000fffff

0800a368 <_init>:
 800a368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a36a:	bf00      	nop
 800a36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a36e:	bc08      	pop	{r3}
 800a370:	469e      	mov	lr, r3
 800a372:	4770      	bx	lr

0800a374 <_fini>:
 800a374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a376:	bf00      	nop
 800a378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a37a:	bc08      	pop	{r3}
 800a37c:	469e      	mov	lr, r3
 800a37e:	4770      	bx	lr
