
SW_Mini_Fridge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003894  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000026e8  08003a28  08003a28  00013a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006110  08006110  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08006110  08006110  00016110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006118  08006118  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006118  08006118  00016118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800611c  0800611c  0001611c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08006120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000954  20000024  08006144  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000978  08006144  00020978  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011935  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025e1  00000000  00000000  00031989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00033f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  00034f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016972  00000000  00000000  00035da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013322  00000000  00000000  0004c71a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f780  00000000  00000000  0005fa3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef1bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041f8  00000000  00000000  000ef20c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000024 	.word	0x20000024
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003a10 	.word	0x08003a10

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000028 	.word	0x20000028
 80001d0:	08003a10 	.word	0x08003a10

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 030c 	add.w	r3, r7, #12
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	60bb      	str	r3, [r7, #8]
 80004f2:	4b26      	ldr	r3, [pc, #152]	; (800058c <MX_GPIO_Init+0xb4>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a25      	ldr	r2, [pc, #148]	; (800058c <MX_GPIO_Init+0xb4>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
 80004fe:	4b23      	ldr	r3, [pc, #140]	; (800058c <MX_GPIO_Init+0xb4>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	607b      	str	r3, [r7, #4]
 800050e:	4b1f      	ldr	r3, [pc, #124]	; (800058c <MX_GPIO_Init+0xb4>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	4a1e      	ldr	r2, [pc, #120]	; (800058c <MX_GPIO_Init+0xb4>)
 8000514:	f043 0302 	orr.w	r3, r3, #2
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
 800051a:	4b1c      	ldr	r3, [pc, #112]	; (800058c <MX_GPIO_Init+0xb4>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0302 	and.w	r3, r3, #2
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	2138      	movs	r1, #56	; 0x38
 800052a:	4819      	ldr	r0, [pc, #100]	; (8000590 <MX_GPIO_Init+0xb8>)
 800052c:	f000 feee 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000530:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000534:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000536:	2300      	movs	r3, #0
 8000538:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800053e:	f107 030c 	add.w	r3, r7, #12
 8000542:	4619      	mov	r1, r3
 8000544:	4812      	ldr	r0, [pc, #72]	; (8000590 <MX_GPIO_Init+0xb8>)
 8000546:	f000 fd5d 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800054a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800054e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000550:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000554:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055a:	f107 030c 	add.w	r3, r7, #12
 800055e:	4619      	mov	r1, r3
 8000560:	480c      	ldr	r0, [pc, #48]	; (8000594 <MX_GPIO_Init+0xbc>)
 8000562:	f000 fd4f 	bl	8001004 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000566:	2338      	movs	r3, #56	; 0x38
 8000568:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056a:	2301      	movs	r3, #1
 800056c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	2300      	movs	r3, #0
 8000570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000572:	2300      	movs	r3, #0
 8000574:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000576:	f107 030c 	add.w	r3, r7, #12
 800057a:	4619      	mov	r1, r3
 800057c:	4804      	ldr	r0, [pc, #16]	; (8000590 <MX_GPIO_Init+0xb8>)
 800057e:	f000 fd41 	bl	8001004 <HAL_GPIO_Init>

}
 8000582:	bf00      	nop
 8000584:	3720      	adds	r7, #32
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40023800 	.word	0x40023800
 8000590:	40020400 	.word	0x40020400
 8000594:	40020000 	.word	0x40020000

08000598 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <MX_I2C1_Init+0x50>)
 800059e:	4a13      	ldr	r2, [pc, #76]	; (80005ec <MX_I2C1_Init+0x54>)
 80005a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005a4:	4a12      	ldr	r2, [pc, #72]	; (80005f0 <MX_I2C1_Init+0x58>)
 80005a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005a8:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005bc:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005be:	2200      	movs	r2, #0
 80005c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005c2:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005d4:	4804      	ldr	r0, [pc, #16]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005d6:	f000 feb3 	bl	8001340 <HAL_I2C_Init>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005e0:	f000 f952 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000040 	.word	0x20000040
 80005ec:	40005400 	.word	0x40005400
 80005f0:	000186a0 	.word	0x000186a0

080005f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	; 0x28
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a19      	ldr	r2, [pc, #100]	; (8000678 <HAL_I2C_MspInit+0x84>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d12b      	bne.n	800066e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	613b      	str	r3, [r7, #16]
 800061a:	4b18      	ldr	r3, [pc, #96]	; (800067c <HAL_I2C_MspInit+0x88>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a17      	ldr	r2, [pc, #92]	; (800067c <HAL_I2C_MspInit+0x88>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <HAL_I2C_MspInit+0x88>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	613b      	str	r3, [r7, #16]
 8000630:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000632:	23c0      	movs	r3, #192	; 0xc0
 8000634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000636:	2312      	movs	r3, #18
 8000638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800063e:	2303      	movs	r3, #3
 8000640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000642:	2304      	movs	r3, #4
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4619      	mov	r1, r3
 800064c:	480c      	ldr	r0, [pc, #48]	; (8000680 <HAL_I2C_MspInit+0x8c>)
 800064e:	f000 fcd9 	bl	8001004 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <HAL_I2C_MspInit+0x88>)
 8000658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065a:	4a08      	ldr	r2, [pc, #32]	; (800067c <HAL_I2C_MspInit+0x88>)
 800065c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000660:	6413      	str	r3, [r2, #64]	; 0x40
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <HAL_I2C_MspInit+0x88>)
 8000664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800066e:	bf00      	nop
 8000670:	3728      	adds	r7, #40	; 0x28
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40005400 	.word	0x40005400
 800067c:	40023800 	.word	0x40023800
 8000680:	40020400 	.word	0x40020400

08000684 <wait>:
#include "usart.h"
#include "gpio.h"
#include "ssd1306.h"


void wait(uint32_t time){
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
uint32_t target = uwTick + time;
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <wait+0x2c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	4413      	add	r3, r2
 8000694:	60fb      	str	r3, [r7, #12]
while(uwTick != target);
 8000696:	bf00      	nop
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <wait+0x2c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	68fa      	ldr	r2, [r7, #12]
 800069e:	429a      	cmp	r2, r3
 80006a0:	d1fa      	bne.n	8000698 <wait+0x14>
};
 80006a2:	bf00      	nop
 80006a4:	bf00      	nop
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	2000016c 	.word	0x2000016c

080006b4 <main>:


void SystemClock_Config(void);

int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af02      	add	r7, sp, #8

  HAL_Init();
 80006ba:	f000 fafb 	bl	8000cb4 <HAL_Init>


  SystemClock_Config();
 80006be:	f000 f883 	bl	80007c8 <SystemClock_Config>


  MX_GPIO_Init();
 80006c2:	f7ff ff09 	bl	80004d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006c6:	f7ff ff67 	bl	8000598 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80006ca:	f000 fa57 	bl	8000b7c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80006ce:	f000 f973 	bl	80009b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80006d2:	f000 f9bf 	bl	8000a54 <MX_TIM4_Init>

  HAL_TIM_Base_Start_IT(&htim3);
 80006d6:	4836      	ldr	r0, [pc, #216]	; (80007b0 <main+0xfc>)
 80006d8:	f001 ff36 	bl	8002548 <HAL_TIM_Base_Start_IT>
  ssd1306_Init();
 80006dc:	f002 fe30 	bl	8003340 <ssd1306_Init>
  ssd1306_Fill(0);
 80006e0:	2000      	movs	r0, #0
 80006e2:	f002 feab 	bl	800343c <ssd1306_Fill>
  ssd1306_UpdateScreen();
 80006e6:	f002 fecd 	bl	8003484 <ssd1306_UpdateScreen>

  bool flag = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	73fb      	strb	r3, [r7, #15]
  uint8_t c = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	73bb      	strb	r3, [r7, #14]
  char b[] = "30.0C";
 80006f2:	4a30      	ldr	r2, [pc, #192]	; (80007b4 <main+0x100>)
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006fc:	6018      	str	r0, [r3, #0]
 80006fe:	3304      	adds	r3, #4
 8000700:	8019      	strh	r1, [r3, #0]
  char b2[8];
  while (1)
  {
	  wait(500);
 8000702:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000706:	f7ff ffbd 	bl	8000684 <wait>
	  c++;
 800070a:	7bbb      	ldrb	r3, [r7, #14]
 800070c:	3301      	adds	r3, #1
 800070e:	73bb      	strb	r3, [r7, #14]
	  flag = !flag;
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	2b00      	cmp	r3, #0
 8000714:	bf14      	ite	ne
 8000716:	2301      	movne	r3, #1
 8000718:	2300      	moveq	r3, #0
 800071a:	b2db      	uxtb	r3, r3
 800071c:	f083 0301 	eor.w	r3, r3, #1
 8000720:	b2db      	uxtb	r3, r3
 8000722:	73fb      	strb	r3, [r7, #15]
 8000724:	7bfb      	ldrb	r3, [r7, #15]
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	73fb      	strb	r3, [r7, #15]

	  ssd1306_DrawRectangle(0, 0, 16*5+5, 31, flag);
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	9300      	str	r3, [sp, #0]
 8000730:	231f      	movs	r3, #31
 8000732:	2255      	movs	r2, #85	; 0x55
 8000734:	2100      	movs	r1, #0
 8000736:	2000      	movs	r0, #0
 8000738:	f003 f87a 	bl	8003830 <ssd1306_DrawRectangle>
	  ssd1306_SetCursor(1, 1);
 800073c:	2101      	movs	r1, #1
 800073e:	2001      	movs	r0, #1
 8000740:	f002 fff2 	bl	8003728 <ssd1306_SetCursor>
	  ssd1306_WriteString(b, Font_16x26,  1);
 8000744:	4a1c      	ldr	r2, [pc, #112]	; (80007b8 <main+0x104>)
 8000746:	f107 0008 	add.w	r0, r7, #8
 800074a:	2301      	movs	r3, #1
 800074c:	ca06      	ldmia	r2, {r1, r2}
 800074e:	f002 ffc5 	bl	80036dc <ssd1306_WriteString>


	  ssd1306_SetCursor(0,32);
 8000752:	2120      	movs	r1, #32
 8000754:	2000      	movs	r0, #0
 8000756:	f002 ffe7 	bl	8003728 <ssd1306_SetCursor>
	  ssd1306_WriteString("Thread:", Font_6x8,  1);
 800075a:	4a18      	ldr	r2, [pc, #96]	; (80007bc <main+0x108>)
 800075c:	2301      	movs	r3, #1
 800075e:	ca06      	ldmia	r2, {r1, r2}
 8000760:	4817      	ldr	r0, [pc, #92]	; (80007c0 <main+0x10c>)
 8000762:	f002 ffbb 	bl	80036dc <ssd1306_WriteString>
	  ssd1306_SetCursor(0,40);
 8000766:	2128      	movs	r1, #40	; 0x28
 8000768:	2000      	movs	r0, #0
 800076a:	f002 ffdd 	bl	8003728 <ssd1306_SetCursor>
	  itoa(c,b2,10);
 800076e:	7bbb      	ldrb	r3, [r7, #14]
 8000770:	4639      	mov	r1, r7
 8000772:	220a      	movs	r2, #10
 8000774:	4618      	mov	r0, r3
 8000776:	f003 f8ff 	bl	8003978 <itoa>
	  ssd1306_WriteString(b2, Font_11x18,  1);
 800077a:	4a12      	ldr	r2, [pc, #72]	; (80007c4 <main+0x110>)
 800077c:	4638      	mov	r0, r7
 800077e:	2301      	movs	r3, #1
 8000780:	ca06      	ldmia	r2, {r1, r2}
 8000782:	f002 ffab 	bl	80036dc <ssd1306_WriteString>
	  ssd1306_SetCursor(64,40);
 8000786:	2128      	movs	r1, #40	; 0x28
 8000788:	2040      	movs	r0, #64	; 0x40
 800078a:	f002 ffcd 	bl	8003728 <ssd1306_SetCursor>
	  itoa(getTIM3Counter(),b2,10);
 800078e:	f000 f8eb 	bl	8000968 <getTIM3Counter>
 8000792:	463b      	mov	r3, r7
 8000794:	220a      	movs	r2, #10
 8000796:	4619      	mov	r1, r3
 8000798:	f003 f8ee 	bl	8003978 <itoa>
	  ssd1306_WriteString(b2, Font_11x18,  1);
 800079c:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <main+0x110>)
 800079e:	4638      	mov	r0, r7
 80007a0:	2301      	movs	r3, #1
 80007a2:	ca06      	ldmia	r2, {r1, r2}
 80007a4:	f002 ff9a 	bl	80036dc <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 80007a8:	f002 fe6c 	bl	8003484 <ssd1306_UpdateScreen>
  {
 80007ac:	e7a9      	b.n	8000702 <main+0x4e>
 80007ae:	bf00      	nop
 80007b0:	20000098 	.word	0x20000098
 80007b4:	08003a30 	.word	0x08003a30
 80007b8:	2000001c 	.word	0x2000001c
 80007bc:	2000000c 	.word	0x2000000c
 80007c0:	08003a28 	.word	0x08003a28
 80007c4:	20000014 	.word	0x20000014

080007c8 <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b094      	sub	sp, #80	; 0x50
 80007cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	f107 0320 	add.w	r3, r7, #32
 80007d2:	2230      	movs	r2, #48	; 0x30
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f003 f8d0 	bl	800397c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	4b23      	ldr	r3, [pc, #140]	; (8000880 <SystemClock_Config+0xb8>)
 80007f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f4:	4a22      	ldr	r2, [pc, #136]	; (8000880 <SystemClock_Config+0xb8>)
 80007f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007fa:	6413      	str	r3, [r2, #64]	; 0x40
 80007fc:	4b20      	ldr	r3, [pc, #128]	; (8000880 <SystemClock_Config+0xb8>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000808:	2300      	movs	r3, #0
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <SystemClock_Config+0xbc>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000814:	4a1b      	ldr	r2, [pc, #108]	; (8000884 <SystemClock_Config+0xbc>)
 8000816:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800081a:	6013      	str	r3, [r2, #0]
 800081c:	4b19      	ldr	r3, [pc, #100]	; (8000884 <SystemClock_Config+0xbc>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000828:	2302      	movs	r3, #2
 800082a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800082c:	2301      	movs	r3, #1
 800082e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000830:	2310      	movs	r3, #16
 8000832:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000834:	2300      	movs	r3, #0
 8000836:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000838:	f107 0320 	add.w	r3, r7, #32
 800083c:	4618      	mov	r0, r3
 800083e:	f001 f9db 	bl	8001bf8 <HAL_RCC_OscConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000848:	f000 f81e 	bl	8000888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084c:	230f      	movs	r3, #15
 800084e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f001 fc3e 	bl	80020e8 <HAL_RCC_ClockConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000872:	f000 f809 	bl	8000888 <Error_Handler>
  }
}
 8000876:	bf00      	nop
 8000878:	3750      	adds	r7, #80	; 0x50
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800
 8000884:	40007000 	.word	0x40007000

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088c:	b672      	cpsid	i
}
 800088e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000890:	e7fe      	b.n	8000890 <Error_Handler+0x8>
	...

08000894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <HAL_MspInit+0x4c>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a2:	4a0f      	ldr	r2, [pc, #60]	; (80008e0 <HAL_MspInit+0x4c>)
 80008a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a8:	6453      	str	r3, [r2, #68]	; 0x44
 80008aa:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <HAL_MspInit+0x4c>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <HAL_MspInit+0x4c>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	4a08      	ldr	r2, [pc, #32]	; (80008e0 <HAL_MspInit+0x4c>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c4:	6413      	str	r3, [r2, #64]	; 0x40
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <HAL_MspInit+0x4c>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800

080008e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <NMI_Handler+0x4>

080008ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <HardFault_Handler+0x4>

080008f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <MemManage_Handler+0x4>

080008f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <BusFault_Handler+0x4>

080008fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <UsageFault_Handler+0x4>

08000902 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000930:	f000 fa12 	bl	8000d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}

08000938 <TIM3_IRQHandler>:
  * @brief This function handles TIM3 global interrupt.
  */
volatile uint32_t counter = 0;
volatile bool flag = 0;
void TIM3_IRQHandler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	counter++;
 800093c:	4b07      	ldr	r3, [pc, #28]	; (800095c <TIM3_IRQHandler+0x24>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	3301      	adds	r3, #1
 8000942:	4a06      	ldr	r2, [pc, #24]	; (800095c <TIM3_IRQHandler+0x24>)
 8000944:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000946:	2201      	movs	r2, #1
 8000948:	2108      	movs	r1, #8
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <TIM3_IRQHandler+0x28>)
 800094c:	f000 fcde 	bl	800130c <HAL_GPIO_WritePin>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <TIM3_IRQHandler+0x2c>)
 8000952:	f001 fe5b 	bl	800260c <HAL_TIM_IRQHandler>

  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000094 	.word	0x20000094
 8000960:	40020400 	.word	0x40020400
 8000964:	20000098 	.word	0x20000098

08000968 <getTIM3Counter>:

int getTIM3Counter(void){
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
	return counter;
 800096c:	4b03      	ldr	r3, [pc, #12]	; (800097c <getTIM3Counter+0x14>)
 800096e:	681b      	ldr	r3, [r3, #0]
}
 8000970:	4618      	mov	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000094 	.word	0x20000094

08000980 <TIM4_IRQHandler>:
/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0

  HAL_TIM_IRQHandler(&htim4);
 8000984:	4802      	ldr	r0, [pc, #8]	; (8000990 <TIM4_IRQHandler+0x10>)
 8000986:	f001 fe41 	bl	800260c <HAL_TIM_IRQHandler>

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200000e0 	.word	0x200000e0

08000994 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <SystemInit+0x20>)
 800099a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <SystemInit+0x20>)
 80009a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009cc:	463b      	mov	r3, r7
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009d4:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <MX_TIM3_Init+0x94>)
 80009d6:	4a1e      	ldr	r2, [pc, #120]	; (8000a50 <MX_TIM3_Init+0x98>)
 80009d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <MX_TIM3_Init+0x94>)
 80009dc:	2204      	movs	r2, #4
 80009de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e0:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_TIM3_Init+0x94>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009e6:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <MX_TIM3_Init+0x94>)
 80009e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <MX_TIM3_Init+0x94>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_TIM3_Init+0x94>)
 80009f6:	2280      	movs	r2, #128	; 0x80
 80009f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009fa:	4814      	ldr	r0, [pc, #80]	; (8000a4c <MX_TIM3_Init+0x94>)
 80009fc:	f001 fd54 	bl	80024a8 <HAL_TIM_Base_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000a06:	f7ff ff3f 	bl	8000888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a10:	f107 0308 	add.w	r3, r7, #8
 8000a14:	4619      	mov	r1, r3
 8000a16:	480d      	ldr	r0, [pc, #52]	; (8000a4c <MX_TIM3_Init+0x94>)
 8000a18:	f001 ff00 	bl	800281c <HAL_TIM_ConfigClockSource>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000a22:	f7ff ff31 	bl	8000888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a26:	2300      	movs	r3, #0
 8000a28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a2e:	463b      	mov	r3, r7
 8000a30:	4619      	mov	r1, r3
 8000a32:	4806      	ldr	r0, [pc, #24]	; (8000a4c <MX_TIM3_Init+0x94>)
 8000a34:	f002 f906 	bl	8002c44 <HAL_TIMEx_MasterConfigSynchronization>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000a3e:	f7ff ff23 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000098 	.word	0x20000098
 8000a50:	40000400 	.word	0x40000400

08000a54 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a5a:	f107 0308 	add.w	r3, r7, #8
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a68:	463b      	mov	r3, r7
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a70:	4b1d      	ldr	r3, [pc, #116]	; (8000ae8 <MX_TIM4_Init+0x94>)
 8000a72:	4a1e      	ldr	r2, [pc, #120]	; (8000aec <MX_TIM4_Init+0x98>)
 8000a74:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4;
 8000a76:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <MX_TIM4_Init+0x94>)
 8000a78:	2204      	movs	r2, #4
 8000a7a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <MX_TIM4_Init+0x94>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a82:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <MX_TIM4_Init+0x94>)
 8000a84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a88:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8a:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <MX_TIM4_Init+0x94>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a90:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <MX_TIM4_Init+0x94>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a96:	4814      	ldr	r0, [pc, #80]	; (8000ae8 <MX_TIM4_Init+0x94>)
 8000a98:	f001 fd06 	bl	80024a8 <HAL_TIM_Base_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000aa2:	f7ff fef1 	bl	8000888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aaa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000aac:	f107 0308 	add.w	r3, r7, #8
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <MX_TIM4_Init+0x94>)
 8000ab4:	f001 feb2 	bl	800281c <HAL_TIM_ConfigClockSource>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000abe:	f7ff fee3 	bl	8000888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000aca:	463b      	mov	r3, r7
 8000acc:	4619      	mov	r1, r3
 8000ace:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <MX_TIM4_Init+0x94>)
 8000ad0:	f002 f8b8 	bl	8002c44 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000ada:	f7ff fed5 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	3718      	adds	r7, #24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200000e0 	.word	0x200000e0
 8000aec:	40000800 	.word	0x40000800

08000af0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a1c      	ldr	r2, [pc, #112]	; (8000b70 <HAL_TIM_Base_MspInit+0x80>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d116      	bne.n	8000b30 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <HAL_TIM_Base_MspInit+0x84>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	4a1a      	ldr	r2, [pc, #104]	; (8000b74 <HAL_TIM_Base_MspInit+0x84>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	6413      	str	r3, [r2, #64]	; 0x40
 8000b12:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <HAL_TIM_Base_MspInit+0x84>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2100      	movs	r1, #0
 8000b22:	201d      	movs	r0, #29
 8000b24:	f000 fa37 	bl	8000f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b28:	201d      	movs	r0, #29
 8000b2a:	f000 fa50 	bl	8000fce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000b2e:	e01a      	b.n	8000b66 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a10      	ldr	r2, [pc, #64]	; (8000b78 <HAL_TIM_Base_MspInit+0x88>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d115      	bne.n	8000b66 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <HAL_TIM_Base_MspInit+0x84>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	4a0c      	ldr	r2, [pc, #48]	; (8000b74 <HAL_TIM_Base_MspInit+0x84>)
 8000b44:	f043 0304 	orr.w	r3, r3, #4
 8000b48:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <HAL_TIM_Base_MspInit+0x84>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	f003 0304 	and.w	r3, r3, #4
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2100      	movs	r1, #0
 8000b5a:	201e      	movs	r0, #30
 8000b5c:	f000 fa1b 	bl	8000f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000b60:	201e      	movs	r0, #30
 8000b62:	f000 fa34 	bl	8000fce <HAL_NVIC_EnableIRQ>
}
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40000400 	.word	0x40000400
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40000800 	.word	0x40000800

08000b7c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <MX_USART2_UART_Init+0x50>)
 8000b84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_USART2_UART_Init+0x4c>)
 8000bb4:	f002 f8c8 	bl	8002d48 <HAL_UART_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bbe:	f7ff fe63 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000128 	.word	0x20000128
 8000bcc:	40004400 	.word	0x40004400

08000bd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a19      	ldr	r2, [pc, #100]	; (8000c54 <HAL_UART_MspInit+0x84>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d12b      	bne.n	8000c4a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	4a17      	ldr	r2, [pc, #92]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c00:	6413      	str	r3, [r2, #64]	; 0x40
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a10      	ldr	r2, [pc, #64]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c2a:	230c      	movs	r3, #12
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c3a:	2307      	movs	r3, #7
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	4805      	ldr	r0, [pc, #20]	; (8000c5c <HAL_UART_MspInit+0x8c>)
 8000c46:	f000 f9dd 	bl	8001004 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	; 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40004400 	.word	0x40004400
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020000 	.word	0x40020000

08000c60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c64:	480d      	ldr	r0, [pc, #52]	; (8000c9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c66:	490e      	ldr	r1, [pc, #56]	; (8000ca0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c68:	4a0e      	ldr	r2, [pc, #56]	; (8000ca4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c6c:	e002      	b.n	8000c74 <LoopCopyDataInit>

08000c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c72:	3304      	adds	r3, #4

08000c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c78:	d3f9      	bcc.n	8000c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ca8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c7c:	4c0b      	ldr	r4, [pc, #44]	; (8000cac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c80:	e001      	b.n	8000c86 <LoopFillZerobss>

08000c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c84:	3204      	adds	r2, #4

08000c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c88:	d3fb      	bcc.n	8000c82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c8a:	f7ff fe83 	bl	8000994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c8e:	f002 fe37 	bl	8003900 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c92:	f7ff fd0f 	bl	80006b4 <main>
  bx  lr    
 8000c96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c98:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca0:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000ca4:	08006120 	.word	0x08006120
  ldr r2, =_sbss
 8000ca8:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000cac:	20000978 	.word	0x20000978

08000cb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC_IRQHandler>
	...

08000cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb8:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <HAL_Init+0x40>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	; (8000cf4 <HAL_Init+0x40>)
 8000cbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <HAL_Init+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <HAL_Init+0x40>)
 8000cca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <HAL_Init+0x40>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a07      	ldr	r2, [pc, #28]	; (8000cf4 <HAL_Init+0x40>)
 8000cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cdc:	2003      	movs	r0, #3
 8000cde:	f000 f94f 	bl	8000f80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce2:	200f      	movs	r0, #15
 8000ce4:	f000 f808 	bl	8000cf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce8:	f7ff fdd4 	bl	8000894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40023c00 	.word	0x40023c00

08000cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_InitTick+0x54>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_InitTick+0x58>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 f967 	bl	8000fea <HAL_SYSTICK_Config>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00e      	b.n	8000d44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2b0f      	cmp	r3, #15
 8000d2a:	d80a      	bhi.n	8000d42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	f000 f92f 	bl	8000f96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d38:	4a06      	ldr	r2, [pc, #24]	; (8000d54 <HAL_InitTick+0x5c>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e000      	b.n	8000d44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	20000008 	.word	0x20000008
 8000d54:	20000004 	.word	0x20000004

08000d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_IncTick+0x20>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_IncTick+0x24>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <HAL_IncTick+0x24>)
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	2000016c 	.word	0x2000016c

08000d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return uwTick;
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <HAL_GetTick+0x14>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	2000016c 	.word	0x2000016c

08000d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da0:	f7ff ffee 	bl	8000d80 <HAL_GetTick>
 8000da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db0:	d005      	beq.n	8000dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <HAL_Delay+0x44>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	461a      	mov	r2, r3
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4413      	add	r3, r2
 8000dbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dbe:	bf00      	nop
 8000dc0:	f7ff ffde 	bl	8000d80 <HAL_GetTick>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d8f7      	bhi.n	8000dc0 <HAL_Delay+0x28>
  {
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	bf00      	nop
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000008 	.word	0x20000008

08000de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e12:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	60d3      	str	r3, [r2, #12]
}
 8000e18:	bf00      	nop
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <__NVIC_GetPriorityGrouping+0x18>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	f003 0307 	and.w	r3, r3, #7
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	db0b      	blt.n	8000e6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	f003 021f 	and.w	r2, r3, #31
 8000e5c:	4907      	ldr	r1, [pc, #28]	; (8000e7c <__NVIC_EnableIRQ+0x38>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	095b      	lsrs	r3, r3, #5
 8000e64:	2001      	movs	r0, #1
 8000e66:	fa00 f202 	lsl.w	r2, r0, r2
 8000e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000e100 	.word	0xe000e100

08000e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	db0a      	blt.n	8000eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	490c      	ldr	r1, [pc, #48]	; (8000ecc <__NVIC_SetPriority+0x4c>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	0112      	lsls	r2, r2, #4
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	440b      	add	r3, r1
 8000ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea8:	e00a      	b.n	8000ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4908      	ldr	r1, [pc, #32]	; (8000ed0 <__NVIC_SetPriority+0x50>)
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	f003 030f 	and.w	r3, r3, #15
 8000eb6:	3b04      	subs	r3, #4
 8000eb8:	0112      	lsls	r2, r2, #4
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	761a      	strb	r2, [r3, #24]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000e100 	.word	0xe000e100
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	; 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f1c3 0307 	rsb	r3, r3, #7
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	bf28      	it	cs
 8000ef2:	2304      	movcs	r3, #4
 8000ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3304      	adds	r3, #4
 8000efa:	2b06      	cmp	r3, #6
 8000efc:	d902      	bls.n	8000f04 <NVIC_EncodePriority+0x30>
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3b03      	subs	r3, #3
 8000f02:	e000      	b.n	8000f06 <NVIC_EncodePriority+0x32>
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	f04f 32ff 	mov.w	r2, #4294967295
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43da      	mvns	r2, r3
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	401a      	ands	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa01 f303 	lsl.w	r3, r1, r3
 8000f26:	43d9      	mvns	r1, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	4313      	orrs	r3, r2
         );
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3724      	adds	r7, #36	; 0x24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
	...

08000f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f4c:	d301      	bcc.n	8000f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00f      	b.n	8000f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f52:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <SysTick_Config+0x40>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f5a:	210f      	movs	r1, #15
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f60:	f7ff ff8e 	bl	8000e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <SysTick_Config+0x40>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6a:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <SysTick_Config+0x40>)
 8000f6c:	2207      	movs	r2, #7
 8000f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	e000e010 	.word	0xe000e010

08000f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff ff29 	bl	8000de0 <__NVIC_SetPriorityGrouping>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b086      	sub	sp, #24
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
 8000fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa8:	f7ff ff3e 	bl	8000e28 <__NVIC_GetPriorityGrouping>
 8000fac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	68b9      	ldr	r1, [r7, #8]
 8000fb2:	6978      	ldr	r0, [r7, #20]
 8000fb4:	f7ff ff8e 	bl	8000ed4 <NVIC_EncodePriority>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ff5d 	bl	8000e80 <__NVIC_SetPriority>
}
 8000fc6:	bf00      	nop
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff31 	bl	8000e44 <__NVIC_EnableIRQ>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ffa2 	bl	8000f3c <SysTick_Config>
 8000ff8:	4603      	mov	r3, r0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	; 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
 800101e:	e159      	b.n	80012d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001020:	2201      	movs	r2, #1
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	429a      	cmp	r2, r3
 800103a:	f040 8148 	bne.w	80012ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	2b01      	cmp	r3, #1
 8001048:	d005      	beq.n	8001056 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001052:	2b02      	cmp	r3, #2
 8001054:	d130      	bne.n	80010b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	2203      	movs	r2, #3
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	68da      	ldr	r2, [r3, #12]
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800108c:	2201      	movs	r2, #1
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	091b      	lsrs	r3, r3, #4
 80010a2:	f003 0201 	and.w	r2, r3, #1
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d017      	beq.n	80010f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d123      	bne.n	8001148 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	08da      	lsrs	r2, r3, #3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3208      	adds	r2, #8
 8001108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	f003 0307 	and.w	r3, r3, #7
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	220f      	movs	r2, #15
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	691a      	ldr	r2, [r3, #16]
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	08da      	lsrs	r2, r3, #3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3208      	adds	r2, #8
 8001142:	69b9      	ldr	r1, [r7, #24]
 8001144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	2203      	movs	r2, #3
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0203 	and.w	r2, r3, #3
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001184:	2b00      	cmp	r3, #0
 8001186:	f000 80a2 	beq.w	80012ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b57      	ldr	r3, [pc, #348]	; (80012ec <HAL_GPIO_Init+0x2e8>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	4a56      	ldr	r2, [pc, #344]	; (80012ec <HAL_GPIO_Init+0x2e8>)
 8001194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001198:	6453      	str	r3, [r2, #68]	; 0x44
 800119a:	4b54      	ldr	r3, [pc, #336]	; (80012ec <HAL_GPIO_Init+0x2e8>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011a6:	4a52      	ldr	r2, [pc, #328]	; (80012f0 <HAL_GPIO_Init+0x2ec>)
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	3302      	adds	r3, #2
 80011ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	220f      	movs	r2, #15
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a49      	ldr	r2, [pc, #292]	; (80012f4 <HAL_GPIO_Init+0x2f0>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d019      	beq.n	8001206 <HAL_GPIO_Init+0x202>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a48      	ldr	r2, [pc, #288]	; (80012f8 <HAL_GPIO_Init+0x2f4>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d013      	beq.n	8001202 <HAL_GPIO_Init+0x1fe>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a47      	ldr	r2, [pc, #284]	; (80012fc <HAL_GPIO_Init+0x2f8>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d00d      	beq.n	80011fe <HAL_GPIO_Init+0x1fa>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a46      	ldr	r2, [pc, #280]	; (8001300 <HAL_GPIO_Init+0x2fc>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d007      	beq.n	80011fa <HAL_GPIO_Init+0x1f6>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a45      	ldr	r2, [pc, #276]	; (8001304 <HAL_GPIO_Init+0x300>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d101      	bne.n	80011f6 <HAL_GPIO_Init+0x1f2>
 80011f2:	2304      	movs	r3, #4
 80011f4:	e008      	b.n	8001208 <HAL_GPIO_Init+0x204>
 80011f6:	2307      	movs	r3, #7
 80011f8:	e006      	b.n	8001208 <HAL_GPIO_Init+0x204>
 80011fa:	2303      	movs	r3, #3
 80011fc:	e004      	b.n	8001208 <HAL_GPIO_Init+0x204>
 80011fe:	2302      	movs	r3, #2
 8001200:	e002      	b.n	8001208 <HAL_GPIO_Init+0x204>
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <HAL_GPIO_Init+0x204>
 8001206:	2300      	movs	r3, #0
 8001208:	69fa      	ldr	r2, [r7, #28]
 800120a:	f002 0203 	and.w	r2, r2, #3
 800120e:	0092      	lsls	r2, r2, #2
 8001210:	4093      	lsls	r3, r2
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001218:	4935      	ldr	r1, [pc, #212]	; (80012f0 <HAL_GPIO_Init+0x2ec>)
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	089b      	lsrs	r3, r3, #2
 800121e:	3302      	adds	r3, #2
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001226:	4b38      	ldr	r3, [pc, #224]	; (8001308 <HAL_GPIO_Init+0x304>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	43db      	mvns	r3, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4013      	ands	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800124a:	4a2f      	ldr	r2, [pc, #188]	; (8001308 <HAL_GPIO_Init+0x304>)
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001250:	4b2d      	ldr	r3, [pc, #180]	; (8001308 <HAL_GPIO_Init+0x304>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001274:	4a24      	ldr	r2, [pc, #144]	; (8001308 <HAL_GPIO_Init+0x304>)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800127a:	4b23      	ldr	r3, [pc, #140]	; (8001308 <HAL_GPIO_Init+0x304>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	43db      	mvns	r3, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4013      	ands	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800129e:	4a1a      	ldr	r2, [pc, #104]	; (8001308 <HAL_GPIO_Init+0x304>)
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012a4:	4b18      	ldr	r3, [pc, #96]	; (8001308 <HAL_GPIO_Init+0x304>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012c8:	4a0f      	ldr	r2, [pc, #60]	; (8001308 <HAL_GPIO_Init+0x304>)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3301      	adds	r3, #1
 80012d2:	61fb      	str	r3, [r7, #28]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	2b0f      	cmp	r3, #15
 80012d8:	f67f aea2 	bls.w	8001020 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	3724      	adds	r7, #36	; 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40013800 	.word	0x40013800
 80012f4:	40020000 	.word	0x40020000
 80012f8:	40020400 	.word	0x40020400
 80012fc:	40020800 	.word	0x40020800
 8001300:	40020c00 	.word	0x40020c00
 8001304:	40021000 	.word	0x40021000
 8001308:	40013c00 	.word	0x40013c00

0800130c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
 8001318:	4613      	mov	r3, r2
 800131a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800131c:	787b      	ldrb	r3, [r7, #1]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001322:	887a      	ldrh	r2, [r7, #2]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001328:	e003      	b.n	8001332 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800132a:	887b      	ldrh	r3, [r7, #2]
 800132c:	041a      	lsls	r2, r3, #16
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	619a      	str	r2, [r3, #24]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e12b      	b.n	80015aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d106      	bne.n	800136c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff f944 	bl	80005f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2224      	movs	r2, #36	; 0x24
 8001370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f022 0201 	bic.w	r2, r2, #1
 8001382:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001392:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013a4:	f001 f858 	bl	8002458 <HAL_RCC_GetPCLK1Freq>
 80013a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	4a81      	ldr	r2, [pc, #516]	; (80015b4 <HAL_I2C_Init+0x274>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d807      	bhi.n	80013c4 <HAL_I2C_Init+0x84>
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4a80      	ldr	r2, [pc, #512]	; (80015b8 <HAL_I2C_Init+0x278>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	bf94      	ite	ls
 80013bc:	2301      	movls	r3, #1
 80013be:	2300      	movhi	r3, #0
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	e006      	b.n	80013d2 <HAL_I2C_Init+0x92>
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4a7d      	ldr	r2, [pc, #500]	; (80015bc <HAL_I2C_Init+0x27c>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	bf94      	ite	ls
 80013cc:	2301      	movls	r3, #1
 80013ce:	2300      	movhi	r3, #0
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e0e7      	b.n	80015aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4a78      	ldr	r2, [pc, #480]	; (80015c0 <HAL_I2C_Init+0x280>)
 80013de:	fba2 2303 	umull	r2, r3, r2, r3
 80013e2:	0c9b      	lsrs	r3, r3, #18
 80013e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68ba      	ldr	r2, [r7, #8]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	4a6a      	ldr	r2, [pc, #424]	; (80015b4 <HAL_I2C_Init+0x274>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d802      	bhi.n	8001414 <HAL_I2C_Init+0xd4>
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	3301      	adds	r3, #1
 8001412:	e009      	b.n	8001428 <HAL_I2C_Init+0xe8>
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800141a:	fb02 f303 	mul.w	r3, r2, r3
 800141e:	4a69      	ldr	r2, [pc, #420]	; (80015c4 <HAL_I2C_Init+0x284>)
 8001420:	fba2 2303 	umull	r2, r3, r2, r3
 8001424:	099b      	lsrs	r3, r3, #6
 8001426:	3301      	adds	r3, #1
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	6812      	ldr	r2, [r2, #0]
 800142c:	430b      	orrs	r3, r1
 800142e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800143a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	495c      	ldr	r1, [pc, #368]	; (80015b4 <HAL_I2C_Init+0x274>)
 8001444:	428b      	cmp	r3, r1
 8001446:	d819      	bhi.n	800147c <HAL_I2C_Init+0x13c>
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	1e59      	subs	r1, r3, #1
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	fbb1 f3f3 	udiv	r3, r1, r3
 8001456:	1c59      	adds	r1, r3, #1
 8001458:	f640 73fc 	movw	r3, #4092	; 0xffc
 800145c:	400b      	ands	r3, r1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d00a      	beq.n	8001478 <HAL_I2C_Init+0x138>
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	1e59      	subs	r1, r3, #1
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001470:	3301      	adds	r3, #1
 8001472:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001476:	e051      	b.n	800151c <HAL_I2C_Init+0x1dc>
 8001478:	2304      	movs	r3, #4
 800147a:	e04f      	b.n	800151c <HAL_I2C_Init+0x1dc>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d111      	bne.n	80014a8 <HAL_I2C_Init+0x168>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	1e58      	subs	r0, r3, #1
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6859      	ldr	r1, [r3, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	440b      	add	r3, r1
 8001492:	fbb0 f3f3 	udiv	r3, r0, r3
 8001496:	3301      	adds	r3, #1
 8001498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800149c:	2b00      	cmp	r3, #0
 800149e:	bf0c      	ite	eq
 80014a0:	2301      	moveq	r3, #1
 80014a2:	2300      	movne	r3, #0
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	e012      	b.n	80014ce <HAL_I2C_Init+0x18e>
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	1e58      	subs	r0, r3, #1
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6859      	ldr	r1, [r3, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	0099      	lsls	r1, r3, #2
 80014b8:	440b      	add	r3, r1
 80014ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80014be:	3301      	adds	r3, #1
 80014c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	bf0c      	ite	eq
 80014c8:	2301      	moveq	r3, #1
 80014ca:	2300      	movne	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_I2C_Init+0x196>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e022      	b.n	800151c <HAL_I2C_Init+0x1dc>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10e      	bne.n	80014fc <HAL_I2C_Init+0x1bc>
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	1e58      	subs	r0, r3, #1
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6859      	ldr	r1, [r3, #4]
 80014e6:	460b      	mov	r3, r1
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	440b      	add	r3, r1
 80014ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80014f0:	3301      	adds	r3, #1
 80014f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014fa:	e00f      	b.n	800151c <HAL_I2C_Init+0x1dc>
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	1e58      	subs	r0, r3, #1
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6859      	ldr	r1, [r3, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	0099      	lsls	r1, r3, #2
 800150c:	440b      	add	r3, r1
 800150e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001512:	3301      	adds	r3, #1
 8001514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001518:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	6809      	ldr	r1, [r1, #0]
 8001520:	4313      	orrs	r3, r2
 8001522:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69da      	ldr	r2, [r3, #28]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800154a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6911      	ldr	r1, [r2, #16]
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	68d2      	ldr	r2, [r2, #12]
 8001556:	4311      	orrs	r1, r2
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	6812      	ldr	r2, [r2, #0]
 800155c:	430b      	orrs	r3, r1
 800155e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	695a      	ldr	r2, [r3, #20]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	431a      	orrs	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	430a      	orrs	r2, r1
 800157a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f042 0201 	orr.w	r2, r2, #1
 800158a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2220      	movs	r2, #32
 8001596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	000186a0 	.word	0x000186a0
 80015b8:	001e847f 	.word	0x001e847f
 80015bc:	003d08ff 	.word	0x003d08ff
 80015c0:	431bde83 	.word	0x431bde83
 80015c4:	10624dd3 	.word	0x10624dd3

080015c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af02      	add	r7, sp, #8
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	4608      	mov	r0, r1
 80015d2:	4611      	mov	r1, r2
 80015d4:	461a      	mov	r2, r3
 80015d6:	4603      	mov	r3, r0
 80015d8:	817b      	strh	r3, [r7, #10]
 80015da:	460b      	mov	r3, r1
 80015dc:	813b      	strh	r3, [r7, #8]
 80015de:	4613      	mov	r3, r2
 80015e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80015e2:	f7ff fbcd 	bl	8000d80 <HAL_GetTick>
 80015e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b20      	cmp	r3, #32
 80015f2:	f040 80d9 	bne.w	80017a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	2319      	movs	r3, #25
 80015fc:	2201      	movs	r2, #1
 80015fe:	496d      	ldr	r1, [pc, #436]	; (80017b4 <HAL_I2C_Mem_Write+0x1ec>)
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f000 f971 	bl	80018e8 <I2C_WaitOnFlagUntilTimeout>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800160c:	2302      	movs	r3, #2
 800160e:	e0cc      	b.n	80017aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001616:	2b01      	cmp	r3, #1
 8001618:	d101      	bne.n	800161e <HAL_I2C_Mem_Write+0x56>
 800161a:	2302      	movs	r3, #2
 800161c:	e0c5      	b.n	80017aa <HAL_I2C_Mem_Write+0x1e2>
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	2b01      	cmp	r3, #1
 8001632:	d007      	beq.n	8001644 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f042 0201 	orr.w	r2, r2, #1
 8001642:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001652:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2221      	movs	r2, #33	; 0x21
 8001658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2240      	movs	r2, #64	; 0x40
 8001660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2200      	movs	r2, #0
 8001668:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6a3a      	ldr	r2, [r7, #32]
 800166e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001674:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800167a:	b29a      	uxth	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4a4d      	ldr	r2, [pc, #308]	; (80017b8 <HAL_I2C_Mem_Write+0x1f0>)
 8001684:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001686:	88f8      	ldrh	r0, [r7, #6]
 8001688:	893a      	ldrh	r2, [r7, #8]
 800168a:	8979      	ldrh	r1, [r7, #10]
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	4603      	mov	r3, r0
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f000 f890 	bl	80017bc <I2C_RequestMemoryWrite>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d052      	beq.n	8001748 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e081      	b.n	80017aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f000 f9f2 	bl	8001a94 <I2C_WaitOnTXEFlagUntilTimeout>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00d      	beq.n	80016d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d107      	bne.n	80016ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e06b      	b.n	80017aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d6:	781a      	ldrb	r2, [r3, #0]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	1c5a      	adds	r2, r3, #1
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ec:	3b01      	subs	r3, #1
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	3b01      	subs	r3, #1
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b04      	cmp	r3, #4
 800170e:	d11b      	bne.n	8001748 <HAL_I2C_Mem_Write+0x180>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001714:	2b00      	cmp	r3, #0
 8001716:	d017      	beq.n	8001748 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	781a      	ldrb	r2, [r3, #0]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001728:	1c5a      	adds	r2, r3, #1
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001732:	3b01      	subs	r3, #1
 8001734:	b29a      	uxth	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800173e:	b29b      	uxth	r3, r3
 8001740:	3b01      	subs	r3, #1
 8001742:	b29a      	uxth	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1aa      	bne.n	80016a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001754:	68f8      	ldr	r0, [r7, #12]
 8001756:	f000 f9de 	bl	8001b16 <I2C_WaitOnBTFFlagUntilTimeout>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00d      	beq.n	800177c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	2b04      	cmp	r3, #4
 8001766:	d107      	bne.n	8001778 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001776:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e016      	b.n	80017aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800178a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2220      	movs	r2, #32
 8001790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	e000      	b.n	80017aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80017a8:	2302      	movs	r3, #2
  }
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	00100002 	.word	0x00100002
 80017b8:	ffff0000 	.word	0xffff0000

080017bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af02      	add	r7, sp, #8
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	4608      	mov	r0, r1
 80017c6:	4611      	mov	r1, r2
 80017c8:	461a      	mov	r2, r3
 80017ca:	4603      	mov	r3, r0
 80017cc:	817b      	strh	r3, [r7, #10]
 80017ce:	460b      	mov	r3, r1
 80017d0:	813b      	strh	r3, [r7, #8]
 80017d2:	4613      	mov	r3, r2
 80017d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	6a3b      	ldr	r3, [r7, #32]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f000 f878 	bl	80018e8 <I2C_WaitOnFlagUntilTimeout>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00d      	beq.n	800181a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001808:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800180c:	d103      	bne.n	8001816 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001814:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e05f      	b.n	80018da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800181a:	897b      	ldrh	r3, [r7, #10]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	461a      	mov	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001828:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	6a3a      	ldr	r2, [r7, #32]
 800182e:	492d      	ldr	r1, [pc, #180]	; (80018e4 <I2C_RequestMemoryWrite+0x128>)
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f000 f8b0 	bl	8001996 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e04c      	b.n	80018da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001858:	6a39      	ldr	r1, [r7, #32]
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f000 f91a 	bl	8001a94 <I2C_WaitOnTXEFlagUntilTimeout>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00d      	beq.n	8001882 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	2b04      	cmp	r3, #4
 800186c:	d107      	bne.n	800187e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800187c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e02b      	b.n	80018da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001882:	88fb      	ldrh	r3, [r7, #6]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d105      	bne.n	8001894 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001888:	893b      	ldrh	r3, [r7, #8]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	611a      	str	r2, [r3, #16]
 8001892:	e021      	b.n	80018d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001894:	893b      	ldrh	r3, [r7, #8]
 8001896:	0a1b      	lsrs	r3, r3, #8
 8001898:	b29b      	uxth	r3, r3
 800189a:	b2da      	uxtb	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a4:	6a39      	ldr	r1, [r7, #32]
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f000 f8f4 	bl	8001a94 <I2C_WaitOnTXEFlagUntilTimeout>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00d      	beq.n	80018ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	d107      	bne.n	80018ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e005      	b.n	80018da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80018ce:	893b      	ldrh	r3, [r7, #8]
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	00010002 	.word	0x00010002

080018e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	4613      	mov	r3, r2
 80018f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018f8:	e025      	b.n	8001946 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001900:	d021      	beq.n	8001946 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001902:	f7ff fa3d 	bl	8000d80 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	429a      	cmp	r2, r3
 8001910:	d302      	bcc.n	8001918 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d116      	bne.n	8001946 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2200      	movs	r2, #0
 800191c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2220      	movs	r2, #32
 8001922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f043 0220 	orr.w	r2, r3, #32
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e023      	b.n	800198e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	0c1b      	lsrs	r3, r3, #16
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b01      	cmp	r3, #1
 800194e:	d10d      	bne.n	800196c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	43da      	mvns	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	4013      	ands	r3, r2
 800195c:	b29b      	uxth	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	bf0c      	ite	eq
 8001962:	2301      	moveq	r3, #1
 8001964:	2300      	movne	r3, #0
 8001966:	b2db      	uxtb	r3, r3
 8001968:	461a      	mov	r2, r3
 800196a:	e00c      	b.n	8001986 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	43da      	mvns	r2, r3
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	4013      	ands	r3, r2
 8001978:	b29b      	uxth	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	bf0c      	ite	eq
 800197e:	2301      	moveq	r3, #1
 8001980:	2300      	movne	r3, #0
 8001982:	b2db      	uxtb	r3, r3
 8001984:	461a      	mov	r2, r3
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	429a      	cmp	r2, r3
 800198a:	d0b6      	beq.n	80018fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b084      	sub	sp, #16
 800199a:	af00      	add	r7, sp, #0
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
 80019a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80019a4:	e051      	b.n	8001a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019b4:	d123      	bne.n	80019fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80019ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2200      	movs	r2, #0
 80019d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2220      	movs	r2, #32
 80019da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	f043 0204 	orr.w	r2, r3, #4
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e046      	b.n	8001a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a04:	d021      	beq.n	8001a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a06:	f7ff f9bb 	bl	8000d80 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d302      	bcc.n	8001a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d116      	bne.n	8001a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2220      	movs	r2, #32
 8001a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f043 0220 	orr.w	r2, r3, #32
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e020      	b.n	8001a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	0c1b      	lsrs	r3, r3, #16
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d10c      	bne.n	8001a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	43da      	mvns	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	bf14      	ite	ne
 8001a66:	2301      	movne	r3, #1
 8001a68:	2300      	moveq	r3, #0
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	e00b      	b.n	8001a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	43da      	mvns	r2, r3
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	bf14      	ite	ne
 8001a80:	2301      	movne	r3, #1
 8001a82:	2300      	moveq	r3, #0
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d18d      	bne.n	80019a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001aa0:	e02d      	b.n	8001afe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f000 f878 	bl	8001b98 <I2C_IsAcknowledgeFailed>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e02d      	b.n	8001b0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab8:	d021      	beq.n	8001afe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aba:	f7ff f961 	bl	8000d80 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	68ba      	ldr	r2, [r7, #8]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d302      	bcc.n	8001ad0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d116      	bne.n	8001afe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2220      	movs	r2, #32
 8001ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f043 0220 	orr.w	r2, r3, #32
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e007      	b.n	8001b0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b08:	2b80      	cmp	r3, #128	; 0x80
 8001b0a:	d1ca      	bne.n	8001aa2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b084      	sub	sp, #16
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b22:	e02d      	b.n	8001b80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 f837 	bl	8001b98 <I2C_IsAcknowledgeFailed>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e02d      	b.n	8001b90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3a:	d021      	beq.n	8001b80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b3c:	f7ff f920 	bl	8000d80 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d302      	bcc.n	8001b52 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d116      	bne.n	8001b80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2200      	movs	r2, #0
 8001b56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	f043 0220 	orr.w	r2, r3, #32
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e007      	b.n	8001b90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	f003 0304 	and.w	r3, r3, #4
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	d1ca      	bne.n	8001b24 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bae:	d11b      	bne.n	8001be8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001bb8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	f043 0204 	orr.w	r2, r3, #4
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e000      	b.n	8001bea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e267      	b.n	80020da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d075      	beq.n	8001d02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c16:	4b88      	ldr	r3, [pc, #544]	; (8001e38 <HAL_RCC_OscConfig+0x240>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d00c      	beq.n	8001c3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c22:	4b85      	ldr	r3, [pc, #532]	; (8001e38 <HAL_RCC_OscConfig+0x240>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c2a:	2b08      	cmp	r3, #8
 8001c2c:	d112      	bne.n	8001c54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c2e:	4b82      	ldr	r3, [pc, #520]	; (8001e38 <HAL_RCC_OscConfig+0x240>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c3a:	d10b      	bne.n	8001c54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c3c:	4b7e      	ldr	r3, [pc, #504]	; (8001e38 <HAL_RCC_OscConfig+0x240>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d05b      	beq.n	8001d00 <HAL_RCC_OscConfig+0x108>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d157      	bne.n	8001d00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e242      	b.n	80020da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c5c:	d106      	bne.n	8001c6c <HAL_RCC_OscConfig+0x74>
 8001c5e:	4b76      	ldr	r3, [pc, #472]	; (8001e38 <HAL_RCC_OscConfig+0x240>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a75      	ldr	r2, [pc, #468]	; (8001e38 <HAL_RCC_OscConfig+0x240>)
 8001c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	e01d      	b.n	8001ca8 <HAL_RCC_OscConfig+0xb0>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c74:	d10c      	bne.n	8001c90 <HAL_RCC_OscConfig+0x98>
 8001c76:	4b70      	ldr	r3, [pc, #448]	; (8001e38 <HAL_RCC_OscConfig+0x240>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a6f      	ldr	r2, [pc, #444]	; (8001e38 <HAL_RCC_OscConfig+0x240>)
 8001c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	4b6d      	ldr	r3, [pc, #436]	; (8001e38 <HAL_RCC_OscConfig+0x240>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a6c      	ldr	r2, [pc, #432]	; (8001e38 <HAL_RCC_OscConfig+0x240>)
 8001c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	e00b      	b.n	8001ca8 <HAL_RCC_OscConfig+0xb0>
 8001c90:	4b69      	ldr	r3, [pc, #420]	; (8001e38 <HAL_RCC_OscConfig+0x240>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a68      	ldr	r2, [pc, #416]	; (8001e38 <HAL_RCC_OscConfig+0x240>)
 8001c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	4b66      	ldr	r3, [pc, #408]	; (8001e38 <HAL_RCC_OscConfig+0x240>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a65      	ldr	r2, [pc, #404]	; (8001e38 <HAL_RCC_OscConfig+0x240>)
 8001ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d013      	beq.n	8001cd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7ff f866 	bl	8000d80 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb8:	f7ff f862 	bl	8000d80 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b64      	cmp	r3, #100	; 0x64
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e207      	b.n	80020da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cca:	4b5b      	ldr	r3, [pc, #364]	; (8001e38 <HAL_RCC_OscConfig+0x240>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0f0      	beq.n	8001cb8 <HAL_RCC_OscConfig+0xc0>
 8001cd6:	e014      	b.n	8001d02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd8:	f7ff f852 	bl	8000d80 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce0:	f7ff f84e 	bl	8000d80 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b64      	cmp	r3, #100	; 0x64
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e1f3      	b.n	80020da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf2:	4b51      	ldr	r3, [pc, #324]	; (8001e38 <HAL_RCC_OscConfig+0x240>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f0      	bne.n	8001ce0 <HAL_RCC_OscConfig+0xe8>
 8001cfe:	e000      	b.n	8001d02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d063      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d0e:	4b4a      	ldr	r3, [pc, #296]	; (8001e38 <HAL_RCC_OscConfig+0x240>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00b      	beq.n	8001d32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d1a:	4b47      	ldr	r3, [pc, #284]	; (8001e38 <HAL_RCC_OscConfig+0x240>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d22:	2b08      	cmp	r3, #8
 8001d24:	d11c      	bne.n	8001d60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d26:	4b44      	ldr	r3, [pc, #272]	; (8001e38 <HAL_RCC_OscConfig+0x240>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d116      	bne.n	8001d60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d32:	4b41      	ldr	r3, [pc, #260]	; (8001e38 <HAL_RCC_OscConfig+0x240>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d005      	beq.n	8001d4a <HAL_RCC_OscConfig+0x152>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d001      	beq.n	8001d4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e1c7      	b.n	80020da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4a:	4b3b      	ldr	r3, [pc, #236]	; (8001e38 <HAL_RCC_OscConfig+0x240>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4937      	ldr	r1, [pc, #220]	; (8001e38 <HAL_RCC_OscConfig+0x240>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5e:	e03a      	b.n	8001dd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d020      	beq.n	8001daa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d68:	4b34      	ldr	r3, [pc, #208]	; (8001e3c <HAL_RCC_OscConfig+0x244>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6e:	f7ff f807 	bl	8000d80 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d76:	f7ff f803 	bl	8000d80 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e1a8      	b.n	80020da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d88:	4b2b      	ldr	r3, [pc, #172]	; (8001e38 <HAL_RCC_OscConfig+0x240>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d94:	4b28      	ldr	r3, [pc, #160]	; (8001e38 <HAL_RCC_OscConfig+0x240>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	4925      	ldr	r1, [pc, #148]	; (8001e38 <HAL_RCC_OscConfig+0x240>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	600b      	str	r3, [r1, #0]
 8001da8:	e015      	b.n	8001dd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001daa:	4b24      	ldr	r3, [pc, #144]	; (8001e3c <HAL_RCC_OscConfig+0x244>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db0:	f7fe ffe6 	bl	8000d80 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001db8:	f7fe ffe2 	bl	8000d80 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e187      	b.n	80020da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dca:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <HAL_RCC_OscConfig+0x240>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f0      	bne.n	8001db8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d036      	beq.n	8001e50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d016      	beq.n	8001e18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dea:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <HAL_RCC_OscConfig+0x248>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df0:	f7fe ffc6 	bl	8000d80 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001df8:	f7fe ffc2 	bl	8000d80 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e167      	b.n	80020da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0a:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <HAL_RCC_OscConfig+0x240>)
 8001e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0x200>
 8001e16:	e01b      	b.n	8001e50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e18:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <HAL_RCC_OscConfig+0x248>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1e:	f7fe ffaf 	bl	8000d80 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e24:	e00e      	b.n	8001e44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e26:	f7fe ffab 	bl	8000d80 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d907      	bls.n	8001e44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e150      	b.n	80020da <HAL_RCC_OscConfig+0x4e2>
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	42470000 	.word	0x42470000
 8001e40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e44:	4b88      	ldr	r3, [pc, #544]	; (8002068 <HAL_RCC_OscConfig+0x470>)
 8001e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1ea      	bne.n	8001e26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 8097 	beq.w	8001f8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e62:	4b81      	ldr	r3, [pc, #516]	; (8002068 <HAL_RCC_OscConfig+0x470>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10f      	bne.n	8001e8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	4b7d      	ldr	r3, [pc, #500]	; (8002068 <HAL_RCC_OscConfig+0x470>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	4a7c      	ldr	r2, [pc, #496]	; (8002068 <HAL_RCC_OscConfig+0x470>)
 8001e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7e:	4b7a      	ldr	r3, [pc, #488]	; (8002068 <HAL_RCC_OscConfig+0x470>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8e:	4b77      	ldr	r3, [pc, #476]	; (800206c <HAL_RCC_OscConfig+0x474>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d118      	bne.n	8001ecc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e9a:	4b74      	ldr	r3, [pc, #464]	; (800206c <HAL_RCC_OscConfig+0x474>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a73      	ldr	r2, [pc, #460]	; (800206c <HAL_RCC_OscConfig+0x474>)
 8001ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea6:	f7fe ff6b 	bl	8000d80 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eae:	f7fe ff67 	bl	8000d80 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e10c      	b.n	80020da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec0:	4b6a      	ldr	r3, [pc, #424]	; (800206c <HAL_RCC_OscConfig+0x474>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0f0      	beq.n	8001eae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d106      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x2ea>
 8001ed4:	4b64      	ldr	r3, [pc, #400]	; (8002068 <HAL_RCC_OscConfig+0x470>)
 8001ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed8:	4a63      	ldr	r2, [pc, #396]	; (8002068 <HAL_RCC_OscConfig+0x470>)
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee0:	e01c      	b.n	8001f1c <HAL_RCC_OscConfig+0x324>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b05      	cmp	r3, #5
 8001ee8:	d10c      	bne.n	8001f04 <HAL_RCC_OscConfig+0x30c>
 8001eea:	4b5f      	ldr	r3, [pc, #380]	; (8002068 <HAL_RCC_OscConfig+0x470>)
 8001eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eee:	4a5e      	ldr	r2, [pc, #376]	; (8002068 <HAL_RCC_OscConfig+0x470>)
 8001ef0:	f043 0304 	orr.w	r3, r3, #4
 8001ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef6:	4b5c      	ldr	r3, [pc, #368]	; (8002068 <HAL_RCC_OscConfig+0x470>)
 8001ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efa:	4a5b      	ldr	r2, [pc, #364]	; (8002068 <HAL_RCC_OscConfig+0x470>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	6713      	str	r3, [r2, #112]	; 0x70
 8001f02:	e00b      	b.n	8001f1c <HAL_RCC_OscConfig+0x324>
 8001f04:	4b58      	ldr	r3, [pc, #352]	; (8002068 <HAL_RCC_OscConfig+0x470>)
 8001f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f08:	4a57      	ldr	r2, [pc, #348]	; (8002068 <HAL_RCC_OscConfig+0x470>)
 8001f0a:	f023 0301 	bic.w	r3, r3, #1
 8001f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f10:	4b55      	ldr	r3, [pc, #340]	; (8002068 <HAL_RCC_OscConfig+0x470>)
 8001f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f14:	4a54      	ldr	r2, [pc, #336]	; (8002068 <HAL_RCC_OscConfig+0x470>)
 8001f16:	f023 0304 	bic.w	r3, r3, #4
 8001f1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d015      	beq.n	8001f50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f24:	f7fe ff2c 	bl	8000d80 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2a:	e00a      	b.n	8001f42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f2c:	f7fe ff28 	bl	8000d80 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e0cb      	b.n	80020da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f42:	4b49      	ldr	r3, [pc, #292]	; (8002068 <HAL_RCC_OscConfig+0x470>)
 8001f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0ee      	beq.n	8001f2c <HAL_RCC_OscConfig+0x334>
 8001f4e:	e014      	b.n	8001f7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f50:	f7fe ff16 	bl	8000d80 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f56:	e00a      	b.n	8001f6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f58:	f7fe ff12 	bl	8000d80 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e0b5      	b.n	80020da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f6e:	4b3e      	ldr	r3, [pc, #248]	; (8002068 <HAL_RCC_OscConfig+0x470>)
 8001f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1ee      	bne.n	8001f58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f7a:	7dfb      	ldrb	r3, [r7, #23]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d105      	bne.n	8001f8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f80:	4b39      	ldr	r3, [pc, #228]	; (8002068 <HAL_RCC_OscConfig+0x470>)
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	4a38      	ldr	r2, [pc, #224]	; (8002068 <HAL_RCC_OscConfig+0x470>)
 8001f86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 80a1 	beq.w	80020d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f96:	4b34      	ldr	r3, [pc, #208]	; (8002068 <HAL_RCC_OscConfig+0x470>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d05c      	beq.n	800205c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d141      	bne.n	800202e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001faa:	4b31      	ldr	r3, [pc, #196]	; (8002070 <HAL_RCC_OscConfig+0x478>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb0:	f7fe fee6 	bl	8000d80 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7fe fee2 	bl	8000d80 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e087      	b.n	80020da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fca:	4b27      	ldr	r3, [pc, #156]	; (8002068 <HAL_RCC_OscConfig+0x470>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69da      	ldr	r2, [r3, #28]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	019b      	lsls	r3, r3, #6
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fec:	085b      	lsrs	r3, r3, #1
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	041b      	lsls	r3, r3, #16
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff8:	061b      	lsls	r3, r3, #24
 8001ffa:	491b      	ldr	r1, [pc, #108]	; (8002068 <HAL_RCC_OscConfig+0x470>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002000:	4b1b      	ldr	r3, [pc, #108]	; (8002070 <HAL_RCC_OscConfig+0x478>)
 8002002:	2201      	movs	r2, #1
 8002004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002006:	f7fe febb 	bl	8000d80 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800200e:	f7fe feb7 	bl	8000d80 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e05c      	b.n	80020da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002020:	4b11      	ldr	r3, [pc, #68]	; (8002068 <HAL_RCC_OscConfig+0x470>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0f0      	beq.n	800200e <HAL_RCC_OscConfig+0x416>
 800202c:	e054      	b.n	80020d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <HAL_RCC_OscConfig+0x478>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7fe fea4 	bl	8000d80 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800203c:	f7fe fea0 	bl	8000d80 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e045      	b.n	80020da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204e:	4b06      	ldr	r3, [pc, #24]	; (8002068 <HAL_RCC_OscConfig+0x470>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x444>
 800205a:	e03d      	b.n	80020d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d107      	bne.n	8002074 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e038      	b.n	80020da <HAL_RCC_OscConfig+0x4e2>
 8002068:	40023800 	.word	0x40023800
 800206c:	40007000 	.word	0x40007000
 8002070:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002074:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <HAL_RCC_OscConfig+0x4ec>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d028      	beq.n	80020d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800208c:	429a      	cmp	r2, r3
 800208e:	d121      	bne.n	80020d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800209a:	429a      	cmp	r2, r3
 800209c:	d11a      	bne.n	80020d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020a4:	4013      	ands	r3, r2
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d111      	bne.n	80020d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ba:	085b      	lsrs	r3, r3, #1
 80020bc:	3b01      	subs	r3, #1
 80020be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d107      	bne.n	80020d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d001      	beq.n	80020d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e000      	b.n	80020da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40023800 	.word	0x40023800

080020e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e0cc      	b.n	8002296 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020fc:	4b68      	ldr	r3, [pc, #416]	; (80022a0 <HAL_RCC_ClockConfig+0x1b8>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d90c      	bls.n	8002124 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210a:	4b65      	ldr	r3, [pc, #404]	; (80022a0 <HAL_RCC_ClockConfig+0x1b8>)
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002112:	4b63      	ldr	r3, [pc, #396]	; (80022a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d001      	beq.n	8002124 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e0b8      	b.n	8002296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d020      	beq.n	8002172 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b00      	cmp	r3, #0
 800213a:	d005      	beq.n	8002148 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800213c:	4b59      	ldr	r3, [pc, #356]	; (80022a4 <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	4a58      	ldr	r2, [pc, #352]	; (80022a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002142:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002146:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0308 	and.w	r3, r3, #8
 8002150:	2b00      	cmp	r3, #0
 8002152:	d005      	beq.n	8002160 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002154:	4b53      	ldr	r3, [pc, #332]	; (80022a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	4a52      	ldr	r2, [pc, #328]	; (80022a4 <HAL_RCC_ClockConfig+0x1bc>)
 800215a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800215e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002160:	4b50      	ldr	r3, [pc, #320]	; (80022a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	494d      	ldr	r1, [pc, #308]	; (80022a4 <HAL_RCC_ClockConfig+0x1bc>)
 800216e:	4313      	orrs	r3, r2
 8002170:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d044      	beq.n	8002208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d107      	bne.n	8002196 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002186:	4b47      	ldr	r3, [pc, #284]	; (80022a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d119      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e07f      	b.n	8002296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d003      	beq.n	80021a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	d107      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a6:	4b3f      	ldr	r3, [pc, #252]	; (80022a4 <HAL_RCC_ClockConfig+0x1bc>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d109      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e06f      	b.n	8002296 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b6:	4b3b      	ldr	r3, [pc, #236]	; (80022a4 <HAL_RCC_ClockConfig+0x1bc>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e067      	b.n	8002296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021c6:	4b37      	ldr	r3, [pc, #220]	; (80022a4 <HAL_RCC_ClockConfig+0x1bc>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f023 0203 	bic.w	r2, r3, #3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	4934      	ldr	r1, [pc, #208]	; (80022a4 <HAL_RCC_ClockConfig+0x1bc>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021d8:	f7fe fdd2 	bl	8000d80 <HAL_GetTick>
 80021dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021de:	e00a      	b.n	80021f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e0:	f7fe fdce 	bl	8000d80 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e04f      	b.n	8002296 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f6:	4b2b      	ldr	r3, [pc, #172]	; (80022a4 <HAL_RCC_ClockConfig+0x1bc>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 020c 	and.w	r2, r3, #12
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	429a      	cmp	r2, r3
 8002206:	d1eb      	bne.n	80021e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002208:	4b25      	ldr	r3, [pc, #148]	; (80022a0 <HAL_RCC_ClockConfig+0x1b8>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d20c      	bcs.n	8002230 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002216:	4b22      	ldr	r3, [pc, #136]	; (80022a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800221e:	4b20      	ldr	r3, [pc, #128]	; (80022a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d001      	beq.n	8002230 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e032      	b.n	8002296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d008      	beq.n	800224e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800223c:	4b19      	ldr	r3, [pc, #100]	; (80022a4 <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	4916      	ldr	r1, [pc, #88]	; (80022a4 <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	4313      	orrs	r3, r2
 800224c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d009      	beq.n	800226e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800225a:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <HAL_RCC_ClockConfig+0x1bc>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	490e      	ldr	r1, [pc, #56]	; (80022a4 <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	4313      	orrs	r3, r2
 800226c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800226e:	f000 f821 	bl	80022b4 <HAL_RCC_GetSysClockFreq>
 8002272:	4602      	mov	r2, r0
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	490a      	ldr	r1, [pc, #40]	; (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002280:	5ccb      	ldrb	r3, [r1, r3]
 8002282:	fa22 f303 	lsr.w	r3, r2, r3
 8002286:	4a09      	ldr	r2, [pc, #36]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800228a:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe fd32 	bl	8000cf8 <HAL_InitTick>

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40023c00 	.word	0x40023c00
 80022a4:	40023800 	.word	0x40023800
 80022a8:	08003a38 	.word	0x08003a38
 80022ac:	20000000 	.word	0x20000000
 80022b0:	20000004 	.word	0x20000004

080022b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022b8:	b090      	sub	sp, #64	; 0x40
 80022ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	637b      	str	r3, [r7, #52]	; 0x34
 80022c0:	2300      	movs	r3, #0
 80022c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022c4:	2300      	movs	r3, #0
 80022c6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022cc:	4b59      	ldr	r3, [pc, #356]	; (8002434 <HAL_RCC_GetSysClockFreq+0x180>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 030c 	and.w	r3, r3, #12
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	d00d      	beq.n	80022f4 <HAL_RCC_GetSysClockFreq+0x40>
 80022d8:	2b08      	cmp	r3, #8
 80022da:	f200 80a1 	bhi.w	8002420 <HAL_RCC_GetSysClockFreq+0x16c>
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d002      	beq.n	80022e8 <HAL_RCC_GetSysClockFreq+0x34>
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d003      	beq.n	80022ee <HAL_RCC_GetSysClockFreq+0x3a>
 80022e6:	e09b      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022e8:	4b53      	ldr	r3, [pc, #332]	; (8002438 <HAL_RCC_GetSysClockFreq+0x184>)
 80022ea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80022ec:	e09b      	b.n	8002426 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022ee:	4b53      	ldr	r3, [pc, #332]	; (800243c <HAL_RCC_GetSysClockFreq+0x188>)
 80022f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022f2:	e098      	b.n	8002426 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022f4:	4b4f      	ldr	r3, [pc, #316]	; (8002434 <HAL_RCC_GetSysClockFreq+0x180>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022fc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022fe:	4b4d      	ldr	r3, [pc, #308]	; (8002434 <HAL_RCC_GetSysClockFreq+0x180>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d028      	beq.n	800235c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800230a:	4b4a      	ldr	r3, [pc, #296]	; (8002434 <HAL_RCC_GetSysClockFreq+0x180>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	099b      	lsrs	r3, r3, #6
 8002310:	2200      	movs	r2, #0
 8002312:	623b      	str	r3, [r7, #32]
 8002314:	627a      	str	r2, [r7, #36]	; 0x24
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800231c:	2100      	movs	r1, #0
 800231e:	4b47      	ldr	r3, [pc, #284]	; (800243c <HAL_RCC_GetSysClockFreq+0x188>)
 8002320:	fb03 f201 	mul.w	r2, r3, r1
 8002324:	2300      	movs	r3, #0
 8002326:	fb00 f303 	mul.w	r3, r0, r3
 800232a:	4413      	add	r3, r2
 800232c:	4a43      	ldr	r2, [pc, #268]	; (800243c <HAL_RCC_GetSysClockFreq+0x188>)
 800232e:	fba0 1202 	umull	r1, r2, r0, r2
 8002332:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002334:	460a      	mov	r2, r1
 8002336:	62ba      	str	r2, [r7, #40]	; 0x28
 8002338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800233a:	4413      	add	r3, r2
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800233e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002340:	2200      	movs	r2, #0
 8002342:	61bb      	str	r3, [r7, #24]
 8002344:	61fa      	str	r2, [r7, #28]
 8002346:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800234a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800234e:	f7fd ff41 	bl	80001d4 <__aeabi_uldivmod>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4613      	mov	r3, r2
 8002358:	63fb      	str	r3, [r7, #60]	; 0x3c
 800235a:	e053      	b.n	8002404 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800235c:	4b35      	ldr	r3, [pc, #212]	; (8002434 <HAL_RCC_GetSysClockFreq+0x180>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	099b      	lsrs	r3, r3, #6
 8002362:	2200      	movs	r2, #0
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	617a      	str	r2, [r7, #20]
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800236e:	f04f 0b00 	mov.w	fp, #0
 8002372:	4652      	mov	r2, sl
 8002374:	465b      	mov	r3, fp
 8002376:	f04f 0000 	mov.w	r0, #0
 800237a:	f04f 0100 	mov.w	r1, #0
 800237e:	0159      	lsls	r1, r3, #5
 8002380:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002384:	0150      	lsls	r0, r2, #5
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	ebb2 080a 	subs.w	r8, r2, sl
 800238e:	eb63 090b 	sbc.w	r9, r3, fp
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	f04f 0300 	mov.w	r3, #0
 800239a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800239e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80023a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80023a6:	ebb2 0408 	subs.w	r4, r2, r8
 80023aa:	eb63 0509 	sbc.w	r5, r3, r9
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	00eb      	lsls	r3, r5, #3
 80023b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023bc:	00e2      	lsls	r2, r4, #3
 80023be:	4614      	mov	r4, r2
 80023c0:	461d      	mov	r5, r3
 80023c2:	eb14 030a 	adds.w	r3, r4, sl
 80023c6:	603b      	str	r3, [r7, #0]
 80023c8:	eb45 030b 	adc.w	r3, r5, fp
 80023cc:	607b      	str	r3, [r7, #4]
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	f04f 0300 	mov.w	r3, #0
 80023d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023da:	4629      	mov	r1, r5
 80023dc:	028b      	lsls	r3, r1, #10
 80023de:	4621      	mov	r1, r4
 80023e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023e4:	4621      	mov	r1, r4
 80023e6:	028a      	lsls	r2, r1, #10
 80023e8:	4610      	mov	r0, r2
 80023ea:	4619      	mov	r1, r3
 80023ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ee:	2200      	movs	r2, #0
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	60fa      	str	r2, [r7, #12]
 80023f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023f8:	f7fd feec 	bl	80001d4 <__aeabi_uldivmod>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4613      	mov	r3, r2
 8002402:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002404:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <HAL_RCC_GetSysClockFreq+0x180>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	0c1b      	lsrs	r3, r3, #16
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	3301      	adds	r3, #1
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002414:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002418:	fbb2 f3f3 	udiv	r3, r2, r3
 800241c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800241e:	e002      	b.n	8002426 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_RCC_GetSysClockFreq+0x184>)
 8002422:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002424:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002428:	4618      	mov	r0, r3
 800242a:	3740      	adds	r7, #64	; 0x40
 800242c:	46bd      	mov	sp, r7
 800242e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800
 8002438:	00f42400 	.word	0x00f42400
 800243c:	017d7840 	.word	0x017d7840

08002440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002444:	4b03      	ldr	r3, [pc, #12]	; (8002454 <HAL_RCC_GetHCLKFreq+0x14>)
 8002446:	681b      	ldr	r3, [r3, #0]
}
 8002448:	4618      	mov	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	20000000 	.word	0x20000000

08002458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800245c:	f7ff fff0 	bl	8002440 <HAL_RCC_GetHCLKFreq>
 8002460:	4602      	mov	r2, r0
 8002462:	4b05      	ldr	r3, [pc, #20]	; (8002478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	0a9b      	lsrs	r3, r3, #10
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	4903      	ldr	r1, [pc, #12]	; (800247c <HAL_RCC_GetPCLK1Freq+0x24>)
 800246e:	5ccb      	ldrb	r3, [r1, r3]
 8002470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002474:	4618      	mov	r0, r3
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40023800 	.word	0x40023800
 800247c:	08003a48 	.word	0x08003a48

08002480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002484:	f7ff ffdc 	bl	8002440 <HAL_RCC_GetHCLKFreq>
 8002488:	4602      	mov	r2, r0
 800248a:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	0b5b      	lsrs	r3, r3, #13
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	4903      	ldr	r1, [pc, #12]	; (80024a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002496:	5ccb      	ldrb	r3, [r1, r3]
 8002498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800249c:	4618      	mov	r0, r3
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40023800 	.word	0x40023800
 80024a4:	08003a48 	.word	0x08003a48

080024a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e041      	b.n	800253e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d106      	bne.n	80024d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7fe fb0e 	bl	8000af0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2202      	movs	r2, #2
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3304      	adds	r3, #4
 80024e4:	4619      	mov	r1, r3
 80024e6:	4610      	mov	r0, r2
 80024e8:	f000 fa92 	bl	8002a10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b01      	cmp	r3, #1
 800255a:	d001      	beq.n	8002560 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e044      	b.n	80025ea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2202      	movs	r2, #2
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a1e      	ldr	r2, [pc, #120]	; (80025f8 <HAL_TIM_Base_Start_IT+0xb0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d018      	beq.n	80025b4 <HAL_TIM_Base_Start_IT+0x6c>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800258a:	d013      	beq.n	80025b4 <HAL_TIM_Base_Start_IT+0x6c>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a1a      	ldr	r2, [pc, #104]	; (80025fc <HAL_TIM_Base_Start_IT+0xb4>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d00e      	beq.n	80025b4 <HAL_TIM_Base_Start_IT+0x6c>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a19      	ldr	r2, [pc, #100]	; (8002600 <HAL_TIM_Base_Start_IT+0xb8>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d009      	beq.n	80025b4 <HAL_TIM_Base_Start_IT+0x6c>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a17      	ldr	r2, [pc, #92]	; (8002604 <HAL_TIM_Base_Start_IT+0xbc>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d004      	beq.n	80025b4 <HAL_TIM_Base_Start_IT+0x6c>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a16      	ldr	r2, [pc, #88]	; (8002608 <HAL_TIM_Base_Start_IT+0xc0>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d111      	bne.n	80025d8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2b06      	cmp	r3, #6
 80025c4:	d010      	beq.n	80025e8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f042 0201 	orr.w	r2, r2, #1
 80025d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025d6:	e007      	b.n	80025e8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0201 	orr.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40010000 	.word	0x40010000
 80025fc:	40000400 	.word	0x40000400
 8002600:	40000800 	.word	0x40000800
 8002604:	40000c00 	.word	0x40000c00
 8002608:	40014000 	.word	0x40014000

0800260c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b02      	cmp	r3, #2
 8002620:	d122      	bne.n	8002668 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b02      	cmp	r3, #2
 800262e:	d11b      	bne.n	8002668 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f06f 0202 	mvn.w	r2, #2
 8002638:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f9bf 	bl	80029d2 <HAL_TIM_IC_CaptureCallback>
 8002654:	e005      	b.n	8002662 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f9b1 	bl	80029be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f9c2 	bl	80029e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	2b04      	cmp	r3, #4
 8002674:	d122      	bne.n	80026bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b04      	cmp	r3, #4
 8002682:	d11b      	bne.n	80026bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f06f 0204 	mvn.w	r2, #4
 800268c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2202      	movs	r2, #2
 8002692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f995 	bl	80029d2 <HAL_TIM_IC_CaptureCallback>
 80026a8:	e005      	b.n	80026b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f987 	bl	80029be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f998 	bl	80029e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d122      	bne.n	8002710 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d11b      	bne.n	8002710 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f06f 0208 	mvn.w	r2, #8
 80026e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2204      	movs	r2, #4
 80026e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f96b 	bl	80029d2 <HAL_TIM_IC_CaptureCallback>
 80026fc:	e005      	b.n	800270a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f95d 	bl	80029be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f96e 	bl	80029e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f003 0310 	and.w	r3, r3, #16
 800271a:	2b10      	cmp	r3, #16
 800271c:	d122      	bne.n	8002764 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f003 0310 	and.w	r3, r3, #16
 8002728:	2b10      	cmp	r3, #16
 800272a:	d11b      	bne.n	8002764 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0210 	mvn.w	r2, #16
 8002734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2208      	movs	r2, #8
 800273a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f941 	bl	80029d2 <HAL_TIM_IC_CaptureCallback>
 8002750:	e005      	b.n	800275e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f933 	bl	80029be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f944 	bl	80029e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b01      	cmp	r3, #1
 8002770:	d10e      	bne.n	8002790 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b01      	cmp	r3, #1
 800277e:	d107      	bne.n	8002790 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f06f 0201 	mvn.w	r2, #1
 8002788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f90d 	bl	80029aa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279a:	2b80      	cmp	r3, #128	; 0x80
 800279c:	d10e      	bne.n	80027bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a8:	2b80      	cmp	r3, #128	; 0x80
 80027aa:	d107      	bne.n	80027bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 fabc 	bl	8002d34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c6:	2b40      	cmp	r3, #64	; 0x40
 80027c8:	d10e      	bne.n	80027e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d4:	2b40      	cmp	r3, #64	; 0x40
 80027d6:	d107      	bne.n	80027e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f909 	bl	80029fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	f003 0320 	and.w	r3, r3, #32
 80027f2:	2b20      	cmp	r3, #32
 80027f4:	d10e      	bne.n	8002814 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f003 0320 	and.w	r3, r3, #32
 8002800:	2b20      	cmp	r3, #32
 8002802:	d107      	bne.n	8002814 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f06f 0220 	mvn.w	r2, #32
 800280c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 fa86 	bl	8002d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002814:	bf00      	nop
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002830:	2b01      	cmp	r3, #1
 8002832:	d101      	bne.n	8002838 <HAL_TIM_ConfigClockSource+0x1c>
 8002834:	2302      	movs	r3, #2
 8002836:	e0b4      	b.n	80029a2 <HAL_TIM_ConfigClockSource+0x186>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002856:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800285e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002870:	d03e      	beq.n	80028f0 <HAL_TIM_ConfigClockSource+0xd4>
 8002872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002876:	f200 8087 	bhi.w	8002988 <HAL_TIM_ConfigClockSource+0x16c>
 800287a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800287e:	f000 8086 	beq.w	800298e <HAL_TIM_ConfigClockSource+0x172>
 8002882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002886:	d87f      	bhi.n	8002988 <HAL_TIM_ConfigClockSource+0x16c>
 8002888:	2b70      	cmp	r3, #112	; 0x70
 800288a:	d01a      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0xa6>
 800288c:	2b70      	cmp	r3, #112	; 0x70
 800288e:	d87b      	bhi.n	8002988 <HAL_TIM_ConfigClockSource+0x16c>
 8002890:	2b60      	cmp	r3, #96	; 0x60
 8002892:	d050      	beq.n	8002936 <HAL_TIM_ConfigClockSource+0x11a>
 8002894:	2b60      	cmp	r3, #96	; 0x60
 8002896:	d877      	bhi.n	8002988 <HAL_TIM_ConfigClockSource+0x16c>
 8002898:	2b50      	cmp	r3, #80	; 0x50
 800289a:	d03c      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0xfa>
 800289c:	2b50      	cmp	r3, #80	; 0x50
 800289e:	d873      	bhi.n	8002988 <HAL_TIM_ConfigClockSource+0x16c>
 80028a0:	2b40      	cmp	r3, #64	; 0x40
 80028a2:	d058      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0x13a>
 80028a4:	2b40      	cmp	r3, #64	; 0x40
 80028a6:	d86f      	bhi.n	8002988 <HAL_TIM_ConfigClockSource+0x16c>
 80028a8:	2b30      	cmp	r3, #48	; 0x30
 80028aa:	d064      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0x15a>
 80028ac:	2b30      	cmp	r3, #48	; 0x30
 80028ae:	d86b      	bhi.n	8002988 <HAL_TIM_ConfigClockSource+0x16c>
 80028b0:	2b20      	cmp	r3, #32
 80028b2:	d060      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0x15a>
 80028b4:	2b20      	cmp	r3, #32
 80028b6:	d867      	bhi.n	8002988 <HAL_TIM_ConfigClockSource+0x16c>
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d05c      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0x15a>
 80028bc:	2b10      	cmp	r3, #16
 80028be:	d05a      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0x15a>
 80028c0:	e062      	b.n	8002988 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6818      	ldr	r0, [r3, #0]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	6899      	ldr	r1, [r3, #8]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f000 f997 	bl	8002c04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	609a      	str	r2, [r3, #8]
      break;
 80028ee:	e04f      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6818      	ldr	r0, [r3, #0]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	6899      	ldr	r1, [r3, #8]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f000 f980 	bl	8002c04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002912:	609a      	str	r2, [r3, #8]
      break;
 8002914:	e03c      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	6859      	ldr	r1, [r3, #4]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	461a      	mov	r2, r3
 8002924:	f000 f8f4 	bl	8002b10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2150      	movs	r1, #80	; 0x50
 800292e:	4618      	mov	r0, r3
 8002930:	f000 f94d 	bl	8002bce <TIM_ITRx_SetConfig>
      break;
 8002934:	e02c      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6859      	ldr	r1, [r3, #4]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	461a      	mov	r2, r3
 8002944:	f000 f913 	bl	8002b6e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2160      	movs	r1, #96	; 0x60
 800294e:	4618      	mov	r0, r3
 8002950:	f000 f93d 	bl	8002bce <TIM_ITRx_SetConfig>
      break;
 8002954:	e01c      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6818      	ldr	r0, [r3, #0]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	6859      	ldr	r1, [r3, #4]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	461a      	mov	r2, r3
 8002964:	f000 f8d4 	bl	8002b10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2140      	movs	r1, #64	; 0x40
 800296e:	4618      	mov	r0, r3
 8002970:	f000 f92d 	bl	8002bce <TIM_ITRx_SetConfig>
      break;
 8002974:	e00c      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4619      	mov	r1, r3
 8002980:	4610      	mov	r0, r2
 8002982:	f000 f924 	bl	8002bce <TIM_ITRx_SetConfig>
      break;
 8002986:	e003      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	73fb      	strb	r3, [r7, #15]
      break;
 800298c:	e000      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800298e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
	...

08002a10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a34      	ldr	r2, [pc, #208]	; (8002af4 <TIM_Base_SetConfig+0xe4>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d00f      	beq.n	8002a48 <TIM_Base_SetConfig+0x38>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2e:	d00b      	beq.n	8002a48 <TIM_Base_SetConfig+0x38>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a31      	ldr	r2, [pc, #196]	; (8002af8 <TIM_Base_SetConfig+0xe8>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d007      	beq.n	8002a48 <TIM_Base_SetConfig+0x38>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a30      	ldr	r2, [pc, #192]	; (8002afc <TIM_Base_SetConfig+0xec>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d003      	beq.n	8002a48 <TIM_Base_SetConfig+0x38>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a2f      	ldr	r2, [pc, #188]	; (8002b00 <TIM_Base_SetConfig+0xf0>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d108      	bne.n	8002a5a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a25      	ldr	r2, [pc, #148]	; (8002af4 <TIM_Base_SetConfig+0xe4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d01b      	beq.n	8002a9a <TIM_Base_SetConfig+0x8a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a68:	d017      	beq.n	8002a9a <TIM_Base_SetConfig+0x8a>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a22      	ldr	r2, [pc, #136]	; (8002af8 <TIM_Base_SetConfig+0xe8>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d013      	beq.n	8002a9a <TIM_Base_SetConfig+0x8a>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a21      	ldr	r2, [pc, #132]	; (8002afc <TIM_Base_SetConfig+0xec>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d00f      	beq.n	8002a9a <TIM_Base_SetConfig+0x8a>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a20      	ldr	r2, [pc, #128]	; (8002b00 <TIM_Base_SetConfig+0xf0>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d00b      	beq.n	8002a9a <TIM_Base_SetConfig+0x8a>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a1f      	ldr	r2, [pc, #124]	; (8002b04 <TIM_Base_SetConfig+0xf4>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d007      	beq.n	8002a9a <TIM_Base_SetConfig+0x8a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a1e      	ldr	r2, [pc, #120]	; (8002b08 <TIM_Base_SetConfig+0xf8>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d003      	beq.n	8002a9a <TIM_Base_SetConfig+0x8a>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a1d      	ldr	r2, [pc, #116]	; (8002b0c <TIM_Base_SetConfig+0xfc>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d108      	bne.n	8002aac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a08      	ldr	r2, [pc, #32]	; (8002af4 <TIM_Base_SetConfig+0xe4>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d103      	bne.n	8002ae0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	691a      	ldr	r2, [r3, #16]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	615a      	str	r2, [r3, #20]
}
 8002ae6:	bf00      	nop
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	40010000 	.word	0x40010000
 8002af8:	40000400 	.word	0x40000400
 8002afc:	40000800 	.word	0x40000800
 8002b00:	40000c00 	.word	0x40000c00
 8002b04:	40014000 	.word	0x40014000
 8002b08:	40014400 	.word	0x40014400
 8002b0c:	40014800 	.word	0x40014800

08002b10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	f023 0201 	bic.w	r2, r3, #1
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f023 030a 	bic.w	r3, r3, #10
 8002b4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	621a      	str	r2, [r3, #32]
}
 8002b62:	bf00      	nop
 8002b64:	371c      	adds	r7, #28
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b087      	sub	sp, #28
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	f023 0210 	bic.w	r2, r3, #16
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	031b      	lsls	r3, r3, #12
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002baa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	621a      	str	r2, [r3, #32]
}
 8002bc2:	bf00      	nop
 8002bc4:	371c      	adds	r7, #28
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b085      	sub	sp, #20
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
 8002bd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f043 0307 	orr.w	r3, r3, #7
 8002bf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	609a      	str	r2, [r3, #8]
}
 8002bf8:	bf00      	nop
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
 8002c10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	021a      	lsls	r2, r3, #8
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	609a      	str	r2, [r3, #8]
}
 8002c38:	bf00      	nop
 8002c3a:	371c      	adds	r7, #28
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d101      	bne.n	8002c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c58:	2302      	movs	r3, #2
 8002c5a:	e050      	b.n	8002cfe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a1c      	ldr	r2, [pc, #112]	; (8002d0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d018      	beq.n	8002cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca8:	d013      	beq.n	8002cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a18      	ldr	r2, [pc, #96]	; (8002d10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d00e      	beq.n	8002cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a16      	ldr	r2, [pc, #88]	; (8002d14 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d009      	beq.n	8002cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a15      	ldr	r2, [pc, #84]	; (8002d18 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d004      	beq.n	8002cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a13      	ldr	r2, [pc, #76]	; (8002d1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d10c      	bne.n	8002cec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40010000 	.word	0x40010000
 8002d10:	40000400 	.word	0x40000400
 8002d14:	40000800 	.word	0x40000800
 8002d18:	40000c00 	.word	0x40000c00
 8002d1c:	40014000 	.word	0x40014000

08002d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e03f      	b.n	8002dda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d106      	bne.n	8002d74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7fd ff2e 	bl	8000bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2224      	movs	r2, #36	; 0x24
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f829 	bl	8002de4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	691a      	ldr	r2, [r3, #16]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002da0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695a      	ldr	r2, [r3, #20]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002db0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002de8:	b0c0      	sub	sp, #256	; 0x100
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e00:	68d9      	ldr	r1, [r3, #12]
 8002e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	ea40 0301 	orr.w	r3, r0, r1
 8002e0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	431a      	orrs	r2, r3
 8002e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e3c:	f021 010c 	bic.w	r1, r1, #12
 8002e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e4a:	430b      	orrs	r3, r1
 8002e4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e5e:	6999      	ldr	r1, [r3, #24]
 8002e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	ea40 0301 	orr.w	r3, r0, r1
 8002e6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	4b8f      	ldr	r3, [pc, #572]	; (80030b0 <UART_SetConfig+0x2cc>)
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d005      	beq.n	8002e84 <UART_SetConfig+0xa0>
 8002e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	4b8d      	ldr	r3, [pc, #564]	; (80030b4 <UART_SetConfig+0x2d0>)
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d104      	bne.n	8002e8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e84:	f7ff fafc 	bl	8002480 <HAL_RCC_GetPCLK2Freq>
 8002e88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002e8c:	e003      	b.n	8002e96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e8e:	f7ff fae3 	bl	8002458 <HAL_RCC_GetPCLK1Freq>
 8002e92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ea0:	f040 810c 	bne.w	80030bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002eae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002eb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002eb6:	4622      	mov	r2, r4
 8002eb8:	462b      	mov	r3, r5
 8002eba:	1891      	adds	r1, r2, r2
 8002ebc:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ebe:	415b      	adcs	r3, r3
 8002ec0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ec2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ec6:	4621      	mov	r1, r4
 8002ec8:	eb12 0801 	adds.w	r8, r2, r1
 8002ecc:	4629      	mov	r1, r5
 8002ece:	eb43 0901 	adc.w	r9, r3, r1
 8002ed2:	f04f 0200 	mov.w	r2, #0
 8002ed6:	f04f 0300 	mov.w	r3, #0
 8002eda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ede:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ee2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ee6:	4690      	mov	r8, r2
 8002ee8:	4699      	mov	r9, r3
 8002eea:	4623      	mov	r3, r4
 8002eec:	eb18 0303 	adds.w	r3, r8, r3
 8002ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ef4:	462b      	mov	r3, r5
 8002ef6:	eb49 0303 	adc.w	r3, r9, r3
 8002efa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f0a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f12:	460b      	mov	r3, r1
 8002f14:	18db      	adds	r3, r3, r3
 8002f16:	653b      	str	r3, [r7, #80]	; 0x50
 8002f18:	4613      	mov	r3, r2
 8002f1a:	eb42 0303 	adc.w	r3, r2, r3
 8002f1e:	657b      	str	r3, [r7, #84]	; 0x54
 8002f20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f28:	f7fd f954 	bl	80001d4 <__aeabi_uldivmod>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	4b61      	ldr	r3, [pc, #388]	; (80030b8 <UART_SetConfig+0x2d4>)
 8002f32:	fba3 2302 	umull	r2, r3, r3, r2
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	011c      	lsls	r4, r3, #4
 8002f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f44:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f4c:	4642      	mov	r2, r8
 8002f4e:	464b      	mov	r3, r9
 8002f50:	1891      	adds	r1, r2, r2
 8002f52:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f54:	415b      	adcs	r3, r3
 8002f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f5c:	4641      	mov	r1, r8
 8002f5e:	eb12 0a01 	adds.w	sl, r2, r1
 8002f62:	4649      	mov	r1, r9
 8002f64:	eb43 0b01 	adc.w	fp, r3, r1
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f7c:	4692      	mov	sl, r2
 8002f7e:	469b      	mov	fp, r3
 8002f80:	4643      	mov	r3, r8
 8002f82:	eb1a 0303 	adds.w	r3, sl, r3
 8002f86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f8a:	464b      	mov	r3, r9
 8002f8c:	eb4b 0303 	adc.w	r3, fp, r3
 8002f90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fa0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002fa4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	18db      	adds	r3, r3, r3
 8002fac:	643b      	str	r3, [r7, #64]	; 0x40
 8002fae:	4613      	mov	r3, r2
 8002fb0:	eb42 0303 	adc.w	r3, r2, r3
 8002fb4:	647b      	str	r3, [r7, #68]	; 0x44
 8002fb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002fba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002fbe:	f7fd f909 	bl	80001d4 <__aeabi_uldivmod>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	4b3b      	ldr	r3, [pc, #236]	; (80030b8 <UART_SetConfig+0x2d4>)
 8002fca:	fba3 2301 	umull	r2, r3, r3, r1
 8002fce:	095b      	lsrs	r3, r3, #5
 8002fd0:	2264      	movs	r2, #100	; 0x64
 8002fd2:	fb02 f303 	mul.w	r3, r2, r3
 8002fd6:	1acb      	subs	r3, r1, r3
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002fde:	4b36      	ldr	r3, [pc, #216]	; (80030b8 <UART_SetConfig+0x2d4>)
 8002fe0:	fba3 2302 	umull	r2, r3, r3, r2
 8002fe4:	095b      	lsrs	r3, r3, #5
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fec:	441c      	add	r4, r3
 8002fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ff8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002ffc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003000:	4642      	mov	r2, r8
 8003002:	464b      	mov	r3, r9
 8003004:	1891      	adds	r1, r2, r2
 8003006:	63b9      	str	r1, [r7, #56]	; 0x38
 8003008:	415b      	adcs	r3, r3
 800300a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800300c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003010:	4641      	mov	r1, r8
 8003012:	1851      	adds	r1, r2, r1
 8003014:	6339      	str	r1, [r7, #48]	; 0x30
 8003016:	4649      	mov	r1, r9
 8003018:	414b      	adcs	r3, r1
 800301a:	637b      	str	r3, [r7, #52]	; 0x34
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	f04f 0300 	mov.w	r3, #0
 8003024:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003028:	4659      	mov	r1, fp
 800302a:	00cb      	lsls	r3, r1, #3
 800302c:	4651      	mov	r1, sl
 800302e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003032:	4651      	mov	r1, sl
 8003034:	00ca      	lsls	r2, r1, #3
 8003036:	4610      	mov	r0, r2
 8003038:	4619      	mov	r1, r3
 800303a:	4603      	mov	r3, r0
 800303c:	4642      	mov	r2, r8
 800303e:	189b      	adds	r3, r3, r2
 8003040:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003044:	464b      	mov	r3, r9
 8003046:	460a      	mov	r2, r1
 8003048:	eb42 0303 	adc.w	r3, r2, r3
 800304c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800305c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003060:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003064:	460b      	mov	r3, r1
 8003066:	18db      	adds	r3, r3, r3
 8003068:	62bb      	str	r3, [r7, #40]	; 0x28
 800306a:	4613      	mov	r3, r2
 800306c:	eb42 0303 	adc.w	r3, r2, r3
 8003070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003072:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003076:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800307a:	f7fd f8ab 	bl	80001d4 <__aeabi_uldivmod>
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	4b0d      	ldr	r3, [pc, #52]	; (80030b8 <UART_SetConfig+0x2d4>)
 8003084:	fba3 1302 	umull	r1, r3, r3, r2
 8003088:	095b      	lsrs	r3, r3, #5
 800308a:	2164      	movs	r1, #100	; 0x64
 800308c:	fb01 f303 	mul.w	r3, r1, r3
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	3332      	adds	r3, #50	; 0x32
 8003096:	4a08      	ldr	r2, [pc, #32]	; (80030b8 <UART_SetConfig+0x2d4>)
 8003098:	fba2 2303 	umull	r2, r3, r2, r3
 800309c:	095b      	lsrs	r3, r3, #5
 800309e:	f003 0207 	and.w	r2, r3, #7
 80030a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4422      	add	r2, r4
 80030aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030ac:	e105      	b.n	80032ba <UART_SetConfig+0x4d6>
 80030ae:	bf00      	nop
 80030b0:	40011000 	.word	0x40011000
 80030b4:	40011400 	.word	0x40011400
 80030b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030c0:	2200      	movs	r2, #0
 80030c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80030c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80030ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80030ce:	4642      	mov	r2, r8
 80030d0:	464b      	mov	r3, r9
 80030d2:	1891      	adds	r1, r2, r2
 80030d4:	6239      	str	r1, [r7, #32]
 80030d6:	415b      	adcs	r3, r3
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
 80030da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030de:	4641      	mov	r1, r8
 80030e0:	1854      	adds	r4, r2, r1
 80030e2:	4649      	mov	r1, r9
 80030e4:	eb43 0501 	adc.w	r5, r3, r1
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	00eb      	lsls	r3, r5, #3
 80030f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030f6:	00e2      	lsls	r2, r4, #3
 80030f8:	4614      	mov	r4, r2
 80030fa:	461d      	mov	r5, r3
 80030fc:	4643      	mov	r3, r8
 80030fe:	18e3      	adds	r3, r4, r3
 8003100:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003104:	464b      	mov	r3, r9
 8003106:	eb45 0303 	adc.w	r3, r5, r3
 800310a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800310e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800311a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	f04f 0300 	mov.w	r3, #0
 8003126:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800312a:	4629      	mov	r1, r5
 800312c:	008b      	lsls	r3, r1, #2
 800312e:	4621      	mov	r1, r4
 8003130:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003134:	4621      	mov	r1, r4
 8003136:	008a      	lsls	r2, r1, #2
 8003138:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800313c:	f7fd f84a 	bl	80001d4 <__aeabi_uldivmod>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4b60      	ldr	r3, [pc, #384]	; (80032c8 <UART_SetConfig+0x4e4>)
 8003146:	fba3 2302 	umull	r2, r3, r3, r2
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	011c      	lsls	r4, r3, #4
 800314e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003152:	2200      	movs	r2, #0
 8003154:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003158:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800315c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003160:	4642      	mov	r2, r8
 8003162:	464b      	mov	r3, r9
 8003164:	1891      	adds	r1, r2, r2
 8003166:	61b9      	str	r1, [r7, #24]
 8003168:	415b      	adcs	r3, r3
 800316a:	61fb      	str	r3, [r7, #28]
 800316c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003170:	4641      	mov	r1, r8
 8003172:	1851      	adds	r1, r2, r1
 8003174:	6139      	str	r1, [r7, #16]
 8003176:	4649      	mov	r1, r9
 8003178:	414b      	adcs	r3, r1
 800317a:	617b      	str	r3, [r7, #20]
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003188:	4659      	mov	r1, fp
 800318a:	00cb      	lsls	r3, r1, #3
 800318c:	4651      	mov	r1, sl
 800318e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003192:	4651      	mov	r1, sl
 8003194:	00ca      	lsls	r2, r1, #3
 8003196:	4610      	mov	r0, r2
 8003198:	4619      	mov	r1, r3
 800319a:	4603      	mov	r3, r0
 800319c:	4642      	mov	r2, r8
 800319e:	189b      	adds	r3, r3, r2
 80031a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031a4:	464b      	mov	r3, r9
 80031a6:	460a      	mov	r2, r1
 80031a8:	eb42 0303 	adc.w	r3, r2, r3
 80031ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80031ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	f04f 0300 	mov.w	r3, #0
 80031c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80031c8:	4649      	mov	r1, r9
 80031ca:	008b      	lsls	r3, r1, #2
 80031cc:	4641      	mov	r1, r8
 80031ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031d2:	4641      	mov	r1, r8
 80031d4:	008a      	lsls	r2, r1, #2
 80031d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80031da:	f7fc fffb 	bl	80001d4 <__aeabi_uldivmod>
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	4b39      	ldr	r3, [pc, #228]	; (80032c8 <UART_SetConfig+0x4e4>)
 80031e4:	fba3 1302 	umull	r1, r3, r3, r2
 80031e8:	095b      	lsrs	r3, r3, #5
 80031ea:	2164      	movs	r1, #100	; 0x64
 80031ec:	fb01 f303 	mul.w	r3, r1, r3
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	3332      	adds	r3, #50	; 0x32
 80031f6:	4a34      	ldr	r2, [pc, #208]	; (80032c8 <UART_SetConfig+0x4e4>)
 80031f8:	fba2 2303 	umull	r2, r3, r2, r3
 80031fc:	095b      	lsrs	r3, r3, #5
 80031fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003202:	441c      	add	r4, r3
 8003204:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003208:	2200      	movs	r2, #0
 800320a:	673b      	str	r3, [r7, #112]	; 0x70
 800320c:	677a      	str	r2, [r7, #116]	; 0x74
 800320e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003212:	4642      	mov	r2, r8
 8003214:	464b      	mov	r3, r9
 8003216:	1891      	adds	r1, r2, r2
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	415b      	adcs	r3, r3
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003222:	4641      	mov	r1, r8
 8003224:	1851      	adds	r1, r2, r1
 8003226:	6039      	str	r1, [r7, #0]
 8003228:	4649      	mov	r1, r9
 800322a:	414b      	adcs	r3, r1
 800322c:	607b      	str	r3, [r7, #4]
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	f04f 0300 	mov.w	r3, #0
 8003236:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800323a:	4659      	mov	r1, fp
 800323c:	00cb      	lsls	r3, r1, #3
 800323e:	4651      	mov	r1, sl
 8003240:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003244:	4651      	mov	r1, sl
 8003246:	00ca      	lsls	r2, r1, #3
 8003248:	4610      	mov	r0, r2
 800324a:	4619      	mov	r1, r3
 800324c:	4603      	mov	r3, r0
 800324e:	4642      	mov	r2, r8
 8003250:	189b      	adds	r3, r3, r2
 8003252:	66bb      	str	r3, [r7, #104]	; 0x68
 8003254:	464b      	mov	r3, r9
 8003256:	460a      	mov	r2, r1
 8003258:	eb42 0303 	adc.w	r3, r2, r3
 800325c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800325e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	663b      	str	r3, [r7, #96]	; 0x60
 8003268:	667a      	str	r2, [r7, #100]	; 0x64
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	f04f 0300 	mov.w	r3, #0
 8003272:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003276:	4649      	mov	r1, r9
 8003278:	008b      	lsls	r3, r1, #2
 800327a:	4641      	mov	r1, r8
 800327c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003280:	4641      	mov	r1, r8
 8003282:	008a      	lsls	r2, r1, #2
 8003284:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003288:	f7fc ffa4 	bl	80001d4 <__aeabi_uldivmod>
 800328c:	4602      	mov	r2, r0
 800328e:	460b      	mov	r3, r1
 8003290:	4b0d      	ldr	r3, [pc, #52]	; (80032c8 <UART_SetConfig+0x4e4>)
 8003292:	fba3 1302 	umull	r1, r3, r3, r2
 8003296:	095b      	lsrs	r3, r3, #5
 8003298:	2164      	movs	r1, #100	; 0x64
 800329a:	fb01 f303 	mul.w	r3, r1, r3
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	3332      	adds	r3, #50	; 0x32
 80032a4:	4a08      	ldr	r2, [pc, #32]	; (80032c8 <UART_SetConfig+0x4e4>)
 80032a6:	fba2 2303 	umull	r2, r3, r2, r3
 80032aa:	095b      	lsrs	r3, r3, #5
 80032ac:	f003 020f 	and.w	r2, r3, #15
 80032b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4422      	add	r2, r4
 80032b8:	609a      	str	r2, [r3, #8]
}
 80032ba:	bf00      	nop
 80032bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80032c0:	46bd      	mov	sp, r7
 80032c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032c6:	bf00      	nop
 80032c8:	51eb851f 	.word	0x51eb851f

080032cc <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80032d0:	bf00      	nop
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
	...

080032dc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af04      	add	r7, sp, #16
 80032e2:	4603      	mov	r3, r0
 80032e4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80032e6:	f04f 33ff 	mov.w	r3, #4294967295
 80032ea:	9302      	str	r3, [sp, #8]
 80032ec:	2301      	movs	r3, #1
 80032ee:	9301      	str	r3, [sp, #4]
 80032f0:	1dfb      	adds	r3, r7, #7
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	2301      	movs	r3, #1
 80032f6:	2200      	movs	r2, #0
 80032f8:	2178      	movs	r1, #120	; 0x78
 80032fa:	4803      	ldr	r0, [pc, #12]	; (8003308 <ssd1306_WriteCommand+0x2c>)
 80032fc:	f7fe f964 	bl	80015c8 <HAL_I2C_Mem_Write>
}
 8003300:	bf00      	nop
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	20000040 	.word	0x20000040

0800330c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af04      	add	r7, sp, #16
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	b29b      	uxth	r3, r3
 800331a:	f04f 32ff 	mov.w	r2, #4294967295
 800331e:	9202      	str	r2, [sp, #8]
 8003320:	9301      	str	r3, [sp, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	2301      	movs	r3, #1
 8003328:	2240      	movs	r2, #64	; 0x40
 800332a:	2178      	movs	r1, #120	; 0x78
 800332c:	4803      	ldr	r0, [pc, #12]	; (800333c <ssd1306_WriteData+0x30>)
 800332e:	f7fe f94b 	bl	80015c8 <HAL_I2C_Mem_Write>
}
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	20000040 	.word	0x20000040

08003340 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003346:	f7ff ffc1 	bl	80032cc <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800334a:	2064      	movs	r0, #100	; 0x64
 800334c:	f7fd fd24 	bl	8000d98 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003350:	2000      	movs	r0, #0
 8003352:	f000 fab7 	bl	80038c4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003356:	2020      	movs	r0, #32
 8003358:	f7ff ffc0 	bl	80032dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800335c:	2000      	movs	r0, #0
 800335e:	f7ff ffbd 	bl	80032dc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003362:	20b0      	movs	r0, #176	; 0xb0
 8003364:	f7ff ffba 	bl	80032dc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003368:	20c8      	movs	r0, #200	; 0xc8
 800336a:	f7ff ffb7 	bl	80032dc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800336e:	2000      	movs	r0, #0
 8003370:	f7ff ffb4 	bl	80032dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003374:	2010      	movs	r0, #16
 8003376:	f7ff ffb1 	bl	80032dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800337a:	2040      	movs	r0, #64	; 0x40
 800337c:	f7ff ffae 	bl	80032dc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003380:	20ff      	movs	r0, #255	; 0xff
 8003382:	f000 fa8c 	bl	800389e <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003386:	20a1      	movs	r0, #161	; 0xa1
 8003388:	f7ff ffa8 	bl	80032dc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800338c:	20a6      	movs	r0, #166	; 0xa6
 800338e:	f7ff ffa5 	bl	80032dc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003392:	20a8      	movs	r0, #168	; 0xa8
 8003394:	f7ff ffa2 	bl	80032dc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003398:	203f      	movs	r0, #63	; 0x3f
 800339a:	f7ff ff9f 	bl	80032dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800339e:	20a4      	movs	r0, #164	; 0xa4
 80033a0:	f7ff ff9c 	bl	80032dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80033a4:	20d3      	movs	r0, #211	; 0xd3
 80033a6:	f7ff ff99 	bl	80032dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80033aa:	2000      	movs	r0, #0
 80033ac:	f7ff ff96 	bl	80032dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80033b0:	20d5      	movs	r0, #213	; 0xd5
 80033b2:	f7ff ff93 	bl	80032dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80033b6:	20f0      	movs	r0, #240	; 0xf0
 80033b8:	f7ff ff90 	bl	80032dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80033bc:	20d9      	movs	r0, #217	; 0xd9
 80033be:	f7ff ff8d 	bl	80032dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80033c2:	2022      	movs	r0, #34	; 0x22
 80033c4:	f7ff ff8a 	bl	80032dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80033c8:	20da      	movs	r0, #218	; 0xda
 80033ca:	f7ff ff87 	bl	80032dc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80033ce:	2012      	movs	r0, #18
 80033d0:	f7ff ff84 	bl	80032dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80033d4:	20db      	movs	r0, #219	; 0xdb
 80033d6:	f7ff ff81 	bl	80032dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80033da:	2020      	movs	r0, #32
 80033dc:	f7ff ff7e 	bl	80032dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80033e0:	208d      	movs	r0, #141	; 0x8d
 80033e2:	f7ff ff7b 	bl	80032dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80033e6:	2014      	movs	r0, #20
 80033e8:	f7ff ff78 	bl	80032dc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80033ec:	2001      	movs	r0, #1
 80033ee:	f000 fa69 	bl	80038c4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80033f2:	2000      	movs	r0, #0
 80033f4:	f000 f822 	bl	800343c <ssd1306_Fill>

    for(int i = 0; i < SSD1306_BUFFER_SIZE; i++){
 80033f8:	2300      	movs	r3, #0
 80033fa:	607b      	str	r3, [r7, #4]
 80033fc:	e007      	b.n	800340e <ssd1306_Init+0xce>
    	SSD1306_CurrentlyDisplayingBuffer[i] = 0;
 80033fe:	4a0d      	ldr	r2, [pc, #52]	; (8003434 <ssd1306_Init+0xf4>)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4413      	add	r3, r2
 8003404:	2200      	movs	r2, #0
 8003406:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < SSD1306_BUFFER_SIZE; i++){
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3301      	adds	r3, #1
 800340c:	607b      	str	r3, [r7, #4]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003414:	dbf3      	blt.n	80033fe <ssd1306_Init+0xbe>
    }

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003416:	f000 f835 	bl	8003484 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800341a:	4b07      	ldr	r3, [pc, #28]	; (8003438 <ssd1306_Init+0xf8>)
 800341c:	2200      	movs	r2, #0
 800341e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003420:	4b05      	ldr	r3, [pc, #20]	; (8003438 <ssd1306_Init+0xf8>)
 8003422:	2200      	movs	r2, #0
 8003424:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003426:	4b04      	ldr	r3, [pc, #16]	; (8003438 <ssd1306_Init+0xf8>)
 8003428:	2201      	movs	r2, #1
 800342a:	711a      	strb	r2, [r3, #4]
}
 800342c:	bf00      	nop
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	20000570 	.word	0x20000570
 8003438:	20000970 	.word	0x20000970

0800343c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8003446:	2300      	movs	r3, #0
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	e00d      	b.n	8003468 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800344c:	79fb      	ldrb	r3, [r7, #7]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <ssd1306_Fill+0x1a>
 8003452:	2100      	movs	r1, #0
 8003454:	e000      	b.n	8003458 <ssd1306_Fill+0x1c>
 8003456:	21ff      	movs	r1, #255	; 0xff
 8003458:	4a09      	ldr	r2, [pc, #36]	; (8003480 <ssd1306_Fill+0x44>)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4413      	add	r3, r2
 800345e:	460a      	mov	r2, r1
 8003460:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	3301      	adds	r3, #1
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800346e:	d3ed      	bcc.n	800344c <ssd1306_Fill+0x10>
    }
}
 8003470:	bf00      	nop
 8003472:	bf00      	nop
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	20000170 	.word	0x20000170

08003484 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
	uint8_t performWrite = 0;
 800348a:	2300      	movs	r3, #0
 800348c:	71fb      	strb	r3, [r7, #7]
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800348e:	2300      	movs	r3, #0
 8003490:	71bb      	strb	r3, [r7, #6]
 8003492:	e03a      	b.n	800350a <ssd1306_UpdateScreen+0x86>

    	for(int e = 0; e < SSD1306_WIDTH; e++){
 8003494:	2300      	movs	r3, #0
 8003496:	603b      	str	r3, [r7, #0]
 8003498:	e01e      	b.n	80034d8 <ssd1306_UpdateScreen+0x54>
    		if(SSD1306_CurrentlyDisplayingBuffer[SSD1306_WIDTH*i+e] != SSD1306_Buffer[SSD1306_WIDTH*i+e]){
 800349a:	79bb      	ldrb	r3, [r7, #6]
 800349c:	01da      	lsls	r2, r3, #7
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	4413      	add	r3, r2
 80034a2:	4a1e      	ldr	r2, [pc, #120]	; (800351c <ssd1306_UpdateScreen+0x98>)
 80034a4:	5cd2      	ldrb	r2, [r2, r3]
 80034a6:	79bb      	ldrb	r3, [r7, #6]
 80034a8:	01d9      	lsls	r1, r3, #7
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	440b      	add	r3, r1
 80034ae:	491c      	ldr	r1, [pc, #112]	; (8003520 <ssd1306_UpdateScreen+0x9c>)
 80034b0:	5ccb      	ldrb	r3, [r1, r3]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d00d      	beq.n	80034d2 <ssd1306_UpdateScreen+0x4e>
    			performWrite = 1;
 80034b6:	2301      	movs	r3, #1
 80034b8:	71fb      	strb	r3, [r7, #7]
    			SSD1306_CurrentlyDisplayingBuffer[SSD1306_WIDTH*i+e] = SSD1306_Buffer[SSD1306_WIDTH*i+e];
 80034ba:	79bb      	ldrb	r3, [r7, #6]
 80034bc:	01da      	lsls	r2, r3, #7
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	441a      	add	r2, r3
 80034c2:	79bb      	ldrb	r3, [r7, #6]
 80034c4:	01d9      	lsls	r1, r3, #7
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	440b      	add	r3, r1
 80034ca:	4915      	ldr	r1, [pc, #84]	; (8003520 <ssd1306_UpdateScreen+0x9c>)
 80034cc:	5c89      	ldrb	r1, [r1, r2]
 80034ce:	4a13      	ldr	r2, [pc, #76]	; (800351c <ssd1306_UpdateScreen+0x98>)
 80034d0:	54d1      	strb	r1, [r2, r3]
    	for(int e = 0; e < SSD1306_WIDTH; e++){
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	3301      	adds	r3, #1
 80034d6:	603b      	str	r3, [r7, #0]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	2b7f      	cmp	r3, #127	; 0x7f
 80034dc:	dddd      	ble.n	800349a <ssd1306_UpdateScreen+0x16>
    		}
    	}
    	if(performWrite){
 80034de:	79fb      	ldrb	r3, [r7, #7]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00d      	beq.n	8003500 <ssd1306_UpdateScreen+0x7c>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80034e4:	79bb      	ldrb	r3, [r7, #6]
 80034e6:	3b50      	subs	r3, #80	; 0x50
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff fef6 	bl	80032dc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80034f0:	79bb      	ldrb	r3, [r7, #6]
 80034f2:	01db      	lsls	r3, r3, #7
 80034f4:	4a0a      	ldr	r2, [pc, #40]	; (8003520 <ssd1306_UpdateScreen+0x9c>)
 80034f6:	4413      	add	r3, r2
 80034f8:	2180      	movs	r1, #128	; 0x80
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff ff06 	bl	800330c <ssd1306_WriteData>
    	}
        performWrite = 0;
 8003500:	2300      	movs	r3, #0
 8003502:	71fb      	strb	r3, [r7, #7]
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003504:	79bb      	ldrb	r3, [r7, #6]
 8003506:	3301      	adds	r3, #1
 8003508:	71bb      	strb	r3, [r7, #6]
 800350a:	79bb      	ldrb	r3, [r7, #6]
 800350c:	2b07      	cmp	r3, #7
 800350e:	d9c1      	bls.n	8003494 <ssd1306_UpdateScreen+0x10>
    }
}
 8003510:	bf00      	nop
 8003512:	bf00      	nop
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	20000570 	.word	0x20000570
 8003520:	20000170 	.word	0x20000170

08003524 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	71fb      	strb	r3, [r7, #7]
 800352e:	460b      	mov	r3, r1
 8003530:	71bb      	strb	r3, [r7, #6]
 8003532:	4613      	mov	r3, r2
 8003534:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353a:	2b00      	cmp	r3, #0
 800353c:	db3d      	blt.n	80035ba <ssd1306_DrawPixel+0x96>
 800353e:	79bb      	ldrb	r3, [r7, #6]
 8003540:	2b3f      	cmp	r3, #63	; 0x3f
 8003542:	d83a      	bhi.n	80035ba <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003544:	797b      	ldrb	r3, [r7, #5]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d11a      	bne.n	8003580 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800354a:	79fa      	ldrb	r2, [r7, #7]
 800354c:	79bb      	ldrb	r3, [r7, #6]
 800354e:	08db      	lsrs	r3, r3, #3
 8003550:	b2d8      	uxtb	r0, r3
 8003552:	4603      	mov	r3, r0
 8003554:	01db      	lsls	r3, r3, #7
 8003556:	4413      	add	r3, r2
 8003558:	4a1b      	ldr	r2, [pc, #108]	; (80035c8 <ssd1306_DrawPixel+0xa4>)
 800355a:	5cd3      	ldrb	r3, [r2, r3]
 800355c:	b25a      	sxtb	r2, r3
 800355e:	79bb      	ldrb	r3, [r7, #6]
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	2101      	movs	r1, #1
 8003566:	fa01 f303 	lsl.w	r3, r1, r3
 800356a:	b25b      	sxtb	r3, r3
 800356c:	4313      	orrs	r3, r2
 800356e:	b259      	sxtb	r1, r3
 8003570:	79fa      	ldrb	r2, [r7, #7]
 8003572:	4603      	mov	r3, r0
 8003574:	01db      	lsls	r3, r3, #7
 8003576:	4413      	add	r3, r2
 8003578:	b2c9      	uxtb	r1, r1
 800357a:	4a13      	ldr	r2, [pc, #76]	; (80035c8 <ssd1306_DrawPixel+0xa4>)
 800357c:	54d1      	strb	r1, [r2, r3]
 800357e:	e01d      	b.n	80035bc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003580:	79fa      	ldrb	r2, [r7, #7]
 8003582:	79bb      	ldrb	r3, [r7, #6]
 8003584:	08db      	lsrs	r3, r3, #3
 8003586:	b2d8      	uxtb	r0, r3
 8003588:	4603      	mov	r3, r0
 800358a:	01db      	lsls	r3, r3, #7
 800358c:	4413      	add	r3, r2
 800358e:	4a0e      	ldr	r2, [pc, #56]	; (80035c8 <ssd1306_DrawPixel+0xa4>)
 8003590:	5cd3      	ldrb	r3, [r2, r3]
 8003592:	b25a      	sxtb	r2, r3
 8003594:	79bb      	ldrb	r3, [r7, #6]
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	2101      	movs	r1, #1
 800359c:	fa01 f303 	lsl.w	r3, r1, r3
 80035a0:	b25b      	sxtb	r3, r3
 80035a2:	43db      	mvns	r3, r3
 80035a4:	b25b      	sxtb	r3, r3
 80035a6:	4013      	ands	r3, r2
 80035a8:	b259      	sxtb	r1, r3
 80035aa:	79fa      	ldrb	r2, [r7, #7]
 80035ac:	4603      	mov	r3, r0
 80035ae:	01db      	lsls	r3, r3, #7
 80035b0:	4413      	add	r3, r2
 80035b2:	b2c9      	uxtb	r1, r1
 80035b4:	4a04      	ldr	r2, [pc, #16]	; (80035c8 <ssd1306_DrawPixel+0xa4>)
 80035b6:	54d1      	strb	r1, [r2, r3]
 80035b8:	e000      	b.n	80035bc <ssd1306_DrawPixel+0x98>
        return;
 80035ba:	bf00      	nop
    }
}
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	20000170 	.word	0x20000170

080035cc <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80035cc:	b590      	push	{r4, r7, lr}
 80035ce:	b089      	sub	sp, #36	; 0x24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4604      	mov	r4, r0
 80035d4:	1d38      	adds	r0, r7, #4
 80035d6:	e880 0006 	stmia.w	r0, {r1, r2}
 80035da:	461a      	mov	r2, r3
 80035dc:	4623      	mov	r3, r4
 80035de:	73fb      	strb	r3, [r7, #15]
 80035e0:	4613      	mov	r3, r2
 80035e2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
 80035e6:	2b1f      	cmp	r3, #31
 80035e8:	d902      	bls.n	80035f0 <ssd1306_WriteChar+0x24>
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	2b7e      	cmp	r3, #126	; 0x7e
 80035ee:	d901      	bls.n	80035f4 <ssd1306_WriteChar+0x28>
        return 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	e06d      	b.n	80036d0 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80035f4:	4b38      	ldr	r3, [pc, #224]	; (80036d8 <ssd1306_WriteChar+0x10c>)
 80035f6:	881b      	ldrh	r3, [r3, #0]
 80035f8:	461a      	mov	r2, r3
 80035fa:	793b      	ldrb	r3, [r7, #4]
 80035fc:	4413      	add	r3, r2
 80035fe:	2b80      	cmp	r3, #128	; 0x80
 8003600:	dc06      	bgt.n	8003610 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8003602:	4b35      	ldr	r3, [pc, #212]	; (80036d8 <ssd1306_WriteChar+0x10c>)
 8003604:	885b      	ldrh	r3, [r3, #2]
 8003606:	461a      	mov	r2, r3
 8003608:	797b      	ldrb	r3, [r7, #5]
 800360a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800360c:	2b40      	cmp	r3, #64	; 0x40
 800360e:	dd01      	ble.n	8003614 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8003610:	2300      	movs	r3, #0
 8003612:	e05d      	b.n	80036d0 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003614:	2300      	movs	r3, #0
 8003616:	61fb      	str	r3, [r7, #28]
 8003618:	e04c      	b.n	80036b4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	7bfb      	ldrb	r3, [r7, #15]
 800361e:	3b20      	subs	r3, #32
 8003620:	7979      	ldrb	r1, [r7, #5]
 8003622:	fb01 f303 	mul.w	r3, r1, r3
 8003626:	4619      	mov	r1, r3
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	440b      	add	r3, r1
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	4413      	add	r3, r2
 8003630:	881b      	ldrh	r3, [r3, #0]
 8003632:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8003634:	2300      	movs	r3, #0
 8003636:	61bb      	str	r3, [r7, #24]
 8003638:	e034      	b.n	80036a4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d012      	beq.n	8003670 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800364a:	4b23      	ldr	r3, [pc, #140]	; (80036d8 <ssd1306_WriteChar+0x10c>)
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	b2da      	uxtb	r2, r3
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	b2db      	uxtb	r3, r3
 8003654:	4413      	add	r3, r2
 8003656:	b2d8      	uxtb	r0, r3
 8003658:	4b1f      	ldr	r3, [pc, #124]	; (80036d8 <ssd1306_WriteChar+0x10c>)
 800365a:	885b      	ldrh	r3, [r3, #2]
 800365c:	b2da      	uxtb	r2, r3
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	b2db      	uxtb	r3, r3
 8003662:	4413      	add	r3, r2
 8003664:	b2db      	uxtb	r3, r3
 8003666:	7bba      	ldrb	r2, [r7, #14]
 8003668:	4619      	mov	r1, r3
 800366a:	f7ff ff5b 	bl	8003524 <ssd1306_DrawPixel>
 800366e:	e016      	b.n	800369e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003670:	4b19      	ldr	r3, [pc, #100]	; (80036d8 <ssd1306_WriteChar+0x10c>)
 8003672:	881b      	ldrh	r3, [r3, #0]
 8003674:	b2da      	uxtb	r2, r3
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	b2db      	uxtb	r3, r3
 800367a:	4413      	add	r3, r2
 800367c:	b2d8      	uxtb	r0, r3
 800367e:	4b16      	ldr	r3, [pc, #88]	; (80036d8 <ssd1306_WriteChar+0x10c>)
 8003680:	885b      	ldrh	r3, [r3, #2]
 8003682:	b2da      	uxtb	r2, r3
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	b2db      	uxtb	r3, r3
 8003688:	4413      	add	r3, r2
 800368a:	b2d9      	uxtb	r1, r3
 800368c:	7bbb      	ldrb	r3, [r7, #14]
 800368e:	2b00      	cmp	r3, #0
 8003690:	bf0c      	ite	eq
 8003692:	2301      	moveq	r3, #1
 8003694:	2300      	movne	r3, #0
 8003696:	b2db      	uxtb	r3, r3
 8003698:	461a      	mov	r2, r3
 800369a:	f7ff ff43 	bl	8003524 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	3301      	adds	r3, #1
 80036a2:	61bb      	str	r3, [r7, #24]
 80036a4:	793b      	ldrb	r3, [r7, #4]
 80036a6:	461a      	mov	r2, r3
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d3c5      	bcc.n	800363a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	3301      	adds	r3, #1
 80036b2:	61fb      	str	r3, [r7, #28]
 80036b4:	797b      	ldrb	r3, [r7, #5]
 80036b6:	461a      	mov	r2, r3
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d3ad      	bcc.n	800361a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80036be:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <ssd1306_WriteChar+0x10c>)
 80036c0:	881a      	ldrh	r2, [r3, #0]
 80036c2:	793b      	ldrb	r3, [r7, #4]
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	4413      	add	r3, r2
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	4b03      	ldr	r3, [pc, #12]	; (80036d8 <ssd1306_WriteChar+0x10c>)
 80036cc:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3724      	adds	r7, #36	; 0x24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd90      	pop	{r4, r7, pc}
 80036d8:	20000970 	.word	0x20000970

080036dc <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	1d38      	adds	r0, r7, #4
 80036e6:	e880 0006 	stmia.w	r0, {r1, r2}
 80036ea:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80036ec:	e012      	b.n	8003714 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	7818      	ldrb	r0, [r3, #0]
 80036f2:	78fb      	ldrb	r3, [r7, #3]
 80036f4:	1d3a      	adds	r2, r7, #4
 80036f6:	ca06      	ldmia	r2, {r1, r2}
 80036f8:	f7ff ff68 	bl	80035cc <ssd1306_WriteChar>
 80036fc:	4603      	mov	r3, r0
 80036fe:	461a      	mov	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d002      	beq.n	800370e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	e008      	b.n	8003720 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	3301      	adds	r3, #1
 8003712:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1e8      	bne.n	80036ee <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	781b      	ldrb	r3, [r3, #0]
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	4603      	mov	r3, r0
 8003730:	460a      	mov	r2, r1
 8003732:	71fb      	strb	r3, [r7, #7]
 8003734:	4613      	mov	r3, r2
 8003736:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003738:	79fb      	ldrb	r3, [r7, #7]
 800373a:	b29a      	uxth	r2, r3
 800373c:	4b05      	ldr	r3, [pc, #20]	; (8003754 <ssd1306_SetCursor+0x2c>)
 800373e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003740:	79bb      	ldrb	r3, [r7, #6]
 8003742:	b29a      	uxth	r2, r3
 8003744:	4b03      	ldr	r3, [pc, #12]	; (8003754 <ssd1306_SetCursor+0x2c>)
 8003746:	805a      	strh	r2, [r3, #2]
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	20000970 	.word	0x20000970

08003758 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003758:	b590      	push	{r4, r7, lr}
 800375a:	b089      	sub	sp, #36	; 0x24
 800375c:	af00      	add	r7, sp, #0
 800375e:	4604      	mov	r4, r0
 8003760:	4608      	mov	r0, r1
 8003762:	4611      	mov	r1, r2
 8003764:	461a      	mov	r2, r3
 8003766:	4623      	mov	r3, r4
 8003768:	71fb      	strb	r3, [r7, #7]
 800376a:	4603      	mov	r3, r0
 800376c:	71bb      	strb	r3, [r7, #6]
 800376e:	460b      	mov	r3, r1
 8003770:	717b      	strb	r3, [r7, #5]
 8003772:	4613      	mov	r3, r2
 8003774:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 8003776:	797a      	ldrb	r2, [r7, #5]
 8003778:	79fb      	ldrb	r3, [r7, #7]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	bfb8      	it	lt
 8003780:	425b      	neglt	r3, r3
 8003782:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8003784:	793a      	ldrb	r2, [r7, #4]
 8003786:	79bb      	ldrb	r3, [r7, #6]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	bfb8      	it	lt
 800378e:	425b      	neglt	r3, r3
 8003790:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8003792:	79fa      	ldrb	r2, [r7, #7]
 8003794:	797b      	ldrb	r3, [r7, #5]
 8003796:	429a      	cmp	r2, r3
 8003798:	d201      	bcs.n	800379e <ssd1306_Line+0x46>
 800379a:	2301      	movs	r3, #1
 800379c:	e001      	b.n	80037a2 <ssd1306_Line+0x4a>
 800379e:	f04f 33ff 	mov.w	r3, #4294967295
 80037a2:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 80037a4:	79ba      	ldrb	r2, [r7, #6]
 80037a6:	793b      	ldrb	r3, [r7, #4]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d201      	bcs.n	80037b0 <ssd1306_Line+0x58>
 80037ac:	2301      	movs	r3, #1
 80037ae:	e001      	b.n	80037b4 <ssd1306_Line+0x5c>
 80037b0:	f04f 33ff 	mov.w	r3, #4294967295
 80037b4:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 80037be:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80037c2:	7939      	ldrb	r1, [r7, #4]
 80037c4:	797b      	ldrb	r3, [r7, #5]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7ff feac 	bl	8003524 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 80037cc:	e024      	b.n	8003818 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 80037ce:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80037d2:	79b9      	ldrb	r1, [r7, #6]
 80037d4:	79fb      	ldrb	r3, [r7, #7]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff fea4 	bl	8003524 <ssd1306_DrawPixel>
    error2 = error * 2;
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	425b      	negs	r3, r3
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	dd08      	ble.n	80037fe <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 80037ec:	69fa      	ldr	r2, [r7, #28]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	79fb      	ldrb	r3, [r7, #7]
 80037fa:	4413      	add	r3, r2
 80037fc:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	429a      	cmp	r2, r3
 8003804:	da08      	bge.n	8003818 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 8003806:	69fa      	ldr	r2, [r7, #28]
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	4413      	add	r3, r2
 800380c:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	b2da      	uxtb	r2, r3
 8003812:	79bb      	ldrb	r3, [r7, #6]
 8003814:	4413      	add	r3, r2
 8003816:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8003818:	79fa      	ldrb	r2, [r7, #7]
 800381a:	797b      	ldrb	r3, [r7, #5]
 800381c:	429a      	cmp	r2, r3
 800381e:	d1d6      	bne.n	80037ce <ssd1306_Line+0x76>
 8003820:	79ba      	ldrb	r2, [r7, #6]
 8003822:	793b      	ldrb	r3, [r7, #4]
 8003824:	429a      	cmp	r2, r3
 8003826:	d1d2      	bne.n	80037ce <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8003828:	bf00      	nop
}
 800382a:	3724      	adds	r7, #36	; 0x24
 800382c:	46bd      	mov	sp, r7
 800382e:	bd90      	pop	{r4, r7, pc}

08003830 <ssd1306_DrawRectangle>:

    return;
}

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003830:	b590      	push	{r4, r7, lr}
 8003832:	b085      	sub	sp, #20
 8003834:	af02      	add	r7, sp, #8
 8003836:	4604      	mov	r4, r0
 8003838:	4608      	mov	r0, r1
 800383a:	4611      	mov	r1, r2
 800383c:	461a      	mov	r2, r3
 800383e:	4623      	mov	r3, r4
 8003840:	71fb      	strb	r3, [r7, #7]
 8003842:	4603      	mov	r3, r0
 8003844:	71bb      	strb	r3, [r7, #6]
 8003846:	460b      	mov	r3, r1
 8003848:	717b      	strb	r3, [r7, #5]
 800384a:	4613      	mov	r3, r2
 800384c:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 800384e:	79bc      	ldrb	r4, [r7, #6]
 8003850:	797a      	ldrb	r2, [r7, #5]
 8003852:	79b9      	ldrb	r1, [r7, #6]
 8003854:	79f8      	ldrb	r0, [r7, #7]
 8003856:	7e3b      	ldrb	r3, [r7, #24]
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	4623      	mov	r3, r4
 800385c:	f7ff ff7c 	bl	8003758 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8003860:	793c      	ldrb	r4, [r7, #4]
 8003862:	797a      	ldrb	r2, [r7, #5]
 8003864:	79b9      	ldrb	r1, [r7, #6]
 8003866:	7978      	ldrb	r0, [r7, #5]
 8003868:	7e3b      	ldrb	r3, [r7, #24]
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	4623      	mov	r3, r4
 800386e:	f7ff ff73 	bl	8003758 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8003872:	793c      	ldrb	r4, [r7, #4]
 8003874:	79fa      	ldrb	r2, [r7, #7]
 8003876:	7939      	ldrb	r1, [r7, #4]
 8003878:	7978      	ldrb	r0, [r7, #5]
 800387a:	7e3b      	ldrb	r3, [r7, #24]
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	4623      	mov	r3, r4
 8003880:	f7ff ff6a 	bl	8003758 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8003884:	79bc      	ldrb	r4, [r7, #6]
 8003886:	79fa      	ldrb	r2, [r7, #7]
 8003888:	7939      	ldrb	r1, [r7, #4]
 800388a:	79f8      	ldrb	r0, [r7, #7]
 800388c:	7e3b      	ldrb	r3, [r7, #24]
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	4623      	mov	r3, r4
 8003892:	f7ff ff61 	bl	8003758 <ssd1306_Line>

    return;
 8003896:	bf00      	nop
}
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	bd90      	pop	{r4, r7, pc}

0800389e <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800389e:	b580      	push	{r7, lr}
 80038a0:	b084      	sub	sp, #16
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	4603      	mov	r3, r0
 80038a6:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80038a8:	2381      	movs	r3, #129	; 0x81
 80038aa:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff fd14 	bl	80032dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80038b4:	79fb      	ldrb	r3, [r7, #7]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff fd10 	bl	80032dc <ssd1306_WriteCommand>
}
 80038bc:	bf00      	nop
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	4603      	mov	r3, r0
 80038cc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80038ce:	79fb      	ldrb	r3, [r7, #7]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80038d4:	23af      	movs	r3, #175	; 0xaf
 80038d6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80038d8:	4b08      	ldr	r3, [pc, #32]	; (80038fc <ssd1306_SetDisplayOn+0x38>)
 80038da:	2201      	movs	r2, #1
 80038dc:	715a      	strb	r2, [r3, #5]
 80038de:	e004      	b.n	80038ea <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80038e0:	23ae      	movs	r3, #174	; 0xae
 80038e2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80038e4:	4b05      	ldr	r3, [pc, #20]	; (80038fc <ssd1306_SetDisplayOn+0x38>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff fcf5 	bl	80032dc <ssd1306_WriteCommand>
}
 80038f2:	bf00      	nop
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20000970 	.word	0x20000970

08003900 <__libc_init_array>:
 8003900:	b570      	push	{r4, r5, r6, lr}
 8003902:	4d0d      	ldr	r5, [pc, #52]	; (8003938 <__libc_init_array+0x38>)
 8003904:	4c0d      	ldr	r4, [pc, #52]	; (800393c <__libc_init_array+0x3c>)
 8003906:	1b64      	subs	r4, r4, r5
 8003908:	10a4      	asrs	r4, r4, #2
 800390a:	2600      	movs	r6, #0
 800390c:	42a6      	cmp	r6, r4
 800390e:	d109      	bne.n	8003924 <__libc_init_array+0x24>
 8003910:	4d0b      	ldr	r5, [pc, #44]	; (8003940 <__libc_init_array+0x40>)
 8003912:	4c0c      	ldr	r4, [pc, #48]	; (8003944 <__libc_init_array+0x44>)
 8003914:	f000 f87c 	bl	8003a10 <_init>
 8003918:	1b64      	subs	r4, r4, r5
 800391a:	10a4      	asrs	r4, r4, #2
 800391c:	2600      	movs	r6, #0
 800391e:	42a6      	cmp	r6, r4
 8003920:	d105      	bne.n	800392e <__libc_init_array+0x2e>
 8003922:	bd70      	pop	{r4, r5, r6, pc}
 8003924:	f855 3b04 	ldr.w	r3, [r5], #4
 8003928:	4798      	blx	r3
 800392a:	3601      	adds	r6, #1
 800392c:	e7ee      	b.n	800390c <__libc_init_array+0xc>
 800392e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003932:	4798      	blx	r3
 8003934:	3601      	adds	r6, #1
 8003936:	e7f2      	b.n	800391e <__libc_init_array+0x1e>
 8003938:	08006118 	.word	0x08006118
 800393c:	08006118 	.word	0x08006118
 8003940:	08006118 	.word	0x08006118
 8003944:	0800611c 	.word	0x0800611c

08003948 <__itoa>:
 8003948:	1e93      	subs	r3, r2, #2
 800394a:	2b22      	cmp	r3, #34	; 0x22
 800394c:	b510      	push	{r4, lr}
 800394e:	460c      	mov	r4, r1
 8003950:	d904      	bls.n	800395c <__itoa+0x14>
 8003952:	2300      	movs	r3, #0
 8003954:	700b      	strb	r3, [r1, #0]
 8003956:	461c      	mov	r4, r3
 8003958:	4620      	mov	r0, r4
 800395a:	bd10      	pop	{r4, pc}
 800395c:	2a0a      	cmp	r2, #10
 800395e:	d109      	bne.n	8003974 <__itoa+0x2c>
 8003960:	2800      	cmp	r0, #0
 8003962:	da07      	bge.n	8003974 <__itoa+0x2c>
 8003964:	232d      	movs	r3, #45	; 0x2d
 8003966:	700b      	strb	r3, [r1, #0]
 8003968:	4240      	negs	r0, r0
 800396a:	2101      	movs	r1, #1
 800396c:	4421      	add	r1, r4
 800396e:	f000 f80d 	bl	800398c <__utoa>
 8003972:	e7f1      	b.n	8003958 <__itoa+0x10>
 8003974:	2100      	movs	r1, #0
 8003976:	e7f9      	b.n	800396c <__itoa+0x24>

08003978 <itoa>:
 8003978:	f7ff bfe6 	b.w	8003948 <__itoa>

0800397c <memset>:
 800397c:	4402      	add	r2, r0
 800397e:	4603      	mov	r3, r0
 8003980:	4293      	cmp	r3, r2
 8003982:	d100      	bne.n	8003986 <memset+0xa>
 8003984:	4770      	bx	lr
 8003986:	f803 1b01 	strb.w	r1, [r3], #1
 800398a:	e7f9      	b.n	8003980 <memset+0x4>

0800398c <__utoa>:
 800398c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800398e:	4c1f      	ldr	r4, [pc, #124]	; (8003a0c <__utoa+0x80>)
 8003990:	b08b      	sub	sp, #44	; 0x2c
 8003992:	4605      	mov	r5, r0
 8003994:	460b      	mov	r3, r1
 8003996:	466e      	mov	r6, sp
 8003998:	f104 0c20 	add.w	ip, r4, #32
 800399c:	6820      	ldr	r0, [r4, #0]
 800399e:	6861      	ldr	r1, [r4, #4]
 80039a0:	4637      	mov	r7, r6
 80039a2:	c703      	stmia	r7!, {r0, r1}
 80039a4:	3408      	adds	r4, #8
 80039a6:	4564      	cmp	r4, ip
 80039a8:	463e      	mov	r6, r7
 80039aa:	d1f7      	bne.n	800399c <__utoa+0x10>
 80039ac:	7921      	ldrb	r1, [r4, #4]
 80039ae:	7139      	strb	r1, [r7, #4]
 80039b0:	1e91      	subs	r1, r2, #2
 80039b2:	6820      	ldr	r0, [r4, #0]
 80039b4:	6038      	str	r0, [r7, #0]
 80039b6:	2922      	cmp	r1, #34	; 0x22
 80039b8:	f04f 0100 	mov.w	r1, #0
 80039bc:	d904      	bls.n	80039c8 <__utoa+0x3c>
 80039be:	7019      	strb	r1, [r3, #0]
 80039c0:	460b      	mov	r3, r1
 80039c2:	4618      	mov	r0, r3
 80039c4:	b00b      	add	sp, #44	; 0x2c
 80039c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039c8:	1e58      	subs	r0, r3, #1
 80039ca:	4684      	mov	ip, r0
 80039cc:	fbb5 f7f2 	udiv	r7, r5, r2
 80039d0:	fb02 5617 	mls	r6, r2, r7, r5
 80039d4:	3628      	adds	r6, #40	; 0x28
 80039d6:	446e      	add	r6, sp
 80039d8:	460c      	mov	r4, r1
 80039da:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80039de:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80039e2:	462e      	mov	r6, r5
 80039e4:	42b2      	cmp	r2, r6
 80039e6:	f101 0101 	add.w	r1, r1, #1
 80039ea:	463d      	mov	r5, r7
 80039ec:	d9ee      	bls.n	80039cc <__utoa+0x40>
 80039ee:	2200      	movs	r2, #0
 80039f0:	545a      	strb	r2, [r3, r1]
 80039f2:	1919      	adds	r1, r3, r4
 80039f4:	1aa5      	subs	r5, r4, r2
 80039f6:	42aa      	cmp	r2, r5
 80039f8:	dae3      	bge.n	80039c2 <__utoa+0x36>
 80039fa:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80039fe:	780e      	ldrb	r6, [r1, #0]
 8003a00:	7006      	strb	r6, [r0, #0]
 8003a02:	3201      	adds	r2, #1
 8003a04:	f801 5901 	strb.w	r5, [r1], #-1
 8003a08:	e7f4      	b.n	80039f4 <__utoa+0x68>
 8003a0a:	bf00      	nop
 8003a0c:	080060e8 	.word	0x080060e8

08003a10 <_init>:
 8003a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a12:	bf00      	nop
 8003a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a16:	bc08      	pop	{r3}
 8003a18:	469e      	mov	lr, r3
 8003a1a:	4770      	bx	lr

08003a1c <_fini>:
 8003a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1e:	bf00      	nop
 8003a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a22:	bc08      	pop	{r3}
 8003a24:	469e      	mov	lr, r3
 8003a26:	4770      	bx	lr
